module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t){e.exports=require("buffer")},function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function i(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},s={};function a(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=f(e,(0|e)<0?-1:0,!0),i&&(s[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=f(e,e<0?-1:0,!1),i&&(o[e]=n),n)}function u(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return O}else{if(e<=-b)return w;if(e+1>=b)return B}return e<0?u(-e,t).neg():f(e%p|0,e/p|0,t)}function f(e,t,n){return new r(e,t,n)}r.fromInt=a,r.fromNumber=u,r.fromBits=f;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var i=u(l(n,8)),o=g,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),f=parseInt(e.substring(s,s+a),n);if(a<8){var _=u(l(n,a));o=o.mul(_).add(u(f))}else o=(o=o.mul(i)).add(u(f))}return o.unsigned=t,o}function _(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?c(e,t):f(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=c,r.fromValue=_;var p=4294967296,h=p*p,b=h/2,d=a(1<<24),g=a(0);r.ZERO=g;var y=a(0,!0);r.UZERO=y;var m=a(1);r.ONE=m;var N=a(1,!0);r.UONE=N;var S=a(-1);r.NEG_ONE=S;var B=f(-1,2147483647,!1);r.MAX_VALUE=B;var O=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=O;var w=f(0,-2147483648,!1);r.MIN_VALUE=w;var E=r.prototype;E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},E.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(w)){var t=u(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=u(l(e,6),this.unsigned),o=this,s="";;){var a=o.div(i),f=(o.sub(a.mul(i)).toInt()>>>0).toString(e);if((o=a).isZero())return f+s;for(;f.length<6;)f="0"+f;s=""+f+s}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(w)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},E.isZero=function(){return 0===this.high&&0===this.low},E.eqz=E.isZero,E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return 1==(1&this.low)},E.isEven=function(){return 0==(1&this.low)},E.equals=function(e){return i(e)||(e=_(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},E.eq=E.equals,E.notEquals=function(e){return!this.eq(e)},E.neq=E.notEquals,E.ne=E.notEquals,E.lessThan=function(e){return this.comp(e)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(e){return this.comp(e)<=0},E.lte=E.lessThanOrEqual,E.le=E.lessThanOrEqual,E.greaterThan=function(e){return this.comp(e)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(e){return this.comp(e)>=0},E.gte=E.greaterThanOrEqual,E.ge=E.greaterThanOrEqual,E.compare=function(e){if(i(e)||(e=_(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(w)?w:this.not().add(m)},E.neg=E.negate,E.add=function(e){i(e)||(e=_(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,s=e.high>>>16,a=65535&e.high,u=e.low>>>16,l=0,c=0,p=0,h=0;return p+=(h+=o+(65535&e.low))>>>16,c+=(p+=r+u)>>>16,l+=(c+=n+a)>>>16,l+=t+s,f((p&=65535)<<16|(h&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},E.subtract=function(e){return i(e)||(e=_(e)),this.add(e.neg())},E.sub=E.subtract,E.multiply=function(e){if(this.isZero())return g;if(i(e)||(e=_(e)),n)return f(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(w))return e.isOdd()?w:g;if(e.eq(w))return this.isOdd()?w:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(d)&&e.lt(d))return u(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,o=this.low>>>16,s=65535&this.low,a=e.high>>>16,l=65535&e.high,c=e.low>>>16,p=65535&e.low,h=0,b=0,y=0,m=0;return y+=(m+=s*p)>>>16,b+=(y+=o*p)>>>16,y&=65535,b+=(y+=s*c)>>>16,h+=(b+=r*p)>>>16,b&=65535,h+=(b+=o*c)>>>16,b&=65535,h+=(b+=s*l)>>>16,h+=t*p+r*c+o*l+s*a,f((y&=65535)<<16|(m&=65535),(h&=65535)<<16|(b&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(e){if(i(e)||(e=_(e)),e.isZero())throw Error("division by zero");var t,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return N;o=y}else{if(this.eq(w))return e.eq(m)||e.eq(S)?w:e.eq(w)?m:(t=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?m:S:(r=this.sub(e.mul(t)),o=t.add(r.div(e)));if(e.eq(w))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=g}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:l(2,s-48),c=u(t),p=c.mul(e);p.isNegative()||p.gt(r);)p=(c=u(t-=a,this.unsigned)).mul(e);c.isZero()&&(c=m),o=o.add(c),r=r.sub(p)}return o},E.div=E.divide,E.modulo=function(e){return i(e)||(e=_(e)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},E.mod=E.modulo,E.rem=E.modulo,E.not=function(){return f(~this.low,~this.high,this.unsigned)},E.and=function(e){return i(e)||(e=_(e)),f(this.low&e.low,this.high&e.high,this.unsigned)},E.or=function(e){return i(e)||(e=_(e)),f(this.low|e.low,this.high|e.high,this.unsigned)},E.xor=function(e){return i(e)||(e=_(e)),f(this.low^e.low,this.high^e.high,this.unsigned)},E.shiftLeft=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):f(0,this.low<<e-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):f(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(e){if(i(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?f(this.low>>>e|t<<32-e,t>>>e,this.unsigned):f(32===e?t:t>>>e-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.shr_u=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},E.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},E.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e,t,n){n(3);const{createHash:r}=n(4),i=t.defaultEncryptOptions={bit:6,map:"Q4KmX-EDCRopBTGS7as2rWVtuiYnHxz8LOPA0yZk3j6_qwehN9IlUJ51FMbvgfcd",cipher:"moerae_app_cipher",join:"=.@"},o=t.encodeByMap=function(e,t){const n=Object.assign({bit:5,map:"jtzy_7qfkblovewangxum5dsrh86e3p9",cipher:"moerae_crypto",mixed:e=>e,join:".",isHex:!1},t);if(n.map.length<Math.pow(2,n.bit))throw new Error(`not enough characters in options.map, got ${n.map.length}, expected ${Math.pow(2,n.bit)}.`);if("function"!=typeof n.mixed)throw new Error(`options.mixed must be a function, but got ${typeof n.mixed}.`);let r=e,i="",o=null,s=null,a=0,u=0,f=n.cipher;const l=[],c=[];n.isHex||(r=Buffer.from(e).toString("hex"));for(let e=0;e<r.length;e+=8)l.push(r.substr(e,8));a=l[l.length-1].length,l.forEach(e=>{let t=parseInt(e,16).toString(2);for(;t.length<32;)t="0"+t;i+=t}),i=n.mixed(i);for(let e=0;e<i.length;e+=n.bit){const t=i.substr(e,n.bit);c.push(n.map[parseInt(t,2)]),u=t.length}return s=c.join(""),"string"==typeof f?(o=(f=Buffer.from(`##${a}##${u}##${n.cipher}`).toString("base64"))[f.length-1]+f.substr(1,f.length-2)+f[0],n.join?o+n.join+s:{key:o,code:s}):s},s=t.decodeByMap=function(e,t){const n=Object.assign({bit:5,map:"jtzy_7qfkblovewangxum5dsrh86e3p9",remix:e=>e,join:".",isHex:!1},t);if(n.map.length<Math.pow(2,n.bit))throw new Error(`not enough characters in options.map, got ${n.map.length}, expected ${Math.pow(2,n.bit)}.`);if("function"!=typeof n.remix)throw new Error(`options.remix must be a function, but got ${typeof n.remix}.`);const{bit:r,map:i,remix:o,join:s,isHex:a}=n;let u=null,f=null,l=null,c=null,_=null;if("object"==typeof e&&e.key&&e.code)u=e.key,f=e.code;else{if("string"!=typeof e||"string"!=typeof s)throw new Error("code must be a object with [key] & [code] or a string join key & code with options.join!");{const t=e.indexOf(s);u=e.substr(0,t),f=e.substr(t+s.length)}}_=(u=Buffer.from(u[u.length-1]+u.substr(1,u.length-2)+u[0],"base64").toString()).split("##"),l=parseInt(_[1]),c=parseInt(_[2]),u=_.slice(3).join("");let p="",h="";for(let e=0;e<f.length;e++){let t=parseInt(i.indexOf(f[e])).toString(2);for(;t.length<(e===f.length-1?c:r);)t="0"+t;p+=t}p=o(p);for(let e=0;e<p.length;e+=32){let t=parseInt(p.substr(e,32),2).toString(16);for(;t.length<(p.length<=e+32?l:8);)t="0"+t;h+=t}return a?h:Buffer.from(h,"hex").toString()};t.encrypt=function(e){return o(e,i)},t.decrypt=function(e){return s(e,i)};t.md5=function(e){return r("md5").update(e).digest("hex")}},function(e,t){const n=null,r=function(){Date.prototype.getStamp||(Date.prototype.getStamp=function(){return Math.floor(this.getTime()/1e3)}),Date.getCurrentStamp||(Date.getCurrentStamp=function(){return(new Date).getStamp()});const e=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2],t=[1,0,"X",9,8,7,6,5,4,3,2],n=/^[1-9][0-7]\d{4}((19\d{2}(0[13-9]|1[012])(0[1-9]|[12]\d|30))|(19\d{2}(0[13578]|1[02])31)|(19\d{2}02(0[1-9]|1\d|2[0-8]))|(19([13579][26]|[2468][048]|0[48])0229))\d{3}(\d|X|x)?$/i;return String.prototype.isCnNewID||(String.prototype.isCnNewID=function(){if(n.test(this)){let n=0,r=0;for(let t=0;t<this.length-1;t++)n+=parseInt(this.substr(t,1),10)*e[t];return t[r=n%11]==this.substr(17,1).toUpperCase()}return!1}),{date_getStamp:Date.prototype.getStamp,getCurrentStamp:Date.getCurrentStamp,string_isCnNewID:String.prototype.isCnNewID}}();function i(e){this.message=e,this.type="customer",this.name="CustomerError",this.code=9999,this.innerError=this}function o(e){if(e instanceof i)return e;const t=new i;if(e&&"string"!=typeof e){if(e instanceof Error){const{message:n,code:r,type:i,name:o,stack:s,number:a}=e;t.code="number"==typeof r?r:"number"==typeof a?a:t.code,t.message=`(Code:${t.code})${n}`,t.type=i||t.type,t.name=o||t.name,t.stack=s}}else t.message=e||"undefined error!";return t.innerError=e,t}i.prototype=new Error,i.prototype.log=function(e){(e=e||this.logger||console).error(`[!EXCEPTION] - [${this.type}] -> ${this.name||this.message} (Code:${this.code})<----`),this.fileName&&e.error(`\t [line ${this.lineNumber}, col ${this.columnNumber}] - ${this.fileName}`),this.name&&e.error(`\t [message] - ${this.message}`),e.error(`\t ${this.stack||this.innerError.stack}`),e.error("\t --------------------------------------------------")},t.polyfills=r,t.Exception=i,t.caught=o,t.errlog=function(e,t){e instanceof i?e.log(t||n):o(e).log(t||n)},t.setLogger=function(e){n=e}},function(e,t){e.exports=require("crypto")},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,i=n;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},function(e,t){function n(e){const t=[];let n=0;e+="A";for(let r=0;r<e.length;r++)e[r].toLowerCase()===e[r]&&r!==e.length-1||(t.push(e.substring(n,r).toLowerCase()),n=r);return t}function r(e,t){const n=e.split(t);for(let e=0;e<n.length;e++)if(0!==e){const t=n[e];n[e]=t[0].toUpperCase()+t.slice(1)}return n.join("")}t.parseJSON=e=>{try{return JSON.parse(e)}catch(e){return null}},t.camelToHyphenate=e=>n(e).join("-"),t.hyphenateToCamel=e=>r(e,"-"),t.underscoreToCamel=e=>r(e,"_"),t.camelToUnderscore=e=>n(e).join("_"),t.hyphenateToUnderscore=e=>e.split("-").join("_"),t.underscoreToHyphenate=e=>e.split("_").join("-");const i="zero^one^two^three^four^five^six^seven^eight^nine^ten^eleven^twelve^thirteen^fourteen^fifteen^sixteen^seventeen^eighteen^nineteen^^twenty^thirty^forty^fifty^sixty^seventy^eighty^ninety^hundred^^thousand^million^billion^trillion^quadrillion^quintillion".split("^"),o=[];for(let e=0;e<1e3;e++)o[e]=e<20?i[e]:e<100?i[19+Math.floor(e/10)]+(e%10==0?"":"-"+o[e%10]):i[Math.floor(e/100)]+" "+i[29]+(e%100==0?"":" and "+o[e%100]);const s=["","十","百","千","万","亿","点",""],a=["","拾","佰","仟","万","亿","点",""],u=["零","一","二","三","四","五","六","七","八","九"],f=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"];t.num2en=e=>{if(!/^\d*(\.\d*)?$/.test(e))return"Number is wrong!";const t=e.toString().split(".")[0].split(",").join("");let n,r="";for(let e=0;e<Math.ceil(t.length/3);e++)n=parseInt(t.substring(t.length-3*e-3,t.length-3*e),10),r=(0==e&&n>0&&n<100&&parseInt(t.substring(0,length-3),10)>0?" and ":"")+(0==n&&(e>0||0!=t.toString(10))?"":o[n])+(0==n?"":" "+(void 0===i[30+e]?"undefined":i[30+e]))+(0==e||0==n||n>0&&""==r?"":", ")+r;if(e.toString().split(".")[1]){let t=e.toString().split(".")[1].split(",").join("");for(let e=0;e<t.length;e++)n=parseInt(t.substring(e,e+1),10),r+=(0==e?(""==r?i[0]:"")+"point ":"")+(0==n&&0!=e&&!parseInt(t.substring(e+1),10)>0?"":o[n]+" ")}return r.trim()},t.num2cn=(e,t)=>{if(!/^\d*(\.\d*)?$/.test(e))return"Number is wrong!";const n=t?f:u,r=t?[...a]:[...s],i=e.toString().replace(/(^0*)/g,"").split(".");let o=0,l="",c=i[0];for(let e=c.length-1;e>=0;e--){switch(o){case 0:l=r[7]+l;break;case 4:new RegExp("0{4}\\d{"+(c.length-e-1)+"}$").test(c)||(l=r[4]+l);break;case 8:l=r[5]+l,r[7]=r[5],o=0}o%4==2&&0!=c[e+2]&&0==c[e+1]&&(l=n[0]+l),0!=c[e]&&(l=n[c[e]]+r[o%4]+l),o++}if(i.length>1){l+=r[6];for(let e=0;e<i[1].length;e++)l+=n[i[1][e]]}return l},t.list2Tree=(e,t)=>{const n={id:"id",parent:"parent_id",children:"children",...t},r=[],i=function(e){const t={...e};return function e(n,r){let i=null;if(n&&n.length)for(const[,o]of n.entries()){if(r(o)){i=o;break}if(i=e(o[t.children],r))break}return i}}(n),o=[...e];for(;o.length;)for(let e=o.length-1;e>=0;e--){const t=o[e];if(null==t[n.parent]||""===t[n.parent]||0==t[n.parent]||0==t[n.parent])r.push({...t,[n.children]:[]}),o.splice(e,1);else{const s=i(r,e=>t[n.parent]===e[n.id]);s&&(s[n.children]=s[n.children]||[],s[n.children].push({...t}),o.splice(e,1))}}return r}},function(e,t,n){var r=n(4);e.exports=function(){return r.randomBytes(16)}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(6)),r(n(2)),r(n(9)),r(n(3)),r(n(16)),r(n(17))},function(e,t,n){const r=n(10),i=n(11),o=n(12),{ObjectID:s}=n(15),{encodeByMap:a}=n(2);t.genSerial=e=>{e=e||"";let t=(new Date).getTime().toString(),n=Math.floor(10*Math.random()),r=t.length;if(r<15){let e=15-r;for(;e-- >0;)t+="0"}return e+Math.random().toString().slice(2,8)+t.slice(0,n)+Math.random().toString().slice(5,10)+t.slice(n)+Math.random().toString().slice(9,14)+n},t.genUUID=(e,t)=>{switch(e=e||"timestamp"){case"timestamp":return r();case"namespace":return o(t=t||"http://phusis.imqx.com",o.URL);case"random":return i();default:return r()}},t.genId=()=>a((new s).toString(),{cipher:null,mixed:e=>e.substr(1)})},function(e,t,n){var r,i,o=n(7),s=n(5),a=0,u=0;e.exports=function(e,t,n){var f=t&&n||0,l=t||[],c=(e=e||{}).node||r,_=void 0!==e.clockseq?e.clockseq:i;if(null==c||null==_){var p=o();null==c&&(c=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==_&&(_=i=16383&(p[6]<<8|p[7]))}var h=void 0!==e.msecs?e.msecs:(new Date).getTime(),b=void 0!==e.nsecs?e.nsecs:u+1,d=h-a+(b-u)/1e4;if(d<0&&void 0===e.clockseq&&(_=_+1&16383),(d<0||h>a)&&void 0===e.nsecs&&(b=0),b>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=h,u=b,i=_;var g=(1e4*(268435455&(h+=122192928e5))+b)%4294967296;l[f++]=g>>>24&255,l[f++]=g>>>16&255,l[f++]=g>>>8&255,l[f++]=255&g;var y=h/4294967296*1e4&268435455;l[f++]=y>>>8&255,l[f++]=255&y,l[f++]=y>>>24&15|16,l[f++]=y>>>16&255,l[f++]=_>>>8|128,l[f++]=255&_;for(var m=0;m<6;++m)l[f+m]=c[m];return t||s(l)}},function(e,t,n){var r=n(7),i=n(5);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},function(e,t,n){var r=n(13),i=n(14);e.exports=r("v5",80,i)},function(e,t,n){var r=n(5);e.exports=function(e,t,n){var i=function(e,i,o,s){var a=o&&s||0;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(e)),"string"==typeof i&&(i=function(e){var t=[];return e.replace(/[a-fA-F0-9]{2}/g,function(e){t.push(parseInt(e,16))}),t}(i)),!Array.isArray(e))throw TypeError("value must be an array of bytes");if(!Array.isArray(i)||16!==i.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");var u=n(i.concat(e));if(u[6]=15&u[6]|t,u[8]=63&u[8]|128,o)for(var f=0;f<16;++f)o[a+f]=u[f];return o||r(u)};try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e){return"function"==typeof Buffer.from?Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")):Array.isArray(e)?e=new Buffer(e):"string"==typeof e&&(e=new Buffer(e,"utf8")),r.createHash("sha1").update(e).digest()}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"BSON_INT32_MAX",function(){return bson_1}),__webpack_require__.d(__webpack_exports__,"BSON_INT32_MIN",function(){return bson_2}),__webpack_require__.d(__webpack_exports__,"BSON_INT64_MAX",function(){return bson_3}),__webpack_require__.d(__webpack_exports__,"BSON_INT64_MIN",function(){return bson_4}),__webpack_require__.d(__webpack_exports__,"JS_INT_MAX",function(){return bson_5}),__webpack_require__.d(__webpack_exports__,"JS_INT_MIN",function(){return bson_6}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_NUMBER",function(){return bson_7}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_STRING",function(){return bson_8}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_OBJECT",function(){return bson_9}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_ARRAY",function(){return bson_10}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_BINARY",function(){return bson_11}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_UNDEFINED",function(){return bson_12}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_OID",function(){return bson_13}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_BOOLEAN",function(){return bson_14}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DATE",function(){return bson_15}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_NULL",function(){return bson_16}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_REGEXP",function(){return bson_17}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DBPOINTER",function(){return bson_18}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_CODE",function(){return bson_19}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_SYMBOL",function(){return bson_20}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_CODE_W_SCOPE",function(){return bson_21}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_INT",function(){return bson_22}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_TIMESTAMP",function(){return bson_23}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_LONG",function(){return bson_24}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DECIMAL128",function(){return bson_25}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_MIN_KEY",function(){return bson_26}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_MAX_KEY",function(){return bson_27}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_DEFAULT",function(){return bson_28}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_FUNCTION",function(){return bson_29}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_BYTE_ARRAY",function(){return bson_30}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_UUID",function(){return bson_31}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_MD5",function(){return bson_32}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_USER_DEFINED",function(){return bson_33}),__webpack_require__.d(__webpack_exports__,"Code",function(){return bson_34}),__webpack_require__.d(__webpack_exports__,"BSONSymbol",function(){return bson_35}),__webpack_require__.d(__webpack_exports__,"DBRef",function(){return bson_36}),__webpack_require__.d(__webpack_exports__,"Binary",function(){return bson_37}),__webpack_require__.d(__webpack_exports__,"ObjectId",function(){return bson_38}),__webpack_require__.d(__webpack_exports__,"Long",function(){return bson_39}),__webpack_require__.d(__webpack_exports__,"Timestamp",function(){return bson_40}),__webpack_require__.d(__webpack_exports__,"Double",function(){return bson_41}),__webpack_require__.d(__webpack_exports__,"Int32",function(){return bson_42}),__webpack_require__.d(__webpack_exports__,"MinKey",function(){return bson_43}),__webpack_require__.d(__webpack_exports__,"MaxKey",function(){return bson_44}),__webpack_require__.d(__webpack_exports__,"BSONRegExp",function(){return bson_45}),__webpack_require__.d(__webpack_exports__,"Decimal128",function(){return bson_46}),__webpack_require__.d(__webpack_exports__,"serialize",function(){return bson_47}),__webpack_require__.d(__webpack_exports__,"serializeWithBufferAndIndex",function(){return bson_48}),__webpack_require__.d(__webpack_exports__,"deserialize",function(){return bson_49}),__webpack_require__.d(__webpack_exports__,"calculateObjectSize",function(){return bson_50}),__webpack_require__.d(__webpack_exports__,"deserializeStream",function(){return bson_51}),__webpack_require__.d(__webpack_exports__,"setInternalBufferSize",function(){return bson_52}),__webpack_require__.d(__webpack_exports__,"ObjectID",function(){return bson_53}),__webpack_require__.d(__webpack_exports__,"EJSON",function(){return bson_54});var long__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),long__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__),buffer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),buffer__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__),commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var map=createCommonjsModule(function(e){if(void 0!==commonjsGlobal.Map)e.exports=commonjsGlobal.Map,e.exports.Map=commonjsGlobal.Map;else{var t=function(e){this._keys=[],this._values={};for(var t=0;t<e.length;t++)if(null!=e[t]){var n=e[t],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};t.prototype.clear=function(){this._keys=[],this._values={}},t.prototype.delete=function(e){var t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)},t.prototype.entries=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?[n,e._values[n].v]:void 0,done:void 0===n}}}},t.prototype.forEach=function(e,t){t=t||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];e.call(t,this._values[r].v,r,t)}},t.prototype.get=function(e){return this._values[e]?this._values[e].v:void 0},t.prototype.has=function(e){return null!=this._values[e]},t.prototype.keys=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?n:void 0,done:void 0===n}}}},t.prototype.set=function(e,t){return this._values[e]?(this._values[e].v=t,this):(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1},this)},t.prototype.values=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?e._values[n].v:void 0,done:void 0===n}}}},Object.defineProperty(t.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),e.exports=t}}),map_1=map.Map;long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.toExtendedJSON=function(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}},long__WEBPACK_IMPORTED_MODULE_0___default.a.fromExtendedJSON=function(e,t){var n=long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n},Object.defineProperty(long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype,"_bsontype",{value:"Long"});var long_1=long__WEBPACK_IMPORTED_MODULE_0___default.a;function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Double=function(){function e(t){_classCallCheck(this,e),this.value=t}return _createClass(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseFloat(t.$numberDouble):new e(parseFloat(t.$numberDouble))}}]),e}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Timestamp=function(e){function t(e,n){var r;return _classCallCheck$1(this,t),r=long_1.isLong(e)?_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e.low,e.high)):_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e,n)),_possibleConstructorReturn(r)}return _inherits(t,long_1),_createClass$1(t,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(e){return new t(long_1.fromInt(e))}},{key:"fromNumber",value:function(e){return new t(long_1.fromNumber(e))}},{key:"fromBits",value:function(e,n){return new t(e,n)}},{key:"fromString",value:function(e,n){return new t(long_1.fromString(e,n))}},{key:"fromExtendedJSON",value:function(e){return new t(e.$timestamp.i,e.$timestamp.t)}}]),t}();Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,require$$0={};function normalizedFunctionString(e){return e.toString().replace("function(","function (")}function insecureRandomBytes(e){for(var t=new Uint8Array(e),n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(e){return window.crypto.getRandomValues(new Uint8Array(e))};else{try{randomBytes=require$$0.randomBytes}catch(e){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}"function"==typeof global.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global.clearTimeout&&(cachedClearTimeout=clearTimeout);var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(e,t){this.fun=e,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(e){var t=.001*performanceNow.call(performance),n=Math.floor(t),r=Math.floor(t%1*1e9);return e&&(n-=e[0],(r-=e[1])<0&&(n--,r+=1e9)),[n,r]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},inherits;inherits="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e};var inherits$1=inherits;function _typeof$1(e){return(_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var formatRegExp=/%[sdj%]/g;function format(e){if(!isString(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(inspect(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global.process))return function(){return deprecate(e,t).apply(this,arguments)};var n=!1;return function(){return n||(console.error(t),n=!0),e.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){debugs[e]=function(){var t=format.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else debugs[e]=function(){};return debugs[e]}function inspect(e,t){var n={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),isBoolean(t)?n.showHidden=t:t&&_extend(n,t),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,e,n.depth)}function stylizeWithColor(e,t){var n=inspect.styles[t];return n?"["+inspect.colors[n][0]+"m"+e+"["+inspect.colors[n][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function formatValue(e,t,n){if(e.customInspect&&t&&isFunction(t.inspect)&&t.inspect!==inspect&&(!t.constructor||t.constructor.prototype!==t)){var r=t.inspect(n,e);return isString(r)||(r=formatValue(e,r,n)),r}var i=formatPrimitive(e,t);if(i)return i;var o=Object.keys(t),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(t)),isError(t)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(t);if(0===o.length){if(isFunction(t)){var a=t.name?": "+t.name:"";return e.stylize("[Function"+a+"]","special")}if(isRegExp(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(isDate(t))return e.stylize(Date.prototype.toString.call(t),"date");if(isError(t))return formatError(t)}var u,f="",l=!1,c=["{","}"];(isArray(t)&&(l=!0,c=["[","]"]),isFunction(t))&&(f=" [Function"+(t.name?": "+t.name:"")+"]");return isRegExp(t)&&(f=" "+RegExp.prototype.toString.call(t)),isDate(t)&&(f=" "+Date.prototype.toUTCString.call(t)),isError(t)&&(f=" "+formatError(t)),0!==o.length||l&&0!=t.length?n<0?isRegExp(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=l?formatArray(e,t,n,s,o):o.map(function(r){return formatProperty(e,t,n,s,r,l)}),e.seen.pop(),reduceToSingleString(u,f,c)):c[0]+f+c[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)hasOwnProperty(t,String(s))?o.push(formatProperty(e,t,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,t,n,r,i,!0))}),o}function formatProperty(e,t,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(u.value)<0?(a=isNull(n)?formatValue(e,u.value,null):formatValue(e,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function reduceToSingleString(e,t,n){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"===_typeof$1(e)}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"===_typeof$1(e)&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof$1(e)||void 0===e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var e=new Date,t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],t].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(e,t){if(!t||!isObject(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog};function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),e}var Buffer$1=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(e){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(e){return e.toString("hex")}function makeObjectIdError(e,t){var n=e[t];return new TypeError('ObjectId string "'.concat(e,'" contains invalid character "').concat(n,'" with character code (').concat(e.charCodeAt(t),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function e(t){if(_classCallCheck$2(this,e),t instanceof e)return t;if(null==t||"number"==typeof t)return this.id=e.generate(t),void(e.cacheHexString&&(this.__id=this.toString("hex")));var n=e.isValid(t);if(!n&&null!=t)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(n&&"string"==typeof t&&24===t.length&&hasBufferType)return new e(Buffer$1.from(t,"hex"));if(n&&"string"==typeof t&&24===t.length)return e.createFromHexString(t);if(null==t||12!==t.length){if(null!=t&&t.toHexString)return e.createFromHexString(t.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=t,e.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(e,[{key:"toHexString",value:function(){if(e.cacheHexString&&this.__id)return this.__id;var t="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return t=convertToHex(this.id),e.cacheHexString&&(this.__id=t),t;for(var n=0;n<this.id.length;n++){var r=hexTable[this.id.charCodeAt(n)];if("string"!=typeof r)throw makeObjectIdError(this.id,n);t+=r}return e.cacheHexString&&(this.__id=t),t}},{key:"toString",value:function(e){return this.id&&this.id.copy?this.id.toString("string"==typeof e?e:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(t){return t instanceof e?this.toString()===t.toString():"string"==typeof t&&e.isValid(t)&&12===t.length&&this.id instanceof _Buffer?t===this.id.toString("binary"):"string"==typeof t&&e.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&e.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof e||t.toHexString))&&t.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return e.index=(e.index+1)%16777215}},{key:"generate",value:function(t){"number"!=typeof t&&(t=~~(Date.now()/1e3));var n=e.getInc(),r=Buffer$1.alloc(12);return r[3]=255&t,r[2]=t>>8&255,r[1]=t>>16&255,r[0]=t>>24&255,r[4]=PROCESS_UNIQUE[0],r[5]=PROCESS_UNIQUE[1],r[6]=PROCESS_UNIQUE[2],r[7]=PROCESS_UNIQUE[3],r[8]=PROCESS_UNIQUE[4],r[11]=255&n,r[10]=n>>8&255,r[9]=n>>16&255,r}},{key:"createPk",value:function(){return new e}},{key:"createFromTime",value:function(t){var n=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return n[3]=255&t,n[2]=t>>8&255,n[1]=t>>16&255,n[0]=t>>24&255,new e(n)}},{key:"createFromHexString",value:function(t){if(void 0===t||null!=t&&24!==t.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new e(Buffer$1.from(t,"hex"));for(var n=new _Buffer(12),r=0,i=0;i<24;)n[r++]=decodeLookup[t.charCodeAt(i++)]<<4|decodeLookup[t.charCodeAt(i++)];return new e(n)}},{key:"isValid",value:function(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&checkForHexRegExp.test(t):t instanceof e||(t instanceof _Buffer&&12===t.length||!!t.toHexString&&(12===t.id.length||24===t.id.length&&checkForHexRegExp.test(t.id)))))}},{key:"fromExtendedJSON",value:function(t){return new e(t.$oid)}}]),e}();ObjectId.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1(function(e){return ObjectId.generate(e)},"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(e){this.id[3]=255&e,this.id[2]=e>>8&255,this.id[1]=e>>16&255,this.id[0]=e>>24&255}}),ObjectId.prototype[util.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),e}function alphabetize(e){return e.split("").sort().join("")}var BSONRegExp=function(){function e(t,n){_classCallCheck$3(this,e),this.pattern=t||"",this.options=n?alphabetize(n):"";for(var r=0;r<this.options.length;r++)if("i"!==this.options[r]&&"m"!==this.options[r]&&"x"!==this.options[r]&&"l"!==this.options[r]&&"s"!==this.options[r]&&"u"!==this.options[r])throw new Error("The regular expression option [".concat(this.options[r],"] is not supported"))}return _createClass$3(e,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$regularExpression.pattern,t.$regularExpression.options.split("").sort().join(""))}}]),e}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$4(e,t,n){return t&&_defineProperties$4(e.prototype,t),n&&_defineProperties$4(e,n),e}var BSONSymbol=function(){function e(t){_classCallCheck$4(this,e),this.value=t}return _createClass$4(e,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$symbol)}}]),e}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$5(e,t,n){return t&&_defineProperties$5(e.prototype,t),n&&_defineProperties$5(e,n),e}var Int32=function(){function e(t){_classCallCheck$5(this,e),this.value=t}return _createClass$5(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseInt(t.$numberInt,10):new e(t.$numberInt)}}]),e}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$6(e,t,n){return t&&_defineProperties$6(e.prototype,t),n&&_defineProperties$6(e,n),e}var Code=function(){function e(t,n){_classCallCheck$6(this,e),this.code=t,this.scope=n}return _createClass$6(e,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$code,t.$scope)}}]),e}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(e){return!isNaN(parseInt(e,10))}function divideu128(e){var t=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function multiply64x2(e,t){if(!e&&!t)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=e.shiftRightUnsigned(32),r=new long_1(e.getLowBits(),0),i=t.shiftRightUnsigned(32),o=new long_1(t.getLowBits(),0),s=n.multiply(i),a=n.multiply(o),u=r.multiply(i),f=r.multiply(o);return s=s.add(a.shiftRightUnsigned(32)),a=new long_1(a.getLowBits(),0).add(u).add(f.shiftRightUnsigned(32)),{high:s=s.add(a.shiftRightUnsigned(32)),low:f=a.shiftLeft(32).add(new long_1(f.getLowBits(),0))}}function lessThan(e,t){var n=e.high>>>0,r=t.high>>>0;return n<r||n===r&&e.low>>>0<t.low>>>0}function invalidErr(e,t){throw new TypeError('"'.concat(e,'" is not a valid Decimal128 string - ').concat(t))}function Decimal128(e){this.bytes=e}Decimal128.fromString=function(e){var t,n=!1,r=!1,i=!1,o=0,s=0,a=0,u=0,f=0,l=[0],c=0,_=0,p=0,h=0,b=0,d=0,g=[0,0],y=[0,0],m=0;if(e.length>=7e3)throw new TypeError(e+" not a valid Decimal128 string");var N=e.match(PARSE_STRING_REGEXP),S=e.match(PARSE_INF_REGEXP),B=e.match(PARSE_NAN_REGEXP);if(!N&&!S&&!B||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(N){var O=N[2],w=N[4],E=N[5],A=N[6];w&&void 0===A&&invalidErr(e,"missing exponent power"),w&&void 0===O&&invalidErr(e,"missing exponent base"),void 0===w&&(E||A)&&invalidErr(e,"missing e before exponent")}if("+"!==e[m]&&"-"!==e[m]||(n="-"===e[m++]),!isDigit(e[m])&&"."!==e[m]){if("i"===e[m]||"I"===e[m])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(e[m])||"."===e[m];)"."!==e[m]?(c<34&&("0"!==e[m]||i)&&(i||(f=s),i=!0,l[_++]=parseInt(e[m],10),c+=1),i&&(a+=1),r&&(u+=1),s+=1,m+=1):(r&&invalidErr(e,"contains multiple periods"),r=!0,m+=1);if(r&&!s)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[m]||"E"===e[m]){var v=e.substr(++m).match(EXPONENT_REGEX);if(!v||!v[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));b=parseInt(v[0],10),m+=v[0].length}if(e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(p=0,c){if(h=c-1,1!==(o=a))for(;"0"===e[f+o-1];)o-=1}else p=0,h=0,l[0]=0,a=1,c=1,o=0;for(b<=u&&u-b>16384?b=EXPONENT_MIN:b-=u;b>EXPONENT_MAX;){if((h+=1)-p>MAX_DIGITS){if(l.join("").match(/^0+$/)){b=EXPONENT_MAX;break}invalidErr(e,"overflow")}b-=1}for(;b<EXPONENT_MIN||c<a;){if(0===h&&o<c){b=EXPONENT_MIN,o=0;break}if(c<a?a-=1:h-=1,b<EXPONENT_MAX)b+=1;else{if(l.join("").match(/^0+$/)){b=EXPONENT_MAX;break}invalidErr(e,"overflow")}}if(h-p+1<o){var T=s;r&&(f+=1,T+=1),n&&(f+=1,T+=1);var I=parseInt(e[f+h+1],10),D=0;if(I>=5&&(D=1,5===I))for(D=l[h]%2==1,d=f+h+2;d<T;d++)if(parseInt(e[d],10)){D=1;break}if(D)for(var $=h;$>=0;$--)if(++l[$]>9&&(l[$]=0,0===$)){if(!(b<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));b+=1,l[$]=1}}if(g=long_1.fromNumber(0),y=long_1.fromNumber(0),0===o)g=long_1.fromNumber(0),y=long_1.fromNumber(0);else if(h-p<17){var x=p;for(y=long_1.fromNumber(l[x++]),g=new long_1(0,0);x<=h;x++)y=(y=y.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[x]))}else{var k=p;for(g=long_1.fromNumber(l[k++]);k<=h-17;k++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[k]));for(y=long_1.fromNumber(l[k++]);k<=h;k++)y=(y=y.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[k]))}var R=multiply64x2(g,long_1.fromString("100000000000000000"));R.low=R.low.add(y),lessThan(R.low,y)&&(R.high=R.high.add(long_1.fromNumber(1))),t=b+EXPONENT_BIAS;var M={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};R.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(M.high=M.high.or(long_1.fromNumber(3).shiftLeft(61)),M.high=M.high.or(long_1.fromNumber(t).and(long_1.fromNumber(16383).shiftLeft(47))),M.high=M.high.or(R.high.and(long_1.fromNumber(0x7fffffffffff)))):(M.high=M.high.or(long_1.fromNumber(16383&t).shiftLeft(49)),M.high=M.high.or(R.high.and(long_1.fromNumber(562949953421311)))),M.low=R.low,n&&(M.high=M.high.or(long_1.fromString("9223372036854775808")));var P=Buffer$2.alloc(16);return m=0,P[m++]=255&M.low.low,P[m++]=M.low.low>>8&255,P[m++]=M.low.low>>16&255,P[m++]=M.low.low>>24&255,P[m++]=255&M.low.high,P[m++]=M.low.high>>8&255,P[m++]=M.low.high>>16&255,P[m++]=M.low.high>>24&255,P[m++]=255&M.high.low,P[m++]=M.high.low>>8&255,P[m++]=M.high.low>>16&255,P[m++]=M.high.low>>24&255,P[m++]=255&M.high.high,P[m++]=M.high.high>>8&255,P[m++]=M.high.high>>16&255,P[m++]=M.high.high>>24&255,new Decimal128(P)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var e,t,n,r,i,o,s=0,a=new Array(36),u=0;u<a.length;u++)a[u]=0;var f,l,c,_,p,h=0,b=!1,d={parts:new Array(4)},g=[];h=0;var y=this.bytes;if(r=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,n=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,t=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,e=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,h=0,{low:new long_1(r,n),high:new long_1(t,e)}.high.lessThan(long_1.ZERO)&&g.push("-"),(i=e>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return g.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=e>>15&EXPONENT_MASK,c=8+(e>>14&1)}else c=e>>14&7,o=e>>17&EXPONENT_MASK;if(f=o-EXPONENT_BIAS,d.parts[0]=(16383&e)+((15&c)<<14),d.parts[1]=t,d.parts[2]=n,d.parts[3]=r,0===d.parts[0]&&0===d.parts[1]&&0===d.parts[2]&&0===d.parts[3])b=!0;else for(p=3;p>=0;p--){var m=0,N=divideu128(d);if(d=N.quotient,m=N.rem.low)for(_=8;_>=0;_--)a[9*p+_]=m%10,m=Math.floor(m/10)}if(b)s=1,a[h]=0;else for(s=36;!a[h];)s-=1,h+=1;if((l=s-1+f)>=34||l<=-7||f>0){if(s>34)return g.push(0),f>0?g.push("E+"+f):f<0&&g.push("E"+f),g.join("");g.push(a[h++]),(s-=1)&&g.push(".");for(var S=0;S<s;S++)g.push(a[h++]);g.push("E"),l>0?g.push("+"+l):g.push(l)}else if(f>=0)for(var B=0;B<s;B++)g.push(a[h++]);else{var O=s+f;if(O>0)for(var w=0;w<O;w++)g.push(a[h++]);else g.push("0");for(g.push(".");O++<0;)g.push("0");for(var E=0;E<s-Math.max(O-1,0);E++)g.push(a[h++])}return g.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(e){return Decimal128.fromString(e.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$7(e,t,n){return t&&_defineProperties$7(e.prototype,t),n&&_defineProperties$7(e,n),e}var MinKey=function(){function e(){_classCallCheck$7(this,e)}return _createClass$7(e,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$8(e,t,n){return t&&_defineProperties$8(e.prototype,t),n&&_defineProperties$8(e,n),e}var MaxKey=function(){function e(){_classCallCheck$8(this,e)}return _createClass$8(e,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$9(e,t,n){return t&&_defineProperties$9(e.prototype,t),n&&_defineProperties$9(e,n),e}var DBRef=function(){function e(t,n,r,i){_classCallCheck$9(this,e);var o=t.split(".");2===o.length&&(r=o.shift(),t=o.shift()),this.collection=t,this.oid=n,this.db=r,this.fields=i||{}}return _createClass$9(e,[{key:"toJSON",value:function(){var e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}},{key:"toExtendedJSON",value:function(){var e={$ref:this.collection,$id:this.oid};return this.db&&(e.$db=this.db),e=Object.assign(e,this.fields)}}],[{key:"fromExtendedJSON",value:function(t){var n=Object.assign({},t);return["$ref","$id","$db"].forEach(function(e){return delete n[e]}),new e(t.$ref,t.$id,t.$db,n)}}]),e}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(e){this.collection=e},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$a(e,t,n){return t&&_defineProperties$a(e.prototype,t),n&&_defineProperties$a(e,n),e}var Buffer$3=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,Binary=function(){function e(t,n){if(_classCallCheck$a(this,e),!(null==t||"string"==typeof t||Buffer$3.isBuffer(t)||t instanceof Uint8Array||Array.isArray(t)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==n?BSON_BINARY_SUBTYPE_DEFAULT:n,this.position=0,null==t||t instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(e.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE)):this.buffer=new Array(e.BUFFER_SIZE);else{if("string"==typeof t)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(t);else{if("undefined"==typeof Uint8Array&&!Array.isArray(t))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(t)}else this.buffer=t;this.position=t.length}}return _createClass$a(e,[{key:"put",value:function(t){if(null!=t.length&&"number"!=typeof t&&1!==t.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof t&&t<0||t>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var n=null;if(n="string"==typeof t?t.charCodeAt(0):null!=t.length?t[0]:t,this.buffer.length>this.position)this.buffer[this.position++]=n;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var r=Buffer$3.alloc(e.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=n}else{var i=null;i=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE+this.buffer.length)):new Array(e.BUFFER_SIZE+this.buffer.length);for(var o=0;o<this.buffer.length;o++)i[o]=this.buffer[o];this.buffer=i,this.buffer[this.position++]=n}}},{key:"write",value:function(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+e.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+e.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(e)&&Buffer$3.isBuffer(this.buffer))e.copy(this.buffer,t,0,e.length),this.position=t+e.length>this.position?t+e.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof e&&Buffer$3.isBuffer(this.buffer))this.buffer.write(e,t,"binary"),this.position=t+e.length>this.position?t+e.length:this.position;else if(isUint8Array(e)||Array.isArray(e)&&"string"!=typeof e){for(var i=0;i<e.length;i++)this.buffer[t++]=e[i];this.position=t>this.position?t:this.position}else if("string"==typeof e){for(var o=0;o<e.length;o++)this.buffer[t++]=e.charCodeAt(o);this.position=t>this.position?t:this.position}}},{key:"read",value:function(e,t){if(t=t&&t>0?t:this.position,this.buffer.slice)return this.buffer.slice(e,e+t);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t)):new Array(t),r=0;r<t;r++)n[r]=this.buffer[e++];return n}},{key:"value",value:function(e){if((e=null!=e&&e)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(e){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var t=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)t[n]=this.buffer[n];return t}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(e){return null!=this.buffer?this.buffer.slice(0,this.position).toString(e):""}},{key:"toExtendedJSON",value:function(){var e=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),t=Number(this.sub_type).toString(16);return{$binary:{base64:e,subType:1===t.length?"0"+t:t}}}}],[{key:"fromExtendedJSON",value:function(t){var n=t.$binary.subType?parseInt(t.$binary.subType,16):0;return new e(Buffer$3.from(t.$binary.base64,"base64"),n)}}]),e}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)}function writeStringToArray(e){for(var t="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e.length)):new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function convertArraytoUtf8BinaryString(e,t,n){for(var r="",i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(e){return(_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(e,t,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(n>=BSON_INT32_MIN&&n<=BSON_INT32_MAX)return new int_32(n);if(n>=BSON_INT64_MIN&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter(function(e){return e.startsWith("$")&&null!=n[e]}),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var a=n.$date,u=new Date;return"string"==typeof a?u.setTime(Date.parse(a)):long_1.isLong(a)?u.setTime(a.toNumber()):"number"==typeof a&&r.relaxed&&u.setTime(a),u}if(null!=n.$code){var f=Object.assign({},n);return n.$scope&&(f.$scope=deserializeValue(e,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var l=n.$ref?n:n.$dbPointer;if(l instanceof db_ref)return l;var c=Object.keys(l).filter(function(e){return e.startsWith("$")}),_=!0;if(c.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(_=!1)}),_)return db_ref.fromExtendedJSON(l)}return n}function parse(e,t){var n=this;return"boolean"==typeof(t=Object.assign({},{relaxed:!0},t)).relaxed&&(t.strict=!t.relaxed),"boolean"==typeof t.strict&&(t.relaxed=!t.strict),JSON.parse(e,function(e,r){return deserializeValue(n,e,r,t)})}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(e,t,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==t||"object"!==_typeof$2(t)||Array.isArray(t)||(r=t,t=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(e)?serializeArray(e,r):serializeDocument(e,r);return JSON.stringify(i,t,n)}function serialize(e,t){return t=t||{},JSON.parse(stringify(e,t))}function deserialize(e,t){return t=t||{},parse(JSON.stringify(e),t)}function serializeArray(e,t){return e.map(function(e){return serializeValue(e,t)})}function getISOString(e){var t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function serializeValue(e,t){if(Array.isArray(e))return serializeArray(e,t);if(void 0===e)return null;if(e instanceof Date){var n=e.getTime(),r=n>-1&&n<2534023188e5;return t.relaxed&&r?{$date:getISOString(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){var i=e>=BSON_INT64_MIN&&e<=BSON_INT64_MAX;if(e>=BSON_INT32_MIN&&e<=BSON_INT32_MAX)return{$numberInt:e.toString()};if(i)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){var o=e.flags;return void 0===o&&(o=e.toString().match(/[gimuy]*$/)[0]),new regexp(e.source,o).toExtendedJSON()}return null!=e&&"object"===_typeof$2(e)?serializeDocument(e,t):e}var BSON_TYPE_MAPPINGS={Binary:function(e){return new binary(e.value(),e.subtype)},Code:function(e){return new code(e.code,e.scope)},DBRef:function(e){return new db_ref(e.collection||e.namespace,e.oid,e.db,e.fields)},Decimal128:function(e){return new decimal128(e.bytes)},Double:function(e){return new double_1(e.value)},Int32:function(e){return new int_32(e.value)},Long:function(e){return long_1.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(e){return new objectid(e)},ObjectId:function(e){return new objectid(e)},BSONRegExp:function(e){return new regexp(e.pattern,e.options)},Symbol:function(e){return new symbol(e.value)},Timestamp:function(e){return timestamp.fromBits(e.low,e.high)}};function serializeDocument(e,t){if(null==e||"object"!==_typeof$2(e))throw new Error("not an object instance");var n=e._bsontype;if(void 0===n){var r={};for(var i in e)r[i]=serializeValue(e[i],t);return r}if("string"==typeof n){var o=e;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,t)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,t),o.db,o.fields)),o.toExtendedJSON(t)}throw new Error("_bsontype must be a string, but was: "+_typeof$2(n))}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(e,t,n){for(var r=0,i=t;i<n;i+=1){var o=e[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(e,t,n){var r=(t=null==t?{}:t)&&t.index?t.index:0,i=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(t.allowObjectSmallerThanBufferSize&&e.length<i)throw new Error("buffer length ".concat(e.length," must be >= bson size ").concat(i));if(!t.allowObjectSmallerThanBufferSize&&e.length!==i)throw new Error("buffer length ".concat(e.length," must === bson size ").concat(i));if(i+r>e.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(e),")"));if(0!==e[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(e,r,t,n)}function deserializeObject(e,t,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var a=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,f=null!=n.raw&&n.raw,l="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,c=null!=n.promoteBuffers&&n.promoteBuffers,_=null==n.promoteLongs||n.promoteLongs,p=null==n.promoteValues||n.promoteValues,h=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var b=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(b<5||b>e.length)throw new Error("corrupt bson message");for(var d=r?[]:{},g=0;;){var y=e[t++];if(0===y)break;for(var m=t;0!==e[m]&&m<e.length;)m++;if(m>=Buffer$4.byteLength(e))throw new Error("Bad BSON Document: illegal CString");var N=r?g++:e.toString("utf8",t,m);if(t=m+1,y===constants.BSON_DATA_STRING){var S=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(S<=0||S>e.length-t||0!==e[t+S-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+S-1))throw new Error("Invalid UTF-8 string in BSON document");var B=e.toString("utf8",t,t+S-1);d[N]=B,t+=S}else if(y===constants.BSON_DATA_OID){var O=Buffer$4.alloc(12);e.copy(O,0,t,t+12),d[N]=new objectid(O),t+=12}else if(y===constants.BSON_DATA_INT&&!1===p)d[N]=new int_32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(y===constants.BSON_DATA_INT)d[N]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(y===constants.BSON_DATA_NUMBER&&!1===p)d[N]=new double_1(e.readDoubleLE(t)),t+=8;else if(y===constants.BSON_DATA_NUMBER)d[N]=e.readDoubleLE(t),t+=8;else if(y===constants.BSON_DATA_DATE){var w=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,E=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;d[N]=new Date(new long_1(w,E).toNumber())}else if(y===constants.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");d[N]=1===e[t++]}else if(y===constants.BSON_DATA_OBJECT){var A=t,v=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(v<=0||v>e.length-t)throw new Error("bad embedded document length in bson");d[N]=f?e.slice(t,t+v):deserializeObject(e,A,n,!1),t+=v}else if(y===constants.BSON_DATA_ARRAY){var T=t,I=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,D=n,$=t+I;if(u&&u[N]){for(var x in D={},n)D[x]=n[x];D.raw=!0}if(d[N]=deserializeObject(e,T,D,!0),0!==e[(t+=I)-1])throw new Error("invalid array terminator byte");if(t!==$)throw new Error("corrupted array bson")}else if(y===constants.BSON_DATA_UNDEFINED)d[N]=void 0;else if(y===constants.BSON_DATA_NULL)d[N]=null;else if(y===constants.BSON_DATA_LONG){var k=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,R=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,M=new long_1(k,R);d[N]=_&&!0===p&&M.lessThanOrEqual(JS_INT_MAX_LONG)&&M.greaterThanOrEqual(JS_INT_MIN_LONG)?M.toNumber():M}else if(y===constants.BSON_DATA_DECIMAL128){var P=Buffer$4.alloc(16);e.copy(P,0,t,t+16),t+=16;var C=new decimal128(P);d[N]=C.toObject?C.toObject():C}else if(y===constants.BSON_DATA_BINARY){var j=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,U=j,z=e[t++];if(j<0)throw new Error("Negative binary type element size found");if(j>Buffer$4.byteLength(e))throw new Error("Binary type size larger than document size");if(null!=e.slice){if(z===binary.SUBTYPE_BYTE_ARRAY){if((j=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(j>U-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(j<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}d[N]=c&&p?e.slice(t,t+j):new binary(e.slice(t,t+j),z)}else{var L="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(j)):new Array(j);if(z===binary.SUBTYPE_BYTE_ARRAY){if((j=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(j>U-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(j<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(m=0;m<j;m++)L[m]=e[t+m];d[N]=c&&p?L:new binary(L,z)}t+=j}else if(y===constants.BSON_DATA_REGEXP&&!1===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var Y=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var F=e.toString("utf8",t,m);t=m+1;var q=new Array(F.length);for(m=0;m<F.length;m++)switch(F[m]){case"m":q[m]="m";break;case"s":q[m]="g";break;case"i":q[m]="i"}d[N]=new RegExp(Y,q.join(""))}else if(y===constants.BSON_DATA_REGEXP&&!0===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var J=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var X=e.toString("utf8",t,m);t=m+1,d[N]=new regexp(J,X)}else if(y===constants.BSON_DATA_SYMBOL){var K=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(K<=0||K>e.length-t||0!==e[t+K-1])throw new Error("bad string length in bson");d[N]=e.toString("utf8",t,t+K-1),t+=K}else if(y===constants.BSON_DATA_TIMESTAMP){var H=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,G=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;d[N]=new timestamp(H,G)}else if(y===constants.BSON_DATA_MIN_KEY)d[N]=new min_key;else if(y===constants.BSON_DATA_MAX_KEY)d[N]=new max_key;else if(y===constants.BSON_DATA_CODE){var W=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(W<=0||W>e.length-t||0!==e[t+W-1])throw new Error("bad string length in bson");var V=e.toString("utf8",t,t+W-1);if(i)if(o){var Z=s?a(V):V;d[N]=isolateEvalWithHash(functionCache,Z,V,d)}else d[N]=isolateEval(V);else d[N]=new code(V);t+=W}else if(y===constants.BSON_DATA_CODE_W_SCOPE){var Q=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var ee=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ee<=0||ee>e.length-t||0!==e[t+ee-1])throw new Error("bad string length in bson");var te=e.toString("utf8",t,t+ee-1),ne=t+=ee,re=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,ie=deserializeObject(e,ne,n,!1);if(t+=re,Q<8+re+ee)throw new Error("code_w_scope total size is to short, truncating scope");if(Q>8+re+ee)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var oe=s?a(te):te;d[N]=isolateEvalWithHash(functionCache,oe,te,d)}else d[N]=isolateEval(te);d[N].scope=ie}else d[N]=new code(te,ie)}else{if(y!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+y.toString(16)+' for fieldname "'+N+'", are you using the latest BSON parser?');var se=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(se<=0||se>e.length-t||0!==e[t+se-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+se-1))throw new Error("Invalid UTF-8 string in BSON document");var ae=e.toString("utf8",t,t+se-1);t+=se;var ue=Buffer$4.alloc(12);e.copy(ue,0,t,t+12);var fe=new objectid(ue);t+=12,d[N]=new db_ref(ae,fe)}}if(b!==t-h){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var le=Object.keys(d).filter(function(e){return e.startsWith("$")}),ce=!0;if(le.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(ce=!1)}),!ce)return d;if(null!=d.$id&&null!=d.$ref){var _e=Object.assign({},d);return delete _e.$ref,delete _e.$id,delete _e.$db,new db_ref(d.$ref,d.$id,d.$db||null,_e)}return d}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(e,t,n,r,i){var o,s,a="big"===n,u=8*i-r-1,f=(1<<u)-1,l=f>>1,c=-7,_=a?0:i-1,p=a?1:-1,h=e[t+_];for(_+=p,o=h&(1<<-c)-1,h>>=-c,c+=u;c>0;o=256*o+e[t+_],_+=p,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;c>0;s=256*s+e[t+_],_+=p,c-=8);if(0===o)o=1-l;else{if(o===f)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(e,t,n,r,i,o){var s,a,u,f="big"===r,l=8*o-i-1,c=(1<<l)-1,_=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=f?o-1:0,b=f?-1:1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+_>=1?p/u:p*Math.pow(2,1-_))*u>=2&&(s++,u/=2),s+_>=c?(a=0,s=c):s+_>=1?(a=(t*u-1)*Math.pow(2,i),s+=_):(a=t*Math.pow(2,_-1)*Math.pow(2,i),s=0)),isNaN(t)&&(a=0);i>=8;)e[n+h]=255&a,h+=b,a/=256,i-=8;for(s=s<<i|a,isNaN(t)&&(s+=8),l+=i;l>0;)e[n+h]=255&s,h+=b,s/=256,l-=8;e[n+h-b]|=128*d}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(e){return(_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$5=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(e){return"object"===_typeof$3(e)&&"[object Date]"===Object.prototype.toString.call(e)},isRegExp$1=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function serializeString(e,t,n,r,i){e[r++]=constants.BSON_DATA_STRING;var o=i?e.write(t,r,"ascii"):e.write(t,r,"utf8");e[(r=r+o+1)-1]=0;var s=e.write(n,r+4,"utf8");return e[r+3]=s+1>>24&255,e[r+2]=s+1>>16&255,e[r+1]=s+1>>8&255,e[r]=s+1&255,r=r+4+s,e[r++]=0,r}function serializeNumber(e,t,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8}else{e[r++]=constants.BSON_DATA_LONG,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),a=o.getHighBits();e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255}else e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8;return r}function serializeNull(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NULL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeBoolean(e,t,n,r,i){return e[r++]=constants.BSON_DATA_BOOLEAN,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function serializeDate(e,t,n,r,i){e[r++]=constants.BSON_DATA_DATE,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),a=o.getHighBits();return e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function serializeRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=e.write(n.source,r,"utf8"),e[r++]=0,n.ignoreCase&&(e[r++]=105),n.global&&(e[r++]=115),n.multiline&&(e[r++]=109),e[r++]=0,r}function serializeBSONRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=e.write(n.pattern,r,"utf8"),e[r++]=0,r+=e.write(n.options.split("").sort().join(""),r,"utf8"),e[r++]=0,r}function serializeMinMax(e,t,n,r,i){return null===n?e[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=constants.BSON_DATA_MIN_KEY:e[r++]=constants.BSON_DATA_MAX_KEY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeObjectId(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_OID,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function serializeBuffer(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.length;return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(e,r,0,o),r+=o}function serializeObject(e,t,n,r,i,o,s,a,u,f){for(var l=0;l<f.length;l++)if(f[l]===n)throw new Error("cyclic dependency detected");f.push(n),e[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var c=serializeInto(e,n,i,r,o+1,s,a,f);return f.pop(),c}function serializeDecimal128(e,t,n,r,i){return e[r++]=constants.BSON_DATA_DECIMAL128,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function serializeLong(e,t,n,r,i){e[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function serializeInt32(e,t,n,r,i){return e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function serializeDouble(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n.value,r,"little",52,8),r+=8}function serializeFunction(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_CODE,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a=normalizedFunctionString$1(n),u=e.write(a,r+4,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function serializeCode(e,t,n,r,i,o,s,a,u){if(n.scope&&"object"===_typeof$3(n.scope)){e[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var f=r,l="string"==typeof n.code?n.code:n.code.toString();r+=4;var c=e.write(l,r+4,"utf8")+1;e[r]=255&c,e[r+1]=c>>8&255,e[r+2]=c>>16&255,e[r+3]=c>>24&255,e[r+4+c-1]=0,r=r+c+4;var _=serializeInto(e,n.scope,i,r,o+1,s,a);r=_-1;var p=_-f;e[f++]=255&p,e[f++]=p>>8&255,e[f++]=p>>16&255,e[f++]=p>>24&255,e[r++]=0}else{e[r++]=constants.BSON_DATA_CODE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var h=n.code.toString(),b=e.write(h,r+4,"utf8")+1;e[r]=255&b,e[r+1]=b>>8&255,e[r+2]=b>>16&255,e[r+3]=b>>24&255,r=r+4+b-1,e[r++]=0}return r}function serializeBinary(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255),o.copy(e,r,0,n.position),r+=n.position}function serializeSymbol(e,t,n,r,i){e[r++]=constants.BSON_DATA_SYMBOL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=e.write(n.value,r+4,"utf8")+1;return e[r]=255&o,e[r+1]=o>>8&255,e[r+2]=o>>16&255,e[r+3]=o>>24&255,r=r+4+o-1,e[r++]=0,r}function serializeDBRef(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_OBJECT,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a,u=r,f={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(f.$db=n.db);var l=(a=serializeInto(e,f=Object.assign(f,n.fields),!1,r,i+1,o))-u;return e[u++]=255&l,e[u++]=l>>8&255,e[u++]=l>>16&255,e[u++]=l>>24&255,a}function serializeInto(e,t,n,r,i,o,s,a){r=r||0,(a=a||[]).push(t);var u=r+4;if(Array.isArray(t))for(var f=0;f<t.length;f++){var l=""+f,c=t[f];if(c&&c.toBSON){if("function"!=typeof c.toBSON)throw new TypeError("toBSON is not a function");c=c.toBSON()}var _=_typeof$3(c);if("string"===_)u=serializeString(e,l,c,u,!0);else if("number"===_)u=serializeNumber(e,l,c,u,!0);else if("boolean"===_)u=serializeBoolean(e,l,c,u,!0);else if(c instanceof Date||isDate$1(c))u=serializeDate(e,l,c,u,!0);else if(void 0===c)u=serializeNull(e,l,c,u,!0);else if(null===c)u=serializeNull(e,l,c,u,!0);else if("ObjectId"===c._bsontype||"ObjectID"===c._bsontype)u=serializeObjectId(e,l,c,u,!0);else if(Buffer$5.isBuffer(c))u=serializeBuffer(e,l,c,u,!0);else if(c instanceof RegExp||isRegExp$1(c))u=serializeRegExp(e,l,c,u,!0);else if("object"===_&&null==c._bsontype)u=serializeObject(e,l,c,u,n,i,o,s,!0,a);else if("object"===_&&"Decimal128"===c._bsontype)u=serializeDecimal128(e,l,c,u,!0);else if("Long"===c._bsontype||"Timestamp"===c._bsontype)u=serializeLong(e,l,c,u,!0);else if("Double"===c._bsontype)u=serializeDouble(e,l,c,u,!0);else if("function"==typeof c&&o)u=serializeFunction(e,l,c,u,n,i,o,!0);else if("Code"===c._bsontype)u=serializeCode(e,l,c,u,n,i,o,s,!0);else if("Binary"===c._bsontype)u=serializeBinary(e,l,c,u,!0);else if("Symbol"===c._bsontype)u=serializeSymbol(e,l,c,u,!0);else if("DBRef"===c._bsontype)u=serializeDBRef(e,l,c,u,i,o,!0);else if("BSONRegExp"===c._bsontype)u=serializeBSONRegExp(e,l,c,u,!0);else if("Int32"===c._bsontype)u=serializeInt32(e,l,c,u,!0);else if("MinKey"===c._bsontype||"MaxKey"===c._bsontype)u=serializeMinMax(e,l,c,u,!0);else if(void 0!==c._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+c._bsontype)}else if(t instanceof map)for(var p=t.entries(),h=!1;!h;){var b=p.next();if(!(h=b.done)){var d=b.value[0],g=b.value[1],y=_typeof$3(g);if("string"==typeof d&&!ignoreKeys.has(d)){if(null!=d.match(regexp$1))throw Error("key "+d+" must not contain null bytes");if(n){if("$"===d[0])throw Error("key "+d+" must not start with '$'");if(~d.indexOf("."))throw Error("key "+d+" must not contain '.'")}}if("string"===y)u=serializeString(e,d,g,u);else if("number"===y)u=serializeNumber(e,d,g,u);else if("boolean"===y)u=serializeBoolean(e,d,g,u);else if(g instanceof Date||isDate$1(g))u=serializeDate(e,d,g,u);else if(null===g||void 0===g&&!1===s)u=serializeNull(e,d,g,u);else if("ObjectId"===g._bsontype||"ObjectID"===g._bsontype)u=serializeObjectId(e,d,g,u);else if(Buffer$5.isBuffer(g))u=serializeBuffer(e,d,g,u);else if(g instanceof RegExp||isRegExp$1(g))u=serializeRegExp(e,d,g,u);else if("object"===y&&null==g._bsontype)u=serializeObject(e,d,g,u,n,i,o,s,!1,a);else if("object"===y&&"Decimal128"===g._bsontype)u=serializeDecimal128(e,d,g,u);else if("Long"===g._bsontype||"Timestamp"===g._bsontype)u=serializeLong(e,d,g,u);else if("Double"===g._bsontype)u=serializeDouble(e,d,g,u);else if("Code"===g._bsontype)u=serializeCode(e,d,g,u,n,i,o,s);else if("function"==typeof g&&o)u=serializeFunction(e,d,g,u,n,i,o);else if("Binary"===g._bsontype)u=serializeBinary(e,d,g,u);else if("Symbol"===g._bsontype)u=serializeSymbol(e,d,g,u);else if("DBRef"===g._bsontype)u=serializeDBRef(e,d,g,u,i,o);else if("BSONRegExp"===g._bsontype)u=serializeBSONRegExp(e,d,g,u);else if("Int32"===g._bsontype)u=serializeInt32(e,d,g,u);else if("MinKey"===g._bsontype||"MaxKey"===g._bsontype)u=serializeMinMax(e,d,g,u);else if(void 0!==g._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+g._bsontype)}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!==_typeof$3(t))throw new TypeError("toBSON function did not return an object")}for(var m in t){var N=t[m];if(N&&N.toBSON){if("function"!=typeof N.toBSON)throw new TypeError("toBSON is not a function");N=N.toBSON()}var S=_typeof$3(N);if("string"==typeof m&&!ignoreKeys.has(m)){if(null!=m.match(regexp$1))throw Error("key "+m+" must not contain null bytes");if(n){if("$"===m[0])throw Error("key "+m+" must not start with '$'");if(~m.indexOf("."))throw Error("key "+m+" must not contain '.'")}}if("string"===S)u=serializeString(e,m,N,u);else if("number"===S)u=serializeNumber(e,m,N,u);else if("boolean"===S)u=serializeBoolean(e,m,N,u);else if(N instanceof Date||isDate$1(N))u=serializeDate(e,m,N,u);else if(void 0===N)!1===s&&(u=serializeNull(e,m,N,u));else if(null===N)u=serializeNull(e,m,N,u);else if("ObjectId"===N._bsontype||"ObjectID"===N._bsontype)u=serializeObjectId(e,m,N,u);else if(Buffer$5.isBuffer(N))u=serializeBuffer(e,m,N,u);else if(N instanceof RegExp||isRegExp$1(N))u=serializeRegExp(e,m,N,u);else if("object"===S&&null==N._bsontype)u=serializeObject(e,m,N,u,n,i,o,s,!1,a);else if("object"===S&&"Decimal128"===N._bsontype)u=serializeDecimal128(e,m,N,u);else if("Long"===N._bsontype||"Timestamp"===N._bsontype)u=serializeLong(e,m,N,u);else if("Double"===N._bsontype)u=serializeDouble(e,m,N,u);else if("Code"===N._bsontype)u=serializeCode(e,m,N,u,n,i,o,s);else if("function"==typeof N&&o)u=serializeFunction(e,m,N,u,n,i,o);else if("Binary"===N._bsontype)u=serializeBinary(e,m,N,u);else if("Symbol"===N._bsontype)u=serializeSymbol(e,m,N,u);else if("DBRef"===N._bsontype)u=serializeDBRef(e,m,N,u,i,o);else if("BSONRegExp"===N._bsontype)u=serializeBSONRegExp(e,m,N,u);else if("Int32"===N._bsontype)u=serializeInt32(e,m,N,u);else if("MinKey"===N._bsontype||"MaxKey"===N._bsontype)u=serializeMinMax(e,m,N,u);else if(void 0!==N._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+N._bsontype)}}a.pop(),e[u++]=0;var B=u-r;return e[r++]=255&B,e[r++]=B>>8&255,e[r++]=B>>16&255,e[r++]=B>>24&255,u}var serializer=serializeInto;function _typeof$4(e){return(_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$6=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(e){return"object"===_typeof$4(e)&&"[object Date]"===Object.prototype.toString.call(e)}function calculateObjectSize(e,t,n){var r=5;if(Array.isArray(e))for(var i=0;i<e.length;i++)r+=calculateElement(i.toString(),e[i],t,!0,n);else for(var o in e.toBSON&&(e=e.toBSON()),e)r+=calculateElement(o,e[o],t,!1,n);return r}function calculateElement(e,t,n,r,i){switch(t&&t.toBSON&&(t=t.toBSON()),_typeof$4(t)){case"string":return 1+Buffer$6.byteLength(e,"utf8")+1+4+Buffer$6.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=constants.JS_INT_MIN&&t<=constants.JS_INT_MAX&&t>=constants.BSON_INT32_MIN&&t<=constants.BSON_INT32_MAX?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+5:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||isDate$2(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+6+t.length;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&Object.keys(t.scope).length>0?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1+calculateObjectSize(t.scope,n,i):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+Buffer$6.byteLength(t.value,"utf8")+4+1+1;if("DBRef"===t._bsontype){var o=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(o.$db=t.db),(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+calculateObjectSize(o,n,i)}return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.pattern,"utf8")+1+Buffer$6.byteLength(t.options,"utf8")+1:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+calculateObjectSize(t,n,i)+1;case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(n&&null!=t.scope&&Object.keys(t.scope).length>0)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1+calculateObjectSize(t.scope,n,i);if(n)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,ensure_buffer=function(e){if(e instanceof Buffer$7)return e;if(e instanceof Uint8Array)return Buffer$7.from(e.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(e){buffer$1.length<e&&(buffer$1=Buffer$8.alloc(e))}function serialize$1(e,t){var n="boolean"==typeof(t=t||{}).checkKeys&&t.checkKeys,r="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,i="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,o="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,e,n,0,0,r,i,[]),a=Buffer$8.alloc(s);return buffer$1.copy(a,0,0,a.length),a}function serializeWithBufferAndIndex(e,t,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,a=serializer(buffer$1,e,r,0,0,i,o);return buffer$1.copy(t,s,0,a),s+a-1}function deserialize$2(e,t){return e=ensure_buffer(e),deserializer(e,t)}function calculateObjectSize$1(e,t){var n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return calculate_size(e,n,r)}function deserializeStream(e,t,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),e=ensure_buffer(e);for(var s=t,a=0;a<n;a++){var u=e[s]|e[s+1]<<8|e[s+2]<<16|e[s+3]<<24;o.index=s,r[i+a]=deserializer(e,o),s+=u}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;__webpack_exports__.default=bson},function(e,t){t.sleep=e=>new Promise(t=>setTimeout(()=>t(),e))},function(e,t,n){n(3);const r=n(18),{parseJSON:i}=n(6),{encrypt:o,decrypt:s}=n(2),a=(t.makeEncryptedQuery=function(e,t,n){const r=Object.assign({mix:o,join:defaultEncryptOptions.join},n),i=Date.getCurrentStamp(),[s,a]=o(JSON.stringify(t)).split(r.join),u=r.mix(`token=${e}&key=${s}&timestamp=${i}`);return{credential:o(JSON.stringify({token:e,mixed:u,timestamp:i})),encryptedQuery:a}},t.extractCredential=function(e,t){if("string"!=typeof e)throw new Error("credential must be string!");const n=Object.assign({remix:s,expire:60},t),o=Date.getCurrentStamp();try{const{token:t,mixed:a,timestamp:u}=i(s(e)),f=r.parse(n.remix(a));return f.token!==t||f.timestamp.toString()!==u.toString()||o-u>n.expire?null:f}catch(e){return null}});t.extractQuery=function(e,t,n){const r=Object.assign({remix:s,join:defaultEncryptOptions.join,expire:60},n),o=a(e,r.remix,r.expire);if(o){const{token:e,key:n,timestamp:a}=o;return{token:e,key:n,query:i(s(n+r.join+t)),timestamp:a}}return null}},function(e,t){e.exports=require("querystring")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYnVmZmVyXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvbmcvc3JjL2xvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3V0aWxpdGllcy9jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3V0aWxpdGllcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3V0aWxpdGllcy9jb252ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vbGliL3V0aWxpdGllcy9mYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL3YxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL3Y1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi92MzUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL3NoYTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jzb24vZGlzdC9ic29uLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdXRpbGl0aWVzL3N5c3RlbS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdXRpbGl0aWVzL2F1dGhvcml6YXRpb24uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicXVlcnlzdHJpbmdcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJMb25nIiwid2FzbSIsIldlYkFzc2VtYmx5IiwiSW5zdGFuY2UiLCJNb2R1bGUiLCJVaW50OEFycmF5IiwiZSIsImxvdyIsImhpZ2giLCJ1bnNpZ25lZCIsInRoaXMiLCJpc0xvbmciLCJvYmoiLCJfX2lzTG9uZ19fIiwiSU5UX0NBQ0hFIiwiVUlOVF9DQUNIRSIsImZyb21JbnQiLCJjYWNoZWRPYmoiLCJjYWNoZSIsImZyb21CaXRzIiwiZnJvbU51bWJlciIsImlzTmFOIiwiVVpFUk8iLCJaRVJPIiwiVFdPX1BXUl82NF9EQkwiLCJNQVhfVU5TSUdORURfVkFMVUUiLCJUV09fUFdSXzYzX0RCTCIsIk1JTl9WQUxVRSIsIk1BWF9WQUxVRSIsIm5lZyIsIlRXT19QV1JfMzJfREJMIiwibG93Qml0cyIsImhpZ2hCaXRzIiwicG93X2RibCIsIk1hdGgiLCJwb3ciLCJmcm9tU3RyaW5nIiwic3RyIiwicmFkaXgiLCJsZW5ndGgiLCJFcnJvciIsIlJhbmdlRXJyb3IiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwicmFkaXhUb1Bvd2VyIiwicmVzdWx0Iiwic2l6ZSIsIm1pbiIsInBhcnNlSW50IiwicG93ZXIiLCJtdWwiLCJhZGQiLCJmcm9tVmFsdWUiLCJ2YWwiLCJUV09fUFdSXzE2X0RCTCIsIlRXT19QV1JfMjQiLCJPTkUiLCJVT05FIiwiTkVHX09ORSIsIkxvbmdQcm90b3R5cGUiLCJ0b0ludCIsInRvTnVtYmVyIiwidG9TdHJpbmciLCJpc1plcm8iLCJpc05lZ2F0aXZlIiwiZXEiLCJyYWRpeExvbmciLCJkaXYiLCJyZW0xIiwic3ViIiwicmVtIiwicmVtRGl2IiwiZGlnaXRzIiwiZ2V0SGlnaEJpdHMiLCJnZXRIaWdoQml0c1Vuc2lnbmVkIiwiZ2V0TG93Qml0cyIsImdldExvd0JpdHNVbnNpZ25lZCIsImdldE51bUJpdHNBYnMiLCJiaXQiLCJlcXoiLCJpc1Bvc2l0aXZlIiwiaXNPZGQiLCJpc0V2ZW4iLCJlcXVhbHMiLCJvdGhlciIsIm5vdEVxdWFscyIsIm5lcSIsIm5lIiwibGVzc1RoYW4iLCJjb21wIiwibHQiLCJsZXNzVGhhbk9yRXF1YWwiLCJsdGUiLCJsZSIsImdyZWF0ZXJUaGFuIiwiZ3QiLCJncmVhdGVyVGhhbk9yRXF1YWwiLCJndGUiLCJnZSIsImNvbXBhcmUiLCJ0aGlzTmVnIiwib3RoZXJOZWciLCJuZWdhdGUiLCJub3QiLCJhZGRlbmQiLCJhNDgiLCJhMzIiLCJhMTYiLCJhMDAiLCJiNDgiLCJiMzIiLCJiMTYiLCJjNDgiLCJjMzIiLCJjMTYiLCJjMDAiLCJzdWJ0cmFjdCIsInN1YnRyYWhlbmQiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJnZXRfaGlnaCIsImIwMCIsImRpdmlkZSIsImRpdmlzb3IiLCJhcHByb3giLCJyZXMiLCJkaXZfdSIsImRpdl9zIiwidG9VbnNpZ25lZCIsInNocnUiLCJzaHIiLCJzaGwiLCJtYXgiLCJmbG9vciIsImxvZzIiLCJjZWlsIiwibG9nIiwiTE4yIiwiZGVsdGEiLCJhcHByb3hSZXMiLCJhcHByb3hSZW0iLCJtb2R1bG8iLCJyZW1fdSIsInJlbV9zIiwibW9kIiwiYW5kIiwib3IiLCJ4b3IiLCJzaGlmdExlZnQiLCJudW1CaXRzIiwic2hpZnRSaWdodCIsInNoaWZ0UmlnaHRVbnNpZ25lZCIsInNocl91IiwidG9TaWduZWQiLCJ0b0J5dGVzIiwidG9CeXRlc0xFIiwidG9CeXRlc0JFIiwiaGkiLCJsbyIsImZyb21CeXRlcyIsImJ5dGVzIiwiZnJvbUJ5dGVzTEUiLCJmcm9tQnl0ZXNCRSIsImNyZWF0ZUhhc2giLCJkZWZhdWx0RW5jcnlwdE9wdGlvbnMiLCJtYXAiLCJjaXBoZXIiLCJqb2luIiwiZW5jb2RlQnlNYXAiLCJvcmlnaW4iLCJvcHRpb25zIiwiX29wdHMiLCJhc3NpZ24iLCJtaXhlZCIsImlzSGV4IiwiX2hleCIsIl9zdHIyIiwiY29kZSIsIl9sYXN0OExlbmd0aCIsIl9sYXN0Mkxlbmd0aCIsIl9rZXlPcmlnaW4iLCJfaGV4ZXNfc3BsaXQ4IiwiX2FyckJpdCIsIkJ1ZmZlciIsImZyb20iLCJwdXNoIiwic3Vic3RyIiwiZm9yRWFjaCIsImgiLCJfaW50MiIsImoiLCJfYml0MiIsImRlY29kZUJ5TWFwIiwicmVtaXgiLCJfY29kZU9yaWdpbiIsIl9zcGFyciIsImppIiwic3BsaXQiLCJzbGljZSIsIl9zdHIxNiIsIl9pbnQxNiIsImVuY3J5cHQiLCJkZWNyeXB0IiwibWQ1IiwidXBkYXRlIiwiZGlnZXN0IiwiX19sb2dnZXJfXyIsInBvbHlmaWxscyIsIkRhdGUiLCJnZXRTdGFtcCIsImdldFRpbWUiLCJnZXRDdXJyZW50U3RhbXAiLCJhcnJFeHAiLCJhcnJWYWxpZCIsImNuTmV3SURSZWdFeHAiLCJTdHJpbmciLCJpc0NuTmV3SUQiLCJ0ZXN0Iiwic3VtIiwiaWR4IiwidG9VcHBlckNhc2UiLCJkYXRlX2dldFN0YW1wIiwic3RyaW5nX2lzQ25OZXdJRCIsIkV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJ0eXBlIiwiaW5uZXJFcnJvciIsIl9jYXVnaHQiLCJlcnIiLCJ3cmFwcGVyIiwic3RhY2siLCJudW1iZXIiLCJsb2dnZXIiLCJjb25zb2xlIiwiZXJyb3IiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJjYXVnaHQiLCJlcnJsb2ciLCJzZXRMb2dnZXIiLCJieXRlVG9IZXgiLCJidWYiLCJvZmZzZXQiLCJidGgiLCJwYXJzZUNhbWVsIiwic3RhcnQiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlQ29ubmVjdG9yIiwiY29ubmVjdG9yIiwidiIsInBhcnNlSlNPTiIsIkpTT04iLCJwYXJzZSIsImNhbWVsVG9IeXBoZW5hdGUiLCJoeXBoZW5hdGVUb0NhbWVsIiwidW5kZXJzY29yZVRvQ2FtZWwiLCJjYW1lbFRvVW5kZXJzY29yZSIsImh5cGhlbmF0ZVRvVW5kZXJzY29yZSIsInVuZGVyc2NvcmVUb0h5cGhlbmF0ZSIsIkEiLCJCIiwiUyIsIlIiLCJYIiwiWSIsIm51bTJlbiIsIm51bSIsIm51bUludCIsInNlYyIsInRleHQiLCJudW1GbG9hdCIsInRyaW0iLCJudW0yY24iLCJmIiwiQUEiLCJCQiIsImEiLCJyZXBsYWNlIiwiayIsInJlIiwic3MiLCJSZWdFeHAiLCJsaXN0MlRyZWUiLCJsaXN0Iiwib3B0cyIsImlkIiwicGFyZW50IiwiY2hpbGRyZW4iLCJ0cmVlIiwid2FsayIsIm9wIiwidHIiLCJmbiIsImVudHJpZXMiLCJ0YWJsZSIsInJvdyIsIltvYmplY3QgT2JqZWN0XSIsInNwbGljZSIsInBzIiwibm9kZSIsImNyeXB0byIsInJhbmRvbUJ5dGVzIiwiX19leHBvcnQiLCJ1dWlkdjEiLCJ1dWlkdjQiLCJ1dWlkdjUiLCJPYmplY3RJRCIsImdlblNlcmlhbCIsInByZSIsInJhbmRvbSIsIngiLCJnZW5VVUlEIiwicGFyYW0iLCJVUkwiLCJnZW5JZCIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJybmciLCJieXRlc1RvVXVpZCIsIl9sYXN0TVNlY3MiLCJfbGFzdE5TZWNzIiwiYiIsImNsb2Nrc2VxIiwidW5kZWZpbmVkIiwic2VlZEJ5dGVzIiwibXNlY3MiLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJBcnJheSIsInJuZHMiLCJpaSIsInYzNSIsInNoYTEiLCJ2ZXJzaW9uIiwiaGFzaGZ1bmMiLCJnZW5lcmF0ZVVVSUQiLCJuYW1lc3BhY2UiLCJvZmYiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNoYXJDb2RlQXQiLCJzdHJpbmdUb0J5dGVzIiwidXVpZCIsImhleCIsInV1aWRUb0J5dGVzIiwiaXNBcnJheSIsIlR5cGVFcnJvciIsImNvbmNhdCIsIkROUyIsIl9fd2VicGFja19leHBvcnRzX18iLCJic29uXzEiLCJic29uXzIiLCJic29uXzMiLCJic29uXzQiLCJic29uXzUiLCJic29uXzYiLCJic29uXzciLCJic29uXzgiLCJic29uXzkiLCJic29uXzEwIiwiYnNvbl8xMSIsImJzb25fMTIiLCJic29uXzEzIiwiYnNvbl8xNCIsImJzb25fMTUiLCJic29uXzE2IiwiYnNvbl8xNyIsImJzb25fMTgiLCJic29uXzE5IiwiYnNvbl8yMCIsImJzb25fMjEiLCJic29uXzIyIiwiYnNvbl8yMyIsImJzb25fMjQiLCJic29uXzI1IiwiYnNvbl8yNiIsImJzb25fMjciLCJic29uXzI4IiwiYnNvbl8yOSIsImJzb25fMzAiLCJic29uXzMxIiwiYnNvbl8zMiIsImJzb25fMzMiLCJic29uXzM0IiwiYnNvbl8zNSIsImJzb25fMzYiLCJic29uXzM3IiwiYnNvbl8zOCIsImJzb25fMzkiLCJic29uXzQwIiwiYnNvbl80MSIsImJzb25fNDIiLCJic29uXzQzIiwiYnNvbl80NCIsImJzb25fNDUiLCJic29uXzQ2IiwiYnNvbl80NyIsImJzb25fNDgiLCJic29uXzQ5IiwiYnNvbl81MCIsImJzb25fNTEiLCJic29uXzUyIiwiYnNvbl81MyIsImJzb25fNTQiLCJsb25nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJsb25nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImJ1ZmZlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiYnVmZmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsImNvbW1vbmpzR2xvYmFsIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiTWFwIiwiYXJyYXkiLCJfa2V5cyIsIl92YWx1ZXMiLCJlbnRyeSIsImNsZWFyIiwiZGVsZXRlIiwiaW5kZXgiLCJuZXh0IiwiZG9uZSIsImNhbGxiYWNrIiwiaGFzIiwia2V5cyIsInNldCIsInZhbHVlcyIsIm1hcF8xIiwidG9FeHRlbmRlZEpTT04iLCJyZWxheGVkIiwiJG51bWJlckxvbmciLCJmcm9tRXh0ZW5kZWRKU09OIiwiZG9jIiwibG9uZ18xIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJEb3VibGUiLCJpc0Zpbml0ZSIsIiRudW1iZXJEb3VibGUiLCJwYXJzZUZsb2F0IiwiZG91YmxlXzEiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayQxIiwiX2RlZmluZVByb3BlcnRpZXMkMSIsIl9jcmVhdGVDbGFzcyQxIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3NldFByb3RvdHlwZU9mIiwiVGltZXN0YW1wIiwiX0xvbmciLCJfdGhpcyIsIiR0aW1lc3RhbXAiLCJvcHRfcmFkaXgiLCJ0aW1lc3RhbXAiLCJyZXF1aXJlJCQwIiwibm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nIiwiaW5zZWN1cmVSYW5kb21CeXRlcyIsImdldFJhbmRvbVZhbHVlcyIsInV0aWxzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjbGVhclRpbWVvdXQiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibmV4dFRpY2siLCJhcmdzIiwiYXJndW1lbnRzIiwiSXRlbSIsImFwcGx5IiwidGl0bGUiLCJwbGF0Zm9ybSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJyZWxlYXNlIiwiY29uZmlnIiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJwZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlTm93Iiwibm93IiwibW96Tm93IiwibXNOb3ciLCJvTm93Iiwid2Via2l0Tm93IiwiaHJ0aW1lIiwicHJldmlvdXNUaW1lc3RhbXAiLCJjbG9ja3RpbWUiLCJzZWNvbmRzIiwibmFub3NlY29uZHMiLCJzdGFydFRpbWUiLCJ1cHRpbWUiLCJwcm9jZXNzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJpbmhlcml0cyQxIiwiX3R5cGVvZiQxIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiaXNTdHJpbmciLCJvYmplY3RzIiwiaW5zcGVjdCIsIk51bWJlciIsInN0cmluZ2lmeSIsIl8iLCJpc051bGwiLCJpc09iamVjdCIsImRlcHJlY2F0ZSIsIm1zZyIsImlzVW5kZWZpbmVkIiwid2FybmVkIiwiZGVidWdzIiwiZGVidWdFbnZpcm9uIiwiZGVidWdsb2ciLCJOT0RFX0RFQlVHIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJhcnJheVRvSGFzaCIsImhhc2giLCJyZWN1cnNlVGltZXMiLCJpc0Z1bmN0aW9uIiwicmV0IiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJvdXRwdXQiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRBcnJheSIsImZvcm1hdFByb3BlcnR5IiwicG9wIiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJzaW1wbGUiLCJpc051bWJlciIsIm1hdGNoIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImxpbmUiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwiYXIiLCJhcmciLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwib2JqZWN0VG9TdHJpbmciLCJpc1ByaW1pdGl2ZSIsImlzQnVmZmVyIiwibWF5YmVCdWYiLCJwYWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwiYm9vbGVhbiIsIm51bGwiLCJzdHJpbmciLCJkYXRlIiwicmVnZXhwIiwibW9udGhzIiwidGltZXN0YW1wJDEiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsInByb3AiLCJ1dGlsIiwiX2NsYXNzQ2FsbENoZWNrJDIiLCJfZGVmaW5lUHJvcGVydGllcyQyIiwiX2NyZWF0ZUNsYXNzJDIiLCJCdWZmZXIkMSIsInJhbmRvbUJ5dGVzJDEiLCJkZXByZWNhdGUkMSIsIlBST0NFU1NfVU5JUVVFIiwiY2hlY2tGb3JIZXhSZWdFeHAiLCJoYXNCdWZmZXJUeXBlIiwiaGV4VGFibGUiLCJfaSIsImRlY29kZUxvb2t1cCIsIl9CdWZmZXIiLCJjb252ZXJ0VG9IZXgiLCJtYWtlT2JqZWN0SWRFcnJvciIsImludmFsaWRTdHJpbmciLCJpbnZhbGlkQ2hhcmFjdGVyIiwiT2JqZWN0SWQiLCJnZW5lcmF0ZSIsImNhY2hlSGV4U3RyaW5nIiwiX19pZCIsInZhbGlkIiwiaXNWYWxpZCIsImNyZWF0ZUZyb21IZXhTdHJpbmciLCJ0b0hleFN0cmluZyIsImhleFN0cmluZyIsIl9pMiIsImhleENoYXIiLCJjb3B5Iiwib3RoZXJJZCIsInJlYWRVSW50MzJCRSIsInNldFRpbWUiLCIkb2lkIiwiaW5jIiwiZ2V0SW5jIiwiYnVmZmVyJCQxIiwiYWxsb2MiLCJnZXRfaW5jIiwiY3VzdG9tIiwib2JqZWN0aWQiLCJfY2xhc3NDYWxsQ2hlY2skMyIsIl9kZWZpbmVQcm9wZXJ0aWVzJDMiLCJfY3JlYXRlQ2xhc3MkMyIsImFscGhhYmV0aXplIiwic29ydCIsIkJTT05SZWdFeHAiLCJwYXR0ZXJuIiwiJHJlZ3VsYXJFeHByZXNzaW9uIiwiX2NsYXNzQ2FsbENoZWNrJDQiLCJfZGVmaW5lUHJvcGVydGllcyQ0IiwiX2NyZWF0ZUNsYXNzJDQiLCJCU09OU3ltYm9sIiwiJHN5bWJvbCIsInN5bWJvbCIsIl9jbGFzc0NhbGxDaGVjayQ1IiwiX2RlZmluZVByb3BlcnRpZXMkNSIsIl9jcmVhdGVDbGFzcyQ1IiwiSW50MzIiLCIkbnVtYmVySW50IiwiaW50XzMyIiwiX2NsYXNzQ2FsbENoZWNrJDYiLCJfZGVmaW5lUHJvcGVydGllcyQ2IiwiX2NyZWF0ZUNsYXNzJDYiLCJDb2RlIiwic2NvcGUiLCIkY29kZSIsIiRzY29wZSIsIkJ1ZmZlciQyIiwiUEFSU0VfU1RSSU5HX1JFR0VYUCIsIlBBUlNFX0lORl9SRUdFWFAiLCJQQVJTRV9OQU5fUkVHRVhQIiwiRVhQT05FTlRfTUFYIiwiRVhQT05FTlRfTUlOIiwiRVhQT05FTlRfQklBUyIsIk1BWF9ESUdJVFMiLCJOQU5fQlVGRkVSIiwicmV2ZXJzZSIsIklORl9ORUdBVElWRV9CVUZGRVIiLCJJTkZfUE9TSVRJVkVfQlVGRkVSIiwiRVhQT05FTlRfUkVHRVgiLCJpc0RpZ2l0IiwiZGl2aWRldTEyOCIsIkRJVklTT1IiLCJfcmVtIiwicGFydHMiLCJxdW90aWVudCIsIm11bHRpcGx5NjR4MiIsImxlZnQiLCJyaWdodCIsImxlZnRIaWdoIiwibGVmdExvdyIsInJpZ2h0SGlnaCIsInJpZ2h0TG93IiwicHJvZHVjdEhpZ2giLCJwcm9kdWN0TWlkIiwicHJvZHVjdE1pZDIiLCJwcm9kdWN0TG93IiwidWhsZWZ0IiwidWhyaWdodCIsImludmFsaWRFcnIiLCJEZWNpbWFsMTI4IiwiYmlhc2VkRXhwb25lbnQiLCJzYXdSYWRpeCIsImZvdW5kTm9uWmVybyIsInNpZ25pZmljYW50RGlnaXRzIiwibkRpZ2l0c1JlYWQiLCJuRGlnaXRzIiwicmFkaXhQb3NpdGlvbiIsImZpcnN0Tm9uWmVybyIsIm5EaWdpdHNTdG9yZWQiLCJkaWdpdHNJbnNlcnQiLCJmaXJzdERpZ2l0IiwibGFzdERpZ2l0IiwiZXhwb25lbnQiLCJzaWduaWZpY2FuZEhpZ2giLCJzaWduaWZpY2FuZExvdyIsInN0cmluZ01hdGNoIiwiaW5mTWF0Y2giLCJuYW5NYXRjaCIsInVuc2lnbmVkTnVtYmVyIiwiZXhwU2lnbiIsImV4cE51bWJlciIsImVuZE9mU3RyaW5nIiwicm91bmREaWdpdCIsInJvdW5kQml0IiwiZElkeCIsIl9kSWR4IiwiX2RJZHgyIiwic2lnbmlmaWNhbmQiLCJkZWMiLCJDT01CSU5BVElPTl9NQVNLIiwiRVhQT05FTlRfTUFTSyIsIkNPTUJJTkFUSU9OX0lORklOSVRZIiwiQ09NQklOQVRJT05fTkFOIiwibWlkaCIsIm1pZGwiLCJjb21iaW5hdGlvbiIsImJpYXNlZF9leHBvbmVudCIsInNpZ25pZmljYW5kX2RpZ2l0cyIsInNjaWVudGlmaWNfZXhwb25lbnQiLCJzaWduaWZpY2FuZF9tc2IiLCJpc196ZXJvIiwic2lnbmlmaWNhbmQxMjgiLCJsZWFzdF9kaWdpdHMiLCJyYWRpeF9wb3NpdGlvbiIsIl9pMyIsIl9pNCIsInRvSlNPTiIsIiRudW1iZXJEZWNpbWFsIiwiZGVjaW1hbDEyOCIsIl9jbGFzc0NhbGxDaGVjayQ3IiwiX2RlZmluZVByb3BlcnRpZXMkNyIsIl9jcmVhdGVDbGFzcyQ3IiwiTWluS2V5IiwiJG1pbktleSIsIm1pbl9rZXkiLCJfY2xhc3NDYWxsQ2hlY2skOCIsIl9kZWZpbmVQcm9wZXJ0aWVzJDgiLCJfY3JlYXRlQ2xhc3MkOCIsIk1heEtleSIsIiRtYXhLZXkiLCJtYXhfa2V5IiwiX2NsYXNzQ2FsbENoZWNrJDkiLCJfZGVmaW5lUHJvcGVydGllcyQ5IiwiX2NyZWF0ZUNsYXNzJDkiLCJEQlJlZiIsImNvbGxlY3Rpb24iLCJvaWQiLCJkYiIsImZpZWxkcyIsInNoaWZ0IiwiJHJlZiIsIiRpZCIsIiRkYiIsImRiX3JlZiIsIl9jbGFzc0NhbGxDaGVjayRhIiwiX2RlZmluZVByb3BlcnRpZXMkYSIsIl9jcmVhdGVDbGFzcyRhIiwiQnVmZmVyJDMiLCJCaW5hcnkiLCJzdWJUeXBlIiwic3ViX3R5cGUiLCJCU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQiLCJwb3NpdGlvbiIsImJ1ZmZlciIsIkJVRkZFUl9TSVpFIiwiQXJyYXlCdWZmZXIiLCJ3cml0ZVN0cmluZ1RvQXJyYXkiLCJieXRlX3ZhbHVlIiwiZGVjb2RlZF9ieXRlIiwiX2J1ZmZlciIsImlzVWludDhBcnJheSIsIndyaXRlIiwiYXNSYXciLCJuZXdCdWZmZXIiLCJjb252ZXJ0QXJyYXl0b1V0ZjhCaW5hcnlTdHJpbmciLCJiYXNlNjRTdHJpbmciLCIkYmluYXJ5IiwiYmFzZTY0IiwiZGF0YSIsImJ5dGVBcnJheSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImZyb21DaGFyQ29kZSIsIlNVQlRZUEVfREVGQVVMVCIsIlNVQlRZUEVfRlVOQ1RJT04iLCJTVUJUWVBFX0JZVEVfQVJSQVkiLCJTVUJUWVBFX1VVSURfT0xEIiwiU1VCVFlQRV9VVUlEIiwiU1VCVFlQRV9NRDUiLCJTVUJUWVBFX1VTRVJfREVGSU5FRCIsImJpbmFyeSIsImNvbnN0YW50cyIsIkJTT05fSU5UMzJfTUFYIiwiQlNPTl9JTlQzMl9NSU4iLCJCU09OX0lOVDY0X01BWCIsIkJTT05fSU5UNjRfTUlOIiwiSlNfSU5UX01BWCIsIkpTX0lOVF9NSU4iLCJCU09OX0RBVEFfTlVNQkVSIiwiQlNPTl9EQVRBX1NUUklORyIsIkJTT05fREFUQV9PQkpFQ1QiLCJCU09OX0RBVEFfQVJSQVkiLCJCU09OX0RBVEFfQklOQVJZIiwiQlNPTl9EQVRBX1VOREVGSU5FRCIsIkJTT05fREFUQV9PSUQiLCJCU09OX0RBVEFfQk9PTEVBTiIsIkJTT05fREFUQV9EQVRFIiwiQlNPTl9EQVRBX05VTEwiLCJCU09OX0RBVEFfUkVHRVhQIiwiQlNPTl9EQVRBX0RCUE9JTlRFUiIsIkJTT05fREFUQV9DT0RFIiwiQlNPTl9EQVRBX1NZTUJPTCIsIkJTT05fREFUQV9DT0RFX1dfU0NPUEUiLCJCU09OX0RBVEFfSU5UIiwiQlNPTl9EQVRBX1RJTUVTVEFNUCIsIkJTT05fREFUQV9MT05HIiwiQlNPTl9EQVRBX0RFQ0lNQUwxMjgiLCJCU09OX0RBVEFfTUlOX0tFWSIsIkJTT05fREFUQV9NQVhfS0VZIiwiQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTiIsIkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWSIsIkJTT05fQklOQVJZX1NVQlRZUEVfVVVJRCIsIkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1IiwiQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQiLCJfdHlwZW9mJDIiLCJrZXlzVG9Db2RlY3MiLCJkZXNlcmlhbGl6ZVZhbHVlIiwiJHVuZGVmaW5lZCIsImZpbHRlciIsInN0YXJ0c1dpdGgiLCIkZGF0ZSIsIiRkYlBvaW50ZXIiLCJkb2xsYXJLZXlzIiwic3RyaWN0IiwicmVwbGFjZXIiLCJzcGFjZSIsInNlcmlhbGl6ZUFycmF5Iiwic2VyaWFsaXplRG9jdW1lbnQiLCJzZXJpYWxpemUiLCJic29uIiwiZGVzZXJpYWxpemUiLCJlanNvbiIsInNlcmlhbGl6ZVZhbHVlIiwiZ2V0SVNPU3RyaW5nIiwiaXNvU3RyIiwidG9JU09TdHJpbmciLCJnZXRVVENNaWxsaXNlY29uZHMiLCJkYXRlTnVtIiwiaW5SYW5nZSIsImludDY0UmFuZ2UiLCJmbGFncyIsInNvdXJjZSIsIkJTT05fVFlQRV9NQVBQSU5HUyIsInN1YnR5cGUiLCJsb3dfIiwiaGlnaF8iLCJ1bnNpZ25lZF8iLCJic29udHlwZSIsIl9ic29udHlwZSIsIl9kb2MiLCJfZG9jMiIsIm1hcHBlciIsImV4dGVuZGVkX2pzb24iLCJGSVJTVF9CSVQiLCJGSVJTVF9UV09fQklUUyIsIkZJUlNUX1RIUkVFX0JJVFMiLCJGSVJTVF9GT1VSX0JJVFMiLCJGSVJTVF9GSVZFX0JJVFMiLCJUV09fQklUX0NIQVIiLCJUSFJFRV9CSVRfQ0hBUiIsIkZPVVJfQklUX0NIQVIiLCJDT05USU5VSU5HX0NIQVIiLCJ2YWxpZGF0ZVV0ZjgiLCJlbmQiLCJjb250aW51YXRpb24iLCJieXRlIiwidmFsaWRhdGVVdGY4XzEiLCJ2YWxpZGF0ZV91dGY4IiwiQnVmZmVyJDQiLCJ2YWxpZGF0ZVV0ZjgkMSIsIkpTX0lOVF9NQVhfTE9ORyIsIkpTX0lOVF9NSU5fTE9ORyIsImZ1bmN0aW9uQ2FjaGUiLCJkZXNlcmlhbGl6ZSQxIiwiYWxsb3dPYmplY3RTbWFsbGVyVGhhbkJ1ZmZlclNpemUiLCJieXRlTGVuZ3RoIiwiZGVzZXJpYWxpemVPYmplY3QiLCJldmFsRnVuY3Rpb25zIiwiY2FjaGVGdW5jdGlvbnMiLCJjYWNoZUZ1bmN0aW9uc0NyYzMyIiwiY3JjMzIiLCJmaWVsZHNBc1JhdyIsInJhdyIsImJzb25SZWdFeHAiLCJwcm9tb3RlQnVmZmVycyIsInByb21vdGVMb25ncyIsInByb21vdGVWYWx1ZXMiLCJhcnJheUluZGV4IiwiZWxlbWVudFR5cGUiLCJzdHJpbmdTaXplIiwicmVhZERvdWJsZUxFIiwiX2luZGV4Iiwib2JqZWN0U2l6ZSIsIl9pbmRleDIiLCJfb2JqZWN0U2l6ZSIsImFycmF5T3B0aW9ucyIsInN0b3BJbmRleCIsIl9sb3dCaXRzIiwiX2hpZ2hCaXRzIiwibG9uZyQkMSIsImRlY2ltYWwxMjgkJDEiLCJ0b09iamVjdCIsImJpbmFyeVNpemUiLCJ0b3RhbEJpbmFyeVNpemUiLCJyZWdFeHBPcHRpb25zIiwib3B0aW9uc0FycmF5IiwiX3NvdXJjZSIsIl9yZWdFeHBPcHRpb25zIiwiX3N0cmluZ1NpemUiLCJfbG93Qml0czIiLCJfaGlnaEJpdHMyIiwiX3N0cmluZ1NpemUyIiwiZnVuY3Rpb25TdHJpbmciLCJpc29sYXRlRXZhbFdpdGhIYXNoIiwiaXNvbGF0ZUV2YWwiLCJ0b3RhbFNpemUiLCJfc3RyaW5nU2l6ZTMiLCJfZnVuY3Rpb25TdHJpbmciLCJfaW5kZXgzIiwiX29iamVjdFNpemUyIiwic2NvcGVPYmplY3QiLCJfaGFzaCIsIl9zdHJpbmdTaXplNCIsIm9pZEJ1ZmZlciIsIl9vaWQiLCJldmFsIiwiZGVzZXJpYWxpemVyIiwicmVhZElFRUU3NTQiLCJlbmRpYW4iLCJtTGVuIiwibkJ5dGVzIiwiYkJFIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwiSW5maW5pdHkiLCJ3cml0ZUlFRUU3NTQiLCJydCIsImFicyIsImZsb2F0X3BhcnNlciIsIl90eXBlb2YkMyIsIkJ1ZmZlciQ1Iiwid3JpdGVJRUVFNzU0JDEiLCJub3JtYWxpemVkRnVuY3Rpb25TdHJpbmckMSIsInJlZ2V4cCQxIiwiaWdub3JlS2V5cyIsIlNldCIsImlzRGF0ZSQxIiwiaXNSZWdFeHAkMSIsInNlcmlhbGl6ZVN0cmluZyIsIm51bWJlck9mV3JpdHRlbkJ5dGVzIiwic2VyaWFsaXplTnVtYmVyIiwibG9uZ1ZhbCIsInNlcmlhbGl6ZU51bGwiLCJzZXJpYWxpemVCb29sZWFuIiwic2VyaWFsaXplRGF0ZSIsImRhdGVJbk1pbGlzIiwic2VyaWFsaXplUmVnRXhwIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInNlcmlhbGl6ZUJTT05SZWdFeHAiLCJzZXJpYWxpemVNaW5NYXgiLCJzZXJpYWxpemVPYmplY3RJZCIsInNlcmlhbGl6ZUJ1ZmZlciIsInNlcmlhbGl6ZU9iamVjdCIsImNoZWNrS2V5cyIsInNlcmlhbGl6ZUZ1bmN0aW9ucyIsImlnbm9yZVVuZGVmaW5lZCIsInBhdGgiLCJzZXJpYWxpemVJbnRvIiwic2VyaWFsaXplRGVjaW1hbDEyOCIsInNlcmlhbGl6ZUxvbmciLCJzZXJpYWxpemVJbnQzMiIsInNlcmlhbGl6ZURvdWJsZSIsInNlcmlhbGl6ZUZ1bmN0aW9uIiwic2VyaWFsaXplQ29kZSIsImNvZGVTaXplIiwic2VyaWFsaXplQmluYXJ5Iiwic2VyaWFsaXplU3ltYm9sIiwic2VyaWFsaXplREJSZWYiLCJzdGFydGluZ0luZGV4IiwidG9CU09OIiwiX2tleSIsIl92YWx1ZSIsIl90eXBlIiwiX2tleTIiLCJfdmFsdWUyIiwiX3R5cGUyIiwic2VyaWFsaXplciIsIl90eXBlb2YkNCIsIkJ1ZmZlciQ2Iiwibm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nJDIiLCJpc0RhdGUkMiIsImNhbGN1bGF0ZU9iamVjdFNpemUiLCJ0b3RhbExlbmd0aCIsImNhbGN1bGF0ZUVsZW1lbnQiLCJvcmRlcmVkX3ZhbHVlcyIsImNhbGN1bGF0ZV9zaXplIiwiQnVmZmVyJDciLCJlbnN1cmVfYnVmZmVyIiwicG90ZW50aWFsQnVmZmVyIiwiQnVmZmVyJDgiLCJNQVhTSVpFIiwiYnVmZmVyJDEiLCJzZXRJbnRlcm5hbEJ1ZmZlclNpemUiLCJzZXJpYWxpemUkMSIsIm1pbkludGVybmFsQnVmZmVyU2l6ZSIsInNlcmlhbGl6YXRpb25JbmRleCIsImZpbmlzaGVkQnVmZmVyIiwic2VyaWFsaXplV2l0aEJ1ZmZlckFuZEluZGV4IiwiZmluYWxCdWZmZXIiLCJkZXNlcmlhbGl6ZSQyIiwiY2FsY3VsYXRlT2JqZWN0U2l6ZSQxIiwiZGVzZXJpYWxpemVTdHJlYW0iLCJudW1iZXJPZkRvY3VtZW50cyIsImRvY3VtZW50cyIsImRvY1N0YXJ0SW5kZXgiLCJFSlNPTiIsInNsZWVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJxdWVyeXN0cmluZyIsImV4dHJhY3RDcmVkZW50aWFsIiwibWFrZUVuY3J5cHRlZFF1ZXJ5IiwidG9rZW4iLCJxdWVyeSIsIm1peCIsImVuY3J5cHRlZFF1ZXJ5IiwiY3JlZGVudGlhbCIsImV4cGlyZSIsImN1cnJlbnQiLCJleHRyYWN0UXVlcnkiXSwibWFwcGluZ3MiOiIyQkFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBMERBLE9BckRBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBMkIsT0FBQXJCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUFzRCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHdEQvQixFQUFBa0MsRUFBQSxHQUlBbEMsSUFBQW1DLEVBQUEsbUJDbEZBaEMsRUFBQUQsUUFBQWtDLFFBQUEseUJDQUFqQyxFQUFBRCxRQUFBbUMsRUFLQSxJQUFBQyxFQUFBLEtBRUEsSUFDQUEsRUFBQSxJQUFBQyxZQUFBQyxTQUFBLElBQUFELFlBQUFFLE9BQUEsSUFBQUMsV0FBQSxDQUNBLG0yQkFDQSxJQUFTeEMsUUFDUixNQUFBeUMsSUFjRCxTQUFBTixFQUFBTyxFQUFBQyxFQUFBQyxHQU1BQyxLQUFBSCxJQUFBLEVBQUFBLEVBTUFHLEtBQUFGLEtBQUEsRUFBQUEsRUFNQUUsS0FBQUQsYUFvQ0EsU0FBQUUsRUFBQUMsR0FDQSxZQUFBQSxLQUFBLFlBWEFaLEVBQUFMLFVBQUFrQixXQUVBcEMsT0FBQUMsZUFBQXNCLEVBQUFMLFVBQUEsY0FBcURYLE9BQUEsSUFrQnJEZ0IsRUFBQVcsU0FPQSxJQUFBRyxFQUFBLEdBT0FDLEVBQUEsR0FRQSxTQUFBQyxFQUFBaEMsRUFBQXlCLEdBQ0EsSUFBQUcsRUFBQUssRUFBQUMsRUFDQSxPQUFBVCxHQUVBUyxFQUFBLElBREFsQyxLQUFBLElBQ0FBLEVBQUEsT0FDQWlDLEVBQUFGLEVBQUEvQixJQUVBaUMsR0FFQUwsRUFBQU8sRUFBQW5DLEdBQUEsRUFBQUEsR0FBQSxXQUNBa0MsSUFDQUgsRUFBQS9CLEdBQUE0QixHQUNBQSxJQUdBTSxHQUFBLE1BREFsQyxHQUFBLElBQ0FBLEVBQUEsT0FDQWlDLEVBQUFILEVBQUE5QixJQUVBaUMsR0FFQUwsRUFBQU8sRUFBQW5DLElBQUEsV0FDQWtDLElBQ0FKLEVBQUE5QixHQUFBNEIsR0FDQUEsR0FtQkEsU0FBQVEsRUFBQXBDLEVBQUF5QixHQUNBLEdBQUFZLE1BQUFyQyxHQUNBLE9BQUF5QixFQUFBYSxFQUFBQyxFQUNBLEdBQUFkLEVBQUEsQ0FDQSxHQUFBekIsRUFBQSxFQUNBLE9BQUFzQyxFQUNBLEdBQUF0QyxHQUFBd0MsRUFDQSxPQUFBQyxNQUNLLENBQ0wsR0FBQXpDLElBQUEwQyxFQUNBLE9BQUFDLEVBQ0EsR0FBQTNDLEVBQUEsR0FBQTBDLEVBQ0EsT0FBQUUsRUFFQSxPQUFBNUMsRUFBQSxFQUNBb0MsR0FBQXBDLEVBQUF5QixHQUFBb0IsTUFDQVYsRUFBQW5DLEVBQUE4QyxFQUFBLEVBQUE5QyxFQUFBOEMsRUFBQSxFQUFBckIsR0FtQkEsU0FBQVUsRUFBQVksRUFBQUMsRUFBQXZCLEdBQ0EsV0FBQVQsRUFBQStCLEVBQUFDLEVBQUF2QixHQTVDQVQsRUFBQWdCLFVBa0NBaEIsRUFBQW9CLGFBc0JBcEIsRUFBQW1CLFdBU0EsSUFBQWMsRUFBQUMsS0FBQUMsSUFTQSxTQUFBQyxFQUFBQyxFQUFBNUIsRUFBQTZCLEdBQ0EsT0FBQUQsRUFBQUUsT0FDQSxNQUFBQyxNQUFBLGdCQUNBLFdBQUFILEdBQUEsYUFBQUEsR0FBQSxjQUFBQSxHQUFBLGNBQUFBLEVBQ0EsT0FBQWQsRUFTQSxHQVJBLGlCQUFBZCxHQUVBNkIsRUFBQTdCLEVBQ0FBLEdBQUEsR0FFQUEsT0FFQTZCLEtBQUEsSUFDQSxNQUFBQSxFQUNBLE1BQUFHLFdBQUEsU0FFQSxJQUFBNUMsRUFDQSxJQUFBQSxFQUFBd0MsRUFBQUssUUFBQSxRQUNBLE1BQUFGLE1BQUEsbUJBQ0EsT0FBQTNDLEVBQ0EsT0FBQXVDLEVBQUFDLEVBQUFNLFVBQUEsR0FBQWxDLEVBQUE2QixHQUFBVCxNQVFBLElBSEEsSUFBQWUsRUFBQXhCLEVBQUFhLEVBQUFLLEVBQUEsSUFFQU8sRUFBQXRCLEVBQ0F4RCxFQUFBLEVBQW1CQSxFQUFBc0UsRUFBQUUsT0FBZ0J4RSxHQUFBLEdBQ25DLElBQUErRSxFQUFBWixLQUFBYSxJQUFBLEVBQUFWLEVBQUFFLE9BQUF4RSxHQUNBaUIsRUFBQWdFLFNBQUFYLEVBQUFNLFVBQUE1RSxJQUFBK0UsR0FBQVIsR0FDQSxHQUFBUSxFQUFBLEdBQ0EsSUFBQUcsRUFBQTdCLEVBQUFhLEVBQUFLLEVBQUFRLElBQ0FELElBQUFLLElBQUFELEdBQUFFLElBQUEvQixFQUFBcEMsU0FHQTZELEdBREFBLElBQUFLLElBQUFOLElBQ0FPLElBQUEvQixFQUFBcEMsSUFJQSxPQURBNkQsRUFBQXBDLFdBQ0FvQyxFQW9CQSxTQUFBTyxFQUFBQyxFQUFBNUMsR0FDQSx1QkFBQTRDLEVBQ0FqQyxFQUFBaUMsRUFBQTVDLEdBQ0EsaUJBQUE0QyxFQUNBakIsRUFBQWlCLEVBQUE1QyxHQUVBVSxFQUFBa0MsRUFBQTlDLElBQUE4QyxFQUFBN0MsS0FBQSxrQkFBQUMsSUFBQTRDLEVBQUE1QyxVQWZBVCxFQUFBb0MsYUF5QkFwQyxFQUFBb0QsWUFVQSxJQWNBdEIsRUFBQXdCLFdBT0E5QixFQUFBTSxJQU9BSixFQUFBRixFQUFBLEVBT0ErQixFQUFBdkMsRUE1QkEsT0FrQ0FPLEVBQUFQLEVBQUEsR0FNQWhCLEVBQUF1QixPQU1BLElBQUFELEVBQUFOLEVBQUEsTUFNQWhCLEVBQUFzQixRQU1BLElBQUFrQyxFQUFBeEMsRUFBQSxHQU1BaEIsRUFBQXdELE1BTUEsSUFBQUMsRUFBQXpDLEVBQUEsTUFNQWhCLEVBQUF5RCxPQU1BLElBQUFDLEVBQUExQyxHQUFBLEdBTUFoQixFQUFBMEQsVUFNQSxJQUFBOUIsRUFBQVQsR0FBQSxpQkFNQW5CLEVBQUE0QixZQU1BLElBQUFILEVBQUFOLEdBQUEsU0FNQW5CLEVBQUF5QixxQkFNQSxJQUFBRSxFQUFBUixFQUFBLGtCQU1BbkIsRUFBQTJCLFlBTUEsSUFBQWdDLEVBQUEzRCxFQUFBTCxVQU1BZ0UsRUFBQUMsTUFBQSxXQUNBLE9BQUFsRCxLQUFBRCxTQUFBQyxLQUFBSCxNQUFBLEVBQUFHLEtBQUFILEtBT0FvRCxFQUFBRSxTQUFBLFdBQ0EsT0FBQW5ELEtBQUFELFVBQ0FDLEtBQUFGLE9BQUEsR0FBQXNCLEdBQUFwQixLQUFBSCxNQUFBLEdBQ0FHLEtBQUFGLEtBQUFzQixHQUFBcEIsS0FBQUgsTUFBQSxJQVVBb0QsRUFBQUcsU0FBQSxTQUFBeEIsR0FFQSxJQURBQSxLQUFBLElBQ0EsTUFBQUEsRUFDQSxNQUFBRyxXQUFBLFNBQ0EsR0FBQS9CLEtBQUFxRCxTQUNBLFVBQ0EsR0FBQXJELEtBQUFzRCxhQUFBLENBQ0EsR0FBQXRELEtBQUF1RCxHQUFBdEMsR0FBQSxDQUdBLElBQUF1QyxFQUFBOUMsRUFBQWtCLEdBQ0E2QixFQUFBekQsS0FBQXlELElBQUFELEdBQ0FFLEVBQUFELEVBQUFqQixJQUFBZ0IsR0FBQUcsSUFBQTNELE1BQ0EsT0FBQXlELEVBQUFMLFNBQUF4QixHQUFBOEIsRUFBQVIsUUFBQUUsU0FBQXhCLEdBRUEsVUFBQTVCLEtBQUFtQixNQUFBaUMsU0FBQXhCLEdBUUEsSUFIQSxJQUFBTSxFQUFBeEIsRUFBQWEsRUFBQUssRUFBQSxHQUFBNUIsS0FBQUQsVUFDQTZELEVBQUE1RCxLQUNBbUMsRUFBQSxLQUNBLENBQ0EsSUFBQTBCLEVBQUFELEVBQUFILElBQUF2QixHQUVBNEIsR0FEQUYsRUFBQUQsSUFBQUUsRUFBQXJCLElBQUFOLElBQUFnQixVQUFBLEdBQ0FFLFNBQUF4QixHQUVBLElBREFnQyxFQUFBQyxHQUNBUixTQUNBLE9BQUFTLEVBQUEzQixFQUVBLEtBQUEyQixFQUFBakMsT0FBQSxHQUNBaUMsRUFBQSxJQUFBQSxFQUNBM0IsRUFBQSxHQUFBMkIsRUFBQTNCLElBU0FjLEVBQUFjLFlBQUEsV0FDQSxPQUFBL0QsS0FBQUYsTUFPQW1ELEVBQUFlLG9CQUFBLFdBQ0EsT0FBQWhFLEtBQUFGLE9BQUEsR0FPQW1ELEVBQUFnQixXQUFBLFdBQ0EsT0FBQWpFLEtBQUFILEtBT0FvRCxFQUFBaUIsbUJBQUEsV0FDQSxPQUFBbEUsS0FBQUgsTUFBQSxHQU9Bb0QsRUFBQWtCLGNBQUEsV0FDQSxHQUFBbkUsS0FBQXNELGFBQ0EsT0FBQXRELEtBQUF1RCxHQUFBdEMsR0FBQSxHQUFBakIsS0FBQW1CLE1BQUFnRCxnQkFFQSxJQURBLElBQUF4QixFQUFBLEdBQUEzQyxLQUFBRixLQUFBRSxLQUFBRixLQUFBRSxLQUFBSCxJQUNBdUUsRUFBQSxHQUFzQkEsRUFBQSxHQUN0QixJQUFBekIsRUFBQSxHQUFBeUIsR0FEK0JBLEtBRy9CLFVBQUFwRSxLQUFBRixLQUFBc0UsRUFBQSxHQUFBQSxFQUFBLEdBT0FuQixFQUFBSSxPQUFBLFdBQ0EsV0FBQXJELEtBQUFGLE1BQUEsSUFBQUUsS0FBQUgsS0FPQW9ELEVBQUFvQixJQUFBcEIsRUFBQUksT0FNQUosRUFBQUssV0FBQSxXQUNBLE9BQUF0RCxLQUFBRCxVQUFBQyxLQUFBRixLQUFBLEdBT0FtRCxFQUFBcUIsV0FBQSxXQUNBLE9BQUF0RSxLQUFBRCxVQUFBQyxLQUFBRixNQUFBLEdBT0FtRCxFQUFBc0IsTUFBQSxXQUNBLGFBQUF2RSxLQUFBSCxNQU9Bb0QsRUFBQXVCLE9BQUEsV0FDQSxhQUFBeEUsS0FBQUgsTUFRQW9ELEVBQUF3QixPQUFBLFNBQUFDLEdBR0EsT0FGQXpFLEVBQUF5RSxLQUNBQSxFQUFBaEMsRUFBQWdDLEtBQ0ExRSxLQUFBRCxXQUFBMkUsRUFBQTNFLFVBQUFDLEtBQUFGLE9BQUEsT0FBQTRFLEVBQUE1RSxPQUFBLFNBRUFFLEtBQUFGLE9BQUE0RSxFQUFBNUUsTUFBQUUsS0FBQUgsTUFBQTZFLEVBQUE3RSxNQVNBb0QsRUFBQU0sR0FBQU4sRUFBQXdCLE9BT0F4QixFQUFBMEIsVUFBQSxTQUFBRCxHQUNBLE9BQUExRSxLQUFBdUQsR0FBQW1CLElBU0F6QixFQUFBMkIsSUFBQTNCLEVBQUEwQixVQVFBMUIsRUFBQTRCLEdBQUE1QixFQUFBMEIsVUFPQTFCLEVBQUE2QixTQUFBLFNBQUFKLEdBQ0EsT0FBQTFFLEtBQUErRSxLQUFBTCxHQUFBLEdBU0F6QixFQUFBK0IsR0FBQS9CLEVBQUE2QixTQU9BN0IsRUFBQWdDLGdCQUFBLFNBQUFQLEdBQ0EsT0FBQTFFLEtBQUErRSxLQUFBTCxJQUFBLEdBU0F6QixFQUFBaUMsSUFBQWpDLEVBQUFnQyxnQkFRQWhDLEVBQUFrQyxHQUFBbEMsRUFBQWdDLGdCQU9BaEMsRUFBQW1DLFlBQUEsU0FBQVYsR0FDQSxPQUFBMUUsS0FBQStFLEtBQUFMLEdBQUEsR0FTQXpCLEVBQUFvQyxHQUFBcEMsRUFBQW1DLFlBT0FuQyxFQUFBcUMsbUJBQUEsU0FBQVosR0FDQSxPQUFBMUUsS0FBQStFLEtBQUFMLElBQUEsR0FTQXpCLEVBQUFzQyxJQUFBdEMsRUFBQXFDLG1CQVFBckMsRUFBQXVDLEdBQUF2QyxFQUFBcUMsbUJBUUFyQyxFQUFBd0MsUUFBQSxTQUFBZixHQUdBLEdBRkF6RSxFQUFBeUUsS0FDQUEsRUFBQWhDLEVBQUFnQyxJQUNBMUUsS0FBQXVELEdBQUFtQixHQUNBLFNBQ0EsSUFBQWdCLEVBQUExRixLQUFBc0QsYUFDQXFDLEVBQUFqQixFQUFBcEIsYUFDQSxPQUFBb0MsSUFBQUMsR0FDQSxHQUNBRCxHQUFBQyxFQUNBLEVBRUEzRixLQUFBRCxTQUdBMkUsRUFBQTVFLE9BQUEsRUFBQUUsS0FBQUYsT0FBQSxHQUFBNEUsRUFBQTVFLE9BQUFFLEtBQUFGLE1BQUE0RSxFQUFBN0UsTUFBQSxFQUFBRyxLQUFBSCxNQUFBLE9BRkFHLEtBQUEyRCxJQUFBZSxHQUFBcEIsY0FBQSxLQVlBTCxFQUFBOEIsS0FBQTlCLEVBQUF3QyxRQU1BeEMsRUFBQTJDLE9BQUEsV0FDQSxPQUFBNUYsS0FBQUQsVUFBQUMsS0FBQXVELEdBQUF0QyxHQUNBQSxFQUNBakIsS0FBQTZGLE1BQUFwRCxJQUFBSyxJQVFBRyxFQUFBOUIsSUFBQThCLEVBQUEyQyxPQU9BM0MsRUFBQVIsSUFBQSxTQUFBcUQsR0FDQTdGLEVBQUE2RixLQUNBQSxFQUFBcEQsRUFBQW9ELElBSUEsSUFBQUMsRUFBQS9GLEtBQUFGLE9BQUEsR0FDQWtHLEVBQUEsTUFBQWhHLEtBQUFGLEtBQ0FtRyxFQUFBakcsS0FBQUgsTUFBQSxHQUNBcUcsRUFBQSxNQUFBbEcsS0FBQUgsSUFFQXNHLEVBQUFMLEVBQUFoRyxPQUFBLEdBQ0FzRyxFQUFBLE1BQUFOLEVBQUFoRyxLQUNBdUcsRUFBQVAsRUFBQWpHLE1BQUEsR0FHQXlHLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFZQSxPQVZBRCxJQURBQyxHQUFBUCxHQUhBLE1BQUFKLEVBQUFqRyxRQUlBLEdBR0EwRyxJQURBQyxHQUFBUCxFQUFBSSxLQUNBLEdBR0FDLElBREFDLEdBQUFQLEVBQUFJLEtBQ0EsR0FFQUUsR0FBQVAsRUFBQUksRUFFQTFGLEdBTkErRixHQUFBLFFBTUEsSUFUQUMsR0FBQSxRQVFBSCxHQUFBLFFBQ0EsSUFIQUMsR0FBQSxPQUdBdkcsS0FBQUQsV0FRQWtELEVBQUF5RCxTQUFBLFNBQUFDLEdBR0EsT0FGQTFHLEVBQUEwRyxLQUNBQSxFQUFBakUsRUFBQWlFLElBQ0EzRyxLQUFBeUMsSUFBQWtFLEVBQUF4RixRQVNBOEIsRUFBQVUsSUFBQVYsRUFBQXlELFNBT0F6RCxFQUFBMkQsU0FBQSxTQUFBQyxHQUNBLEdBQUE3RyxLQUFBcUQsU0FDQSxPQUFBeEMsRUFLQSxHQUpBWixFQUFBNEcsS0FDQUEsRUFBQW5FLEVBQUFtRSxJQUdBdEgsRUFLQSxPQUFBa0IsRUFKQWxCLEVBQUFpRCxJQUFBeEMsS0FBQUgsSUFDQUcsS0FBQUYsS0FDQStHLEVBQUFoSCxJQUNBZ0gsRUFBQS9HLE1BQ0FQLEVBQUF1SCxXQUFBOUcsS0FBQUQsVUFHQSxHQUFBOEcsRUFBQXhELFNBQ0EsT0FBQXhDLEVBQ0EsR0FBQWIsS0FBQXVELEdBQUF0QyxHQUNBLE9BQUE0RixFQUFBdEMsUUFBQXRELEVBQUFKLEVBQ0EsR0FBQWdHLEVBQUF0RCxHQUFBdEMsR0FDQSxPQUFBakIsS0FBQXVFLFFBQUF0RCxFQUFBSixFQUVBLEdBQUFiLEtBQUFzRCxhQUNBLE9BQUF1RCxFQUFBdkQsYUFDQXRELEtBQUFtQixNQUFBcUIsSUFBQXFFLEVBQUExRixPQUVBbkIsS0FBQW1CLE1BQUFxQixJQUFBcUUsR0FBQTFGLE1BQ0ssR0FBQTBGLEVBQUF2RCxhQUNMLE9BQUF0RCxLQUFBd0MsSUFBQXFFLEVBQUExRixhQUdBLEdBQUFuQixLQUFBZ0YsR0FBQW5DLElBQUFnRSxFQUFBN0IsR0FBQW5DLEdBQ0EsT0FBQW5DLEVBQUFWLEtBQUFtRCxXQUFBMEQsRUFBQTFELFdBQUFuRCxLQUFBRCxVQUtBLElBQUFnRyxFQUFBL0YsS0FBQUYsT0FBQSxHQUNBa0csRUFBQSxNQUFBaEcsS0FBQUYsS0FDQW1HLEVBQUFqRyxLQUFBSCxNQUFBLEdBQ0FxRyxFQUFBLE1BQUFsRyxLQUFBSCxJQUVBc0csRUFBQVUsRUFBQS9HLE9BQUEsR0FDQXNHLEVBQUEsTUFBQVMsRUFBQS9HLEtBQ0F1RyxFQUFBUSxFQUFBaEgsTUFBQSxHQUNBa0gsRUFBQSxNQUFBRixFQUFBaEgsSUFFQXlHLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFxQkEsT0FuQkFELElBREFDLEdBQUFQLEVBQUFhLEtBQ0EsR0FHQVIsSUFEQUMsR0FBQVAsRUFBQWMsS0FDQSxHQUNBUCxHQUFBLE1BRUFELElBREFDLEdBQUFOLEVBQUFHLEtBQ0EsR0FHQUMsSUFEQUMsR0FBQVAsRUFBQWUsS0FDQSxHQUNBUixHQUFBLE1BRUFELElBREFDLEdBQUFOLEVBQUFJLEtBQ0EsR0FDQUUsR0FBQSxNQUVBRCxJQURBQyxHQUFBTCxFQUFBRSxLQUNBLEdBRUFFLEdBQUFQLEVBQUFnQixFQUFBZixFQUFBSyxFQUFBSixFQUFBRyxFQUFBRixFQUFBQyxFQUVBMUYsR0FaQStGLEdBQUEsUUFZQSxJQWxCQUMsR0FBQSxRQWlCQUgsR0FBQSxRQUNBLElBSEFDLEdBQUEsT0FHQXZHLEtBQUFELFdBU0FrRCxFQUFBVCxJQUFBUyxFQUFBMkQsU0FRQTNELEVBQUErRCxPQUFBLFNBQUFDLEdBR0EsR0FGQWhILEVBQUFnSCxLQUNBQSxFQUFBdkUsRUFBQXVFLElBQ0FBLEVBQUE1RCxTQUNBLE1BQUF2QixNQUFBLG9CQWFBLElBV0FvRixFQUFBdEQsRUFBQXVELEVBckJBLEdBQUE1SCxFQUlBLE9BQUFTLEtBQUFELFdBQ0EsYUFBQUMsS0FBQUYsT0FDQSxJQUFBbUgsRUFBQXBILE1BQUEsSUFBQW9ILEVBQUFuSCxLQVVBVyxHQU5BVCxLQUFBRCxTQUFBUixFQUFBNkgsTUFBQTdILEVBQUE4SCxPQUNBckgsS0FBQUgsSUFDQUcsS0FBQUYsS0FDQW1ILEVBQUFwSCxJQUNBb0gsRUFBQW5ILE1BRUFQLEVBQUF1SCxXQUFBOUcsS0FBQUQsVUFSQUMsS0FXQSxHQUFBQSxLQUFBcUQsU0FDQSxPQUFBckQsS0FBQUQsU0FBQWEsRUFBQUMsRUFFQSxHQUFBYixLQUFBRCxTQTZCSyxDQUtMLEdBRkFrSCxFQUFBbEgsV0FDQWtILElBQUFLLGNBQ0FMLEVBQUE1QixHQUFBckYsTUFDQSxPQUFBWSxFQUNBLEdBQUFxRyxFQUFBNUIsR0FBQXJGLEtBQUF1SCxLQUFBLElBQ0EsT0FBQXhFLEVBQ0FvRSxFQUFBdkcsTUF0Q0EsQ0FHQSxHQUFBWixLQUFBdUQsR0FBQXRDLEdBQ0EsT0FBQWdHLEVBQUExRCxHQUFBVCxJQUFBbUUsRUFBQTFELEdBQUFQLEdBQ0EvQixFQUNBZ0csRUFBQTFELEdBQUF0QyxHQUNBNkIsR0FJQW9FLEVBREFsSCxLQUFBd0gsSUFBQSxHQUNBL0QsSUFBQXdELEdBQUFRLElBQUEsSUFDQWxFLEdBQUExQyxHQUNBb0csRUFBQTNELGFBQUFSLEVBQUFFLEdBRUFZLEVBQUE1RCxLQUFBMkQsSUFBQXNELEVBQUF6RSxJQUFBMEUsSUFDQUMsRUFBQUQsRUFBQXpFLElBQUFtQixFQUFBSCxJQUFBd0QsS0FJUyxHQUFBQSxFQUFBMUQsR0FBQXRDLEdBQ1QsT0FBQWpCLEtBQUFELFNBQUFhLEVBQUFDLEVBQ0EsR0FBQWIsS0FBQXNELGFBQ0EsT0FBQTJELEVBQUEzRCxhQUNBdEQsS0FBQW1CLE1BQUFzQyxJQUFBd0QsRUFBQTlGLE9BQ0FuQixLQUFBbUIsTUFBQXNDLElBQUF3RCxHQUFBOUYsTUFDUyxHQUFBOEYsRUFBQTNELGFBQ1QsT0FBQXRELEtBQUF5RCxJQUFBd0QsRUFBQTlGLGFBQ0FnRyxFQUFBdEcsRUFtQkEsSUFEQStDLEVBQUE1RCxLQUNBNEQsRUFBQTJCLElBQUEwQixJQUFBLENBR0FDLEVBQUExRixLQUFBa0csSUFBQSxFQUFBbEcsS0FBQW1HLE1BQUEvRCxFQUFBVCxXQUFBOEQsRUFBQTlELGFBV0EsSUFQQSxJQUFBeUUsRUFBQXBHLEtBQUFxRyxLQUFBckcsS0FBQXNHLElBQUFaLEdBQUExRixLQUFBdUcsS0FDQUMsRUFBQUosR0FBQSxLQUFBckcsRUFBQSxFQUFBcUcsRUFBQSxJQUlBSyxFQUFBdkgsRUFBQXdHLEdBQ0FnQixFQUFBRCxFQUFBekYsSUFBQXlFLEdBQ0FpQixFQUFBNUUsY0FBQTRFLEVBQUE3QyxHQUFBekIsSUFHQXNFLEdBREFELEVBQUF2SCxFQURBd0csR0FBQWMsRUFDQWhJLEtBQUFELFdBQ0F5QyxJQUFBeUUsR0FLQWdCLEVBQUE1RSxXQUNBNEUsRUFBQW5GLEdBRUFxRSxJQUFBMUUsSUFBQXdGLEdBQ0FyRSxJQUFBRCxJQUFBdUUsR0FFQSxPQUFBZixHQVNBbEUsRUFBQVEsSUFBQVIsRUFBQStELE9BT0EvRCxFQUFBa0YsT0FBQSxTQUFBbEIsR0FLQSxPQUpBaEgsRUFBQWdILEtBQ0FBLEVBQUF2RSxFQUFBdUUsSUFHQTFILEVBT0FrQixHQU5BVCxLQUFBRCxTQUFBUixFQUFBNkksTUFBQTdJLEVBQUE4SSxPQUNBckksS0FBQUgsSUFDQUcsS0FBQUYsS0FDQW1ILEVBQUFwSCxJQUNBb0gsRUFBQW5ILE1BRUFQLEVBQUF1SCxXQUFBOUcsS0FBQUQsVUFHQUMsS0FBQTJELElBQUEzRCxLQUFBeUQsSUFBQXdELEdBQUF6RSxJQUFBeUUsS0FTQWhFLEVBQUFxRixJQUFBckYsRUFBQWtGLE9BUUFsRixFQUFBVyxJQUFBWCxFQUFBa0YsT0FNQWxGLEVBQUE0QyxJQUFBLFdBQ0EsT0FBQXBGLEdBQUFULEtBQUFILEtBQUFHLEtBQUFGLEtBQUFFLEtBQUFELFdBUUFrRCxFQUFBc0YsSUFBQSxTQUFBN0QsR0FHQSxPQUZBekUsRUFBQXlFLEtBQ0FBLEVBQUFoQyxFQUFBZ0MsSUFDQWpFLEVBQUFULEtBQUFILElBQUE2RSxFQUFBN0UsSUFBQUcsS0FBQUYsS0FBQTRFLEVBQUE1RSxLQUFBRSxLQUFBRCxXQVFBa0QsRUFBQXVGLEdBQUEsU0FBQTlELEdBR0EsT0FGQXpFLEVBQUF5RSxLQUNBQSxFQUFBaEMsRUFBQWdDLElBQ0FqRSxFQUFBVCxLQUFBSCxJQUFBNkUsRUFBQTdFLElBQUFHLEtBQUFGLEtBQUE0RSxFQUFBNUUsS0FBQUUsS0FBQUQsV0FRQWtELEVBQUF3RixJQUFBLFNBQUEvRCxHQUdBLE9BRkF6RSxFQUFBeUUsS0FDQUEsRUFBQWhDLEVBQUFnQyxJQUNBakUsRUFBQVQsS0FBQUgsSUFBQTZFLEVBQUE3RSxJQUFBRyxLQUFBRixLQUFBNEUsRUFBQTVFLEtBQUFFLEtBQUFELFdBUUFrRCxFQUFBeUYsVUFBQSxTQUFBQyxHQUdBLE9BRkExSSxFQUFBMEksS0FDQUEsSUFBQXpGLFNBQ0EsSUFBQXlGLEdBQUEsSUFDQTNJLEtBQ0EySSxFQUFBLEdBQ0FsSSxFQUFBVCxLQUFBSCxLQUFBOEksRUFBQTNJLEtBQUFGLE1BQUE2SSxFQUFBM0ksS0FBQUgsTUFBQSxHQUFBOEksRUFBQTNJLEtBQUFELFVBRUFVLEVBQUEsRUFBQVQsS0FBQUgsS0FBQThJLEVBQUEsR0FBQTNJLEtBQUFELFdBU0FrRCxFQUFBd0UsSUFBQXhFLEVBQUF5RixVQU9BekYsRUFBQTJGLFdBQUEsU0FBQUQsR0FHQSxPQUZBMUksRUFBQTBJLEtBQ0FBLElBQUF6RixTQUNBLElBQUF5RixHQUFBLElBQ0EzSSxLQUNBMkksRUFBQSxHQUNBbEksRUFBQVQsS0FBQUgsTUFBQThJLEVBQUEzSSxLQUFBRixNQUFBLEdBQUE2SSxFQUFBM0ksS0FBQUYsTUFBQTZJLEVBQUEzSSxLQUFBRCxVQUVBVSxFQUFBVCxLQUFBRixNQUFBNkksRUFBQSxHQUFBM0ksS0FBQUYsTUFBQSxPQUFBRSxLQUFBRCxXQVNBa0QsRUFBQXVFLElBQUF2RSxFQUFBMkYsV0FPQTNGLEVBQUE0RixtQkFBQSxTQUFBRixHQUlBLEdBSEExSSxFQUFBMEksS0FDQUEsSUFBQXpGLFNBRUEsS0FEQXlGLEdBQUEsSUFFQSxPQUFBM0ksS0FFQSxJQUFBRixFQUFBRSxLQUFBRixLQUNBLE9BQUE2SSxFQUFBLEdBRUFsSSxFQURBVCxLQUFBSCxNQUNBOEksRUFBQTdJLEdBQUEsR0FBQTZJLEVBQUE3SSxJQUFBNkksRUFBQTNJLEtBQUFELFVBRUFVLEVBRFMsS0FBQWtJLEVBQ1Q3SSxFQUVBQSxJQUFBNkksRUFBQSxHQUZBLEVBQUEzSSxLQUFBRCxXQVlBa0QsRUFBQXNFLEtBQUF0RSxFQUFBNEYsbUJBUUE1RixFQUFBNkYsTUFBQTdGLEVBQUE0RixtQkFNQTVGLEVBQUE4RixTQUFBLFdBQ0EsT0FBQS9JLEtBQUFELFNBRUFVLEVBQUFULEtBQUFILElBQUFHLEtBQUFGLE1BQUEsR0FEQUUsTUFRQWlELEVBQUFxRSxXQUFBLFdBQ0EsT0FBQXRILEtBQUFELFNBQ0FDLEtBQ0FTLEVBQUFULEtBQUFILElBQUFHLEtBQUFGLE1BQUEsSUFRQW1ELEVBQUErRixRQUFBLFNBQUE3RCxHQUNBLE9BQUFBLEVBQUFuRixLQUFBaUosWUFBQWpKLEtBQUFrSixhQU9BakcsRUFBQWdHLFVBQUEsV0FDQSxJQUFBRSxFQUFBbkosS0FBQUYsS0FDQXNKLEVBQUFwSixLQUFBSCxJQUNBLE9BQ0EsSUFBQXVKLEVBQ0FBLElBQUEsTUFDQUEsSUFBQSxPQUNBQSxJQUFBLEdBQ0EsSUFBQUQsRUFDQUEsSUFBQSxNQUNBQSxJQUFBLE9BQ0FBLElBQUEsS0FRQWxHLEVBQUFpRyxVQUFBLFdBQ0EsSUFBQUMsRUFBQW5KLEtBQUFGLEtBQ0FzSixFQUFBcEosS0FBQUgsSUFDQSxPQUNBc0osSUFBQSxHQUNBQSxJQUFBLE9BQ0FBLElBQUEsTUFDQSxJQUFBQSxFQUNBQyxJQUFBLEdBQ0FBLElBQUEsT0FDQUEsSUFBQSxNQUNBLElBQUFBLElBV0E5SixFQUFBK0osVUFBQSxTQUFBQyxFQUFBdkosRUFBQW9GLEdBQ0EsT0FBQUEsRUFBQTdGLEVBQUFpSyxZQUFBRCxFQUFBdkosR0FBQVQsRUFBQWtLLFlBQUFGLEVBQUF2SixJQVNBVCxFQUFBaUssWUFBQSxTQUFBRCxFQUFBdkosR0FDQSxXQUFBVCxFQUNBZ0ssRUFBQSxHQUNBQSxFQUFBLE1BQ0FBLEVBQUEsT0FDQUEsRUFBQSxPQUNBQSxFQUFBLEdBQ0FBLEVBQUEsTUFDQUEsRUFBQSxPQUNBQSxFQUFBLE9BQ0F2SixJQVVBVCxFQUFBa0ssWUFBQSxTQUFBRixFQUFBdkosR0FDQSxXQUFBVCxFQUNBZ0ssRUFBQSxPQUNBQSxFQUFBLE9BQ0FBLEVBQUEsTUFDQUEsRUFBQSxHQUNBQSxFQUFBLE9BQ0FBLEVBQUEsT0FDQUEsRUFBQSxNQUNBQSxFQUFBLEdBQ0F2SixxQkN2eUNBOUMsRUFBUSxHQUNSLE1BQUF3TSxXQUFPQSxHQUFnQnhNLEVBQVEsR0FFL0J5TSxFQUFBdk0sRUFBQXVNLHNCQUFBLENBQ0F0RixJQUFBLEVBQ0F1RixJQUFBLG1FQUNBQyxPQUFBLG9CQUNBQyxLQUFBLE9BY0FDLEVBQUEzTSxFQUFBMk0sWUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFDLEVBQUFsTSxPQUFBbU0sT0FBQSxDQUNBOUYsSUFBQSxFQUNBdUYsSUFBQSxtQ0FDQUMsT0FBQSxnQkFDQU8sTUFBQS9LLEtBQ0F5SyxLQUFBLElBQ0FPLE9BQUEsR0FDR0osR0FDSCxHQUFBQyxFQUFBTixJQUFBOUgsT0FBQUwsS0FBQUMsSUFBQSxFQUFBd0ksRUFBQTdGLEtBQ0EsVUFBQXRDLG1EQUFpRW1JLEVBQUFOLElBQUE5SCxvQkFBOEJMLEtBQUFDLElBQUEsRUFBQXdJLEVBQUE3RixTQUUvRixzQkFBQTZGLEVBQUFFLE1BQ0EsVUFBQXJJLDBEQUFpRW1JLEVBQUFFLFVBRWpFLElBQUFFLEVBQUFOLEVBQ0FPLEVBQUEsR0FDQTFMLEVBQUEsS0FDQTJMLEVBQUEsS0FDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUFULEVBQUFMLE9BQ0EsTUFBQWUsRUFBQSxHQUNBQyxFQUFBLEdBRUFYLEVBQUFHLFFBQ0FDLEVBQUFRLE9BQUFDLEtBQUFmLEdBQUEzRyxTQUFBLFFBR0EsUUFBQS9GLEVBQUEsRUFBaUJBLEVBQUFnTixFQUFBeEksT0FBaUJ4RSxHQUFBLEVBQ2xDc04sRUFBQUksS0FBQVYsRUFBQVcsT0FBQTNOLEVBQUEsSUFFQW1OLEVBQUFHLElBQUE5SSxPQUFBLEdBQUFBLE9BQ0E4SSxFQUFBTSxRQUFBQyxJQUVBLElBQUFDLEVBQUE3SSxTQUFBNEksRUFBQSxJQUFBOUgsU0FBQSxHQUNBLEtBQUErSCxFQUFBdEosT0FBQSxJQUNBc0osRUFBQSxJQUFBQSxFQUVBYixHQUFBYSxJQUlBYixFQUFBTCxFQUFBRSxNQUFBRyxHQUVBLFFBQUFjLEVBQUEsRUFBaUJBLEVBQUFkLEVBQUF6SSxPQUFrQnVKLEdBQUFuQixFQUFBN0YsSUFBQSxDQUNuQyxNQUFBaUgsRUFBQWYsRUFBQVUsT0FBQUksRUFBQW5CLEVBQUE3RixLQUNBd0csRUFBQUcsS0FBQWQsRUFBQU4sSUFBQXJILFNBQUErSSxFQUFBLEtBQ0FaLEVBQUFZLEVBQUF4SixPQUdBLE9BREEwSSxFQUFBSyxFQUFBZixLQUFBLElBQ0EsaUJBQUFhLEdBRUE5TCxHQURBOEwsRUFBQUcsT0FBQUMsVUFBa0NOLE1BQWlCQyxNQUFpQlIsRUFBQUwsVUFBYXhHLFNBQUEsV0FDakZzSCxFQUFBN0ksT0FBQSxHQUFBNkksRUFBQU0sT0FBQSxFQUFBTixFQUFBN0ksT0FBQSxHQUFBNkksRUFBQSxHQUNBVCxFQUFBSixLQUFBakwsRUFBQXFMLEVBQUFKLEtBQUFVLEVBQUEsQ0FBcUQzTCxNQUFBMkwsU0FFckRBLEdBZUFlLEVBQUFuTyxFQUFBbU8sWUFBQSxTQUFBZixFQUFBUCxHQUNBLE1BQUFDLEVBQUFsTSxPQUFBbU0sT0FBQSxDQUNBOUYsSUFBQSxFQUNBdUYsSUFBQSxtQ0FDQTRCLE1BQUFuTSxLQUNBeUssS0FBQSxJQUNBTyxPQUFBLEdBQ0dKLEdBQ0gsR0FBQUMsRUFBQU4sSUFBQTlILE9BQUFMLEtBQUFDLElBQUEsRUFBQXdJLEVBQUE3RixLQUNBLFVBQUF0QyxtREFBaUVtSSxFQUFBTixJQUFBOUgsb0JBQThCTCxLQUFBQyxJQUFBLEVBQUF3SSxFQUFBN0YsU0FFL0Ysc0JBQUE2RixFQUFBc0IsTUFDQSxVQUFBekosMERBQWlFbUksRUFBQXNCLFVBRWpFLE1BQUFuSCxJQUFTQSxFQUFBdUYsTUFBQTRCLFFBQUExQixPQUFBTyxTQUErQkgsRUFDeEMsSUFBQVMsRUFBQSxLQUNBYyxFQUFBLEtBQ0FoQixFQUFBLEtBQ0FDLEVBQUEsS0FDQWdCLEVBQUEsS0FDQSxvQkFBQWxCLEtBQUEzTCxLQUFBMkwsT0FDQUcsRUFBQUgsRUFBQTNMLElBQ0E0TSxFQUFBakIsV0FDRyxxQkFBQUEsR0FBQSxpQkFBQVYsRUFLSCxVQUFBL0gsTUFBQSw0RkFMRyxDQUNILE1BQUE0SixFQUFBbkIsRUFBQXZJLFFBQUE2SCxHQUNBYSxFQUFBSCxFQUFBUyxPQUFBLEVBQUFVLEdBQ0FGLEVBQUFqQixFQUFBUyxPQUFBVSxFQUFBN0IsRUFBQWhJLFNBTUE0SixHQUZBZixFQUFBRyxPQUFBQyxLQUFBSixJQUFBN0ksT0FBQSxHQUFBNkksRUFBQU0sT0FBQSxFQUFBTixFQUFBN0ksT0FBQSxHQUFBNkksRUFBQSxHQUNBLFVBQUF0SCxZQUNBdUksTUFBQSxNQUNBbkIsRUFBQWxJLFNBQUFtSixFQUFBLElBQ0FoQixFQUFBbkksU0FBQW1KLEVBQUEsSUFDQWYsRUFBQWUsRUFBQUcsTUFBQSxHQUFBL0IsS0FBQSxJQUVBLElBQUFTLEVBQUEsR0FBaUJ1QixFQUFBLEdBRWpCLFFBQUF4TyxFQUFBLEVBQWlCQSxFQUFBbU8sRUFBQTNKLE9BQXdCeEUsSUFBQSxDQUN6QyxJQUFBOE4sRUFBQTdJLFNBQUFxSCxFQUFBM0gsUUFBQXdKLEVBQUFuTyxLQUFBK0YsU0FBQSxHQUNBLEtBQUErSCxFQUFBdEosUUFBQXhFLElBQUFtTyxFQUFBM0osT0FBQSxFQUFBNEksRUFBQXJHLElBQ0ErRyxFQUFBLElBQUFBLEVBRUFiLEdBQUFhLEVBR0FiLEVBQUFpQixFQUFBakIsR0FFQSxRQUFBYyxFQUFBLEVBQWlCQSxFQUFBZCxFQUFBekksT0FBa0J1SixHQUFBLElBQ25DLElBQUFVLEVBQUF4SixTQUFBZ0ksRUFBQVUsT0FBQUksRUFBQSxPQUFBaEksU0FBQSxJQUNBLEtBQUEwSSxFQUFBakssUUFBQXlJLEVBQUF6SSxRQUFBdUosRUFBQSxHQUFBWixFQUFBLElBQ0FzQixFQUFBLElBQUFBLEVBRUFELEdBQUFDLEVBRUEsT0FBQTFCLEVBQUF5QixFQUFBaEIsT0FBQUMsS0FBQWUsRUFBQSxPQUFBekksWUFHQWpHLEVBQUE0TyxRQUFBLFNBQUFoQyxHQUNBLE9BQUFELEVBQUFDLEVBQUFMLElBRUF2TSxFQUFBNk8sUUFBQSxTQUFBekIsR0FDQSxPQUFBZSxFQUFBZixFQUFBYixJQUdBdk0sRUFBQThPLElBQUEsU0FBQWxDLEdBQ0EsT0FBQU4sRUFBQSxPQUNBeUMsT0FBQW5DLEdBQ0FvQyxPQUFBLHVCQ2pLQSxNQUFBQyxFQUFBLEtBRUFDLEVBQUEsV0FFQUMsS0FBQXJOLFVBQUFzTixXQU1BRCxLQUFBck4sVUFBQXNOLFNBQUEsV0FDQSxPQUFBL0ssS0FBQW1HLE1BQUEzSCxLQUFBd00sVUFBQSxPQUdBRixLQUFBRyxrQkFNQUgsS0FBQUcsZ0JBQUEsV0FDQSxXQUFBSCxNQUFBQyxhQUlBLE1BQUFHLEVBQUEsc0NBQ0FDLEVBQUEsMEJBQ0FDLEVBQUEsbUxBeUJBLE9BeEJBQyxPQUFBNU4sVUFBQTZOLFlBTUFELE9BQUE1TixVQUFBNk4sVUFBQSxXQUNBLEdBQUFGLEVBQUFHLEtBQUEvTSxNQUFBLENBQ0EsSUFBQWdOLEVBQUEsRUFBQUMsRUFBQSxFQUNBLFFBQUE1UCxFQUFBLEVBQXVCQSxFQUFBMkMsS0FBQTZCLE9BQUEsRUFBcUJ4RSxJQUU1QzJQLEdBQUExSyxTQUFBdEMsS0FBQWdMLE9BQUEzTixFQUFBLE9BQUFxUCxFQUFBclAsR0FNQSxPQUFBc1AsRUFIQU0sRUFBQUQsRUFBQSxLQUdBaE4sS0FBQWdMLE9BQUEsTUFBQWtDLGNBRUEsV0FLQSxDQUNBQyxjQUFBYixLQUFBck4sVUFBQXNOLFNBQ0FFLGdCQUFBSCxLQUFBRyxnQkFDQVcsaUJBQUFQLE9BQUE1TixVQUFBNk4sV0FyREEsR0EyREEsU0FBQU8sRUFBQUMsR0FDQXROLEtBQUFzTixVQUNBdE4sS0FBQXVOLEtBQUEsV0FDQXZOLEtBQUFwQyxLQUFBLGdCQUNBb0MsS0FBQXVLLEtBQUEsS0FDQXZLLEtBQUF3TixXQUFBeE4sS0FZQSxTQUFBeU4sRUFBQUMsR0FDQSxHQUFBQSxhQUFBTCxFQUNBLE9BQUFLLEVBRUEsTUFBQUMsRUFBQSxJQUFBTixFQUNBLEdBQUFLLEdBQUEsaUJBQUFBLEdBRUcsR0FBQUEsYUFBQTVMLE1BQUEsQ0FDSCxNQUFBd0wsUUFBV0EsRUFBQS9DLE9BQUFnRCxPQUFBM1AsT0FBQWdRLFFBQUFDLFVBQTJDSCxFQUN0REMsRUFBQXBELEtBQUEsaUJBQUFBLElBQUEsaUJBQUFzRCxJQUFBRixFQUFBcEQsS0FDQW9ELEVBQUFMLGlCQUErQkssRUFBQXBELFFBQWdCK0MsSUFDL0NLLEVBQUFKLFFBQUFJLEVBQUFKLEtBQ0FJLEVBQUEvUCxRQUFBK1AsRUFBQS9QLEtBQ0ErUCxFQUFBQyxjQVBBRCxFQUFBTCxRQUFBSSxHQUFBLG1CQVVBLE9BREFDLEVBQUFILFdBQUFFLEVBQ0FDLEVBMUJBTixFQUFBcE8sVUFBQSxJQUFBNkMsTUFDQXVMLEVBQUFwTyxVQUFBNkksSUFBQSxTQUFBZ0csSUFDQUEsS0FBQTlOLEtBQUE4TixRQUFBQyxTQUNBQyx5QkFBa0NoTyxLQUFBdU4sWUFBaUJ2TixLQUFBcEMsTUFBQW9DLEtBQUFzTixpQkFBbUN0TixLQUFBdUssY0FDdEZ2SyxLQUFBaU8sVUFBQUgsRUFBQUUsa0JBQTRDaE8sS0FBQWtPLG1CQUF3QmxPLEtBQUFtTyxtQkFBd0JuTyxLQUFBaU8sWUFDNUZqTyxLQUFBcEMsTUFBQWtRLEVBQUFFLHdCQUE4Q2hPLEtBQUFzTixXQUM5Q1EsRUFBQUUsWUFBcUJoTyxLQUFBNE4sT0FBQTVOLEtBQUF3TixXQUFBSSxTQUNyQkUsRUFBQUUsTUFBQSwwREFzQkE3USxFQUFBa1AsWUFFQWxQLEVBQUFrUSxZQUNBbFEsRUFBQWlSLE9BQUFYLEVBQ0F0USxFQUFBa1IsT0FBQSxTQUFBWCxFQUFBSSxHQUNBSixhQUFBTCxFQUNBSyxFQUFBNUYsSUFBQWdHLEdBQUExQixHQUVBcUIsRUFBQUMsR0FBQTVGLElBQUFnRyxHQUFBMUIsSUFHQWpQLEVBQUFtUixVQUFBLFNBQUFSLEdBQ0ExQixFQUFBMEIsa0JDOUdBMVEsRUFBQUQsUUFBQWtDLFFBQUEseUJDS0EsSUFEQSxJQUFBa1AsRUFBQSxHQUNBbFIsRUFBQSxFQUFlQSxFQUFBLE1BQVNBLEVBQ3hCa1IsRUFBQWxSLE1BQUEsS0FBQStGLFNBQUEsSUFBQTRILE9BQUEsR0FpQkE1TixFQUFBRCxRQWRBLFNBQUFxUixFQUFBQyxHQUNBLElBQUFwUixFQUFBb1IsR0FBQSxFQUNBQyxFQUFBSCxFQUVBLE9BQUFHLEVBQUFGLEVBQUFuUixNQUFBcVIsRUFBQUYsRUFBQW5SLE1BQ0FxUixFQUFBRixFQUFBblIsTUFBQXFSLEVBQUFGLEVBQUFuUixNQUFBLElBQ0FxUixFQUFBRixFQUFBblIsTUFBQXFSLEVBQUFGLEVBQUFuUixNQUFBLElBQ0FxUixFQUFBRixFQUFBblIsTUFBQXFSLEVBQUFGLEVBQUFuUixNQUFBLElBQ0FxUixFQUFBRixFQUFBblIsTUFBQXFSLEVBQUFGLEVBQUFuUixNQUFBLElBQ0FxUixFQUFBRixFQUFBblIsTUFBQXFSLEVBQUFGLEVBQUFuUixNQUNBcVIsRUFBQUYsRUFBQW5SLE1BQUFxUixFQUFBRixFQUFBblIsTUFDQXFSLEVBQUFGLEVBQUFuUixNQUFBcVIsRUFBQUYsRUFBQW5SLE9BQUF3TSxLQUFBLG9CQ3NEQSxTQUFBOEUsRUFBQS9RLEdBQ0EsTUFBQXVFLEVBQUEsR0FBb0IsSUFBQXlNLEVBQUEsRUFDcEJoUixHQUFBLElBQ0EsUUFBQVAsRUFBQSxFQUFpQkEsRUFBQU8sRUFBQWlFLE9BQWlCeEUsSUFDbENPLEVBQUFQLEdBQUF3UixnQkFBQWpSLEVBQUFQLFFBQUFPLEVBQUFpRSxPQUFBLElBQ0FNLEVBQUE0SSxLQUFBbk4sRUFBQXFFLFVBQUEyTSxFQUFBdlIsR0FBQXdSLGVBQ0FELEVBQUF2UixHQUdBLE9BQUE4RSxFQUdBLFNBQUEyTSxFQUFBbFIsRUFBQW1SLEdBQ0EsTUFBQTVNLEVBQUF2RSxFQUFBK04sTUFBQW9ELEdBQ0EsUUFBQTFSLEVBQUEsRUFBaUJBLEVBQUE4RSxFQUFBTixPQUFtQnhFLElBQ3BDLE9BQUFBLEVBQUEsQ0FDQSxNQUFBMlIsRUFBQTdNLEVBQUE5RSxHQUNBOEUsRUFBQTlFLEdBQUEyUixFQUFBLEdBQUE5QixjQUFBOEIsRUFBQXBELE1BQUEsR0FHQSxPQUFBekosRUFBQTBILEtBQUEsSUF4RkExTSxFQUFBOFIsVUFBQXROLElBQ0EsSUFDQSxPQUFBdU4sS0FBQUMsTUFBQXhOLEdBQ0csTUFBQStMLEdBQ0gsY0FVQXZRLEVBQUFpUyxpQkFBQXhSLEdBQ0ErUSxFQUFBL1EsR0FBQWlNLEtBQUEsS0FTQTFNLEVBQUFrUyxpQkFBQXpSLEdBQ0FrUixFQUFBbFIsRUFBQSxLQVNBVCxFQUFBbVMsa0JBQUExUixHQUNBa1IsRUFBQWxSLEVBQUEsS0FTQVQsRUFBQW9TLGtCQUFBM1IsR0FDQStRLEVBQUEvUSxHQUFBaU0sS0FBQSxLQVNBMU0sRUFBQXFTLHNCQUFBNVIsR0FDQUEsRUFBQStOLE1BQUEsS0FBQTlCLEtBQUEsS0FTQTFNLEVBQUFzUyxzQkFBQTdSLEdBQ0FBLEVBQUErTixNQUFBLEtBQUE5QixLQUFBLEtBMkJBLE1BQUE2RixFQUFBLDhQQUdBL0QsTUFBQSxLQUNBZ0UsRUFBQSxHQUNBLFFBQUF0UyxFQUFBLEVBQWVBLEVBQUEsSUFBVUEsSUFDekJzUyxFQUFBdFMsS0FBQSxHQUFBcVMsRUFBQXJTLEdBQ0FBLEVBQUEsSUFDQXFTLEVBQUEsR0FBQWxPLEtBQUFtRyxNQUFBdEssRUFBQSxNQUFBQSxFQUFBLGFBQUFzUyxFQUFBdFMsRUFBQSxLQUVBcVMsRUFBQWxPLEtBQUFtRyxNQUFBdEssRUFBQSxVQUFBcVMsRUFBQSxLQUFBclMsRUFBQSxrQkFBQXNTLEVBQUF0UyxFQUFBLE1BRUEsTUFBQXVTLEVBQUEsZ0NBQ0FDLEVBQUEsZ0NBQ0FDLEVBQUEsMENBQ0FDLEVBQUEsMENBUUE1UyxFQUFBNlMsT0FBQUMsSUFDQSxvQkFBQWxELEtBQUFrRCxHQUNBLHlCQUVBLE1BQUFDLEVBQUFELEVBQUE3TSxXQUFBdUksTUFBQSxRQUFBQSxNQUFBLEtBQUE5QixLQUFBLElBQ0EsSUFBQXNHLEVBQUFDLEVBQUEsR0FDQSxRQUFBL1MsRUFBQSxFQUFpQkEsRUFBQW1FLEtBQUFxRyxLQUFBcUksRUFBQXJPLE9BQUEsR0FBa0N4RSxJQUNuRDhTLEVBQUE3TixTQUNBNE4sRUFBQWpPLFVBQ0FpTyxFQUFBck8sT0FBQSxFQUFBeEUsRUFBQSxFQUNBNlMsRUFBQXJPLE9BQUEsRUFBQXhFLEdBRUEsSUFFQStTLEdBQUEsR0FBQS9TLEdBQUE4UyxFQUFBLEdBQUFBLEVBQUEsS0FBQTdOLFNBQUE0TixFQUFBak8sVUFBQSxFQUFBSixPQUFBLHNCQUNBLEdBQUFzTyxJQUFBOVMsRUFBQSxNQUFBNlMsRUFBQTlNLFNBQUEsUUFBQXVNLEVBQUFRLEtBQ0EsR0FBQUEsRUFBQSxpQkFBQVQsRUFBQSxHQUFBclMsR0FBQSxZQUFBcVMsRUFBQSxHQUFBclMsTUFDQSxHQUFBQSxHQUFBLEdBQUE4UyxLQUFBLE9BQUFDLEVBQUEsU0FBQUEsRUFFQSxHQUFBSCxFQUFBN00sV0FBQXVJLE1BQUEsU0FDQSxJQUFBMEUsRUFBQUosRUFBQTdNLFdBQUF1SSxNQUFBLFFBQUFBLE1BQUEsS0FBQTlCLEtBQUEsSUFDQSxRQUFBeE0sRUFBQSxFQUFtQkEsRUFBQWdULEVBQUF4TyxPQUFxQnhFLElBQ3hDOFMsRUFBQTdOLFNBQUErTixFQUFBcE8sVUFBQTVFLElBQUEsT0FDQStTLElBQUEsR0FBQS9TLEdBQUEsSUFBQStTLEVBQUFWLEVBQUEscUJBQ0EsR0FBQVMsR0FBQSxHQUFBOVMsSUFBQWlGLFNBQUErTixFQUFBcE8sVUFBQTVFLEVBQUEsWUFBQXNTLEVBQUFRLEdBQUEsS0FHQSxPQUFBQyxFQUFBRSxRQVNBblQsRUFBQW9ULE9BQUEsQ0FBQU4sRUFBQU8sS0FDQSxvQkFBQXpELEtBQUFrRCxHQUNBLHlCQUVBLE1BQUFRLEVBQUFELEVBQUFULEVBQUFELEVBQ0FZLEVBQUFGLEVBQUEsSUFBQVgsR0FBQSxJQUFBRCxHQUNBZSxFQUFBVixFQUFBN00sV0FBQXdOLFFBQUEsYUFBQWpGLE1BQUEsS0FDQSxJQUFBa0YsRUFBQSxFQUFBQyxFQUFBLEdBQUFDLEVBQUFKLEVBQUEsR0FDQSxRQUFBdFQsRUFBQTBULEVBQUFsUCxPQUFBLEVBQTZCeEUsR0FBQSxFQUFRQSxJQUFBLENBQ3JDLE9BQUF3VCxHQUNBLE9BQ0FDLEVBQUFKLEVBQUEsR0FBQUksRUFDQSxNQUNBLE9BQ0EsSUFBQUUsT0FBQSxZQUFpQ0QsRUFBQWxQLE9BQUF4RSxFQUFBLFNBQTRCMFAsS0FBQWdFLEtBQzdERCxFQUFBSixFQUFBLEdBQUFJLEdBRUEsTUFDQSxPQUNBQSxFQUFBSixFQUFBLEdBQUFJLEVBQ0FKLEVBQUEsR0FBQUEsRUFBQSxHQUNBRyxFQUFBLEVBR0FBLEVBQUEsU0FBQUUsRUFBQTFULEVBQUEsT0FBQTBULEVBQUExVCxFQUFBLEtBQ0F5VCxFQUFBTCxFQUFBLEdBQUFLLEdBRUEsR0FBQUMsRUFBQTFULEtBQ0F5VCxFQUFBTCxFQUFBTSxFQUFBMVQsSUFBQXFULEVBQUFHLEVBQUEsR0FBQUMsR0FFQUQsSUFFQSxHQUFBRixFQUFBOU8sT0FBQSxHQUNBaVAsR0FBQUosRUFBQSxHQUNBLFFBQUF0RixFQUFBLEVBQW1CQSxFQUFBdUYsRUFBQSxHQUFBOU8sT0FBaUJ1SixJQUNwQzBGLEdBQUFMLEVBQUFFLEVBQUEsR0FBQXZGLElBR0EsT0FBQTBGLEdBV0EzVCxFQUFBOFQsVUFBQSxDQUFBQyxFQUFBbEgsS0FDQSxNQUFBbUgsRUFBQSxDQUNBQyxHQUFBLEtBQ0FDLE9BQUEsWUFDQUMsU0FBQSxjQUNBdEgsR0FFQXVILEVBQUEsR0FDQUMsRUFBQSxTQUFBQyxHQUNBLE1BQUEzVCxFQUFBLElBQWUyVCxHQUNmLGdCQUFBRCxFQUFBRSxFQUFBQyxHQUNBLElBQUE3UyxFQUFBLEtBQ0EsR0FBQTRTLEtBQUE3UCxPQUNBLFdBQUF0RCxLQUFBbVQsRUFBQUUsVUFBQSxDQUNBLEdBQUFELEVBQUFwVCxHQUFBLENBQ0FPLEVBQUFQLEVBQ0EsTUFHQSxHQURBTyxFQUFBMFMsRUFBQWpULEVBQUFULEVBQUF3VCxVQUFBSyxHQUVBLE1BS0EsT0FBQTdTLEdBakJBLENBbUJHcVMsR0FDSFUsRUFBQSxJQUFBWCxHQUNBLEtBQUFXLEVBQUFoUSxRQUNBLFFBQUFvTCxFQUFBNEUsRUFBQWhRLE9BQUEsRUFBb0NvTCxHQUFBLEVBQVVBLElBQUEsQ0FDOUMsTUFBQTZFLEVBQUFELEVBQUE1RSxHQUNBLFNBQUE2RSxFQUFBWCxFQUFBRSxTQUFBLEtBQUFTLEVBQUFYLEVBQUFFLFNBQUEsR0FBQVMsRUFBQVgsRUFBQUUsU0FBQSxHQUFBUyxFQUFBWCxFQUFBRSxRQUNBRSxFQUFBeEcsS0FBQSxJQUFtQitHLEVBQUFDLENBQUFaLEVBQUFHLFVBQUEsS0FDbkJPLEVBQUFHLE9BQUEvRSxFQUFBLE9BQ08sQ0FDUCxNQUFBZ0YsRUFBQVQsRUFBQUQsRUFBQVcsR0FDQUosRUFBQVgsRUFBQUUsVUFBQWEsRUFBQWYsRUFBQUMsS0FFQWEsSUFDQUEsRUFBQWQsRUFBQUcsVUFBQVcsRUFBQWQsRUFBQUcsV0FBQSxHQUNBVyxFQUFBZCxFQUFBRyxVQUFBdkcsS0FBQSxJQUFrQytHLElBQ2xDRCxFQUFBRyxPQUFBL0UsRUFBQSxLQUtBLE9BQUFzRSxvQkMxUEEsSUFBQVksRUFBYWxWLEVBQVEsR0FFckJHLEVBQUFELFFBQUEsV0FDQSxPQUFBZ1YsRUFBQUMsWUFBQSxrSkNMQUMsRUFBQXBWLEVBQUEsSUFDQW9WLEVBQUFwVixFQUFBLElBQ0FvVixFQUFBcFYsRUFBQSxJQUNBb1YsRUFBQXBWLEVBQUEsSUFDQW9WLEVBQUFwVixFQUFBLEtBQ0FvVixFQUFBcFYsRUFBQSxzQkNMQSxNQUFBcVYsRUFBZXJWLEVBQVEsSUFDdkJzVixFQUFldFYsRUFBUSxJQUN2QnVWLEVBQWV2VixFQUFRLEtBQ3ZCd1YsU0FBT0EsR0FBY3hWLEVBQVEsS0FDN0I2TSxZQUFPQSxHQUFpQjdNLEVBQVEsR0FRaENFLEVBQUF1VixVQUFBQyxJQUNBQSxLQUFBLEdBQ0EsSUFBQWhWLEdBQUEsSUFBQTJPLE1BQUFFLFVBQUFwSixXQUNBL0YsRUFBQW1FLEtBQUFtRyxNQUFBLEdBQUFuRyxLQUFBb1IsVUFDQXRWLEVBQUFLLEVBQUFrRSxPQUNBLEdBQUF2RSxFQUFBLElBQ0EsSUFBQXVWLEVBQUEsR0FBQXZWLEVBQ0EsS0FBQXVWLEtBQUEsR0FBQWxWLEdBQUEsSUFFQSxPQUFBZ1YsRUFDQW5SLEtBQUFvUixTQUFBeFAsV0FBQXdJLE1BQUEsS0FDQWpPLEVBQUFpTyxNQUFBLEVBQUF2TyxHQUNBbUUsS0FBQW9SLFNBQUF4UCxXQUFBd0ksTUFBQSxNQUNBak8sRUFBQWlPLE1BQUF2TyxHQUNBbUUsS0FBQW9SLFNBQUF4UCxXQUFBd0ksTUFBQSxNQUFBdk8sR0FHQUYsRUFBQTJWLFFBQUEsQ0FBQXZGLEVBQUF3RixLQUVBLE9BREF4RixLQUFBLGFBRUEsZ0JBQ0EsT0FBQStFLElBQ0EsZ0JBRUEsT0FBQUUsRUFEQU8sS0FBQSx5QkFDQVAsRUFBQVEsS0FDQSxhQUNBLE9BQUFULElBQ0EsUUFDQSxPQUFBRCxNQVNBblYsRUFBQThWLE1BQUEsSUFBQW5KLEdBQUEsSUFBQTJJLEdBQUFyUCxXQUFBLENBQ0F3RyxPQUFBLEtBQ0FPLE1BQUEvSyxLQUFBNEwsT0FBQSxzQkNwREEsSUFRQWtJLEVBQ0FDLEVBVEFDLEVBQVVuVyxFQUFRLEdBQ2xCb1csRUFBa0JwVyxFQUFRLEdBVzFCcVcsRUFBQSxFQUNBQyxFQUFBLEVBK0ZBblcsRUFBQUQsUUE1RkEsU0FBQTZNLEVBQUF3RSxFQUFBQyxHQUNBLElBQUFwUixFQUFBbVIsR0FBQUMsR0FBQSxFQUNBK0UsRUFBQWhGLEdBQUEsR0FHQTBELEdBREFsSSxLQUFBLElBQ0FrSSxNQUFBZ0IsRUFDQU8sT0FBQUMsSUFBQTFKLEVBQUF5SixTQUFBekosRUFBQXlKLFNBQUFOLEVBS0EsU0FBQWpCLEdBQUEsTUFBQXVCLEVBQUEsQ0FDQSxJQUFBRSxFQUFBUCxJQUNBLE1BQUFsQixJQUVBQSxFQUFBZ0IsRUFBQSxDQUNBLEVBQUFTLEVBQUEsR0FDQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEtBR0EsTUFBQUYsSUFFQUEsRUFBQU4sRUFBQSxPQUFBUSxFQUFBLE1BQUFBLEVBQUEsS0FRQSxJQUFBQyxPQUFBRixJQUFBMUosRUFBQTRKLE1BQUE1SixFQUFBNEosT0FBQSxJQUFBdEgsTUFBQUUsVUFJQXFILE9BQUFILElBQUExSixFQUFBNkosTUFBQTdKLEVBQUE2SixNQUFBTixFQUFBLEVBR0FPLEVBQUFGLEVBQUFOLEdBQUFPLEVBQUFOLEdBQUEsSUFjQSxHQVhBTyxFQUFBLFFBQUFKLElBQUExSixFQUFBeUosV0FDQUEsSUFBQSxVQUtBSyxFQUFBLEdBQUFGLEVBQUFOLFNBQUFJLElBQUExSixFQUFBNkosUUFDQUEsRUFBQSxHQUlBQSxHQUFBLElBQ0EsVUFBQS9SLE1BQUEsbURBR0F3UixFQUFBTSxFQUNBTCxFQUFBTSxFQUNBVixFQUFBTSxFQU1BLElBQUFNLEdBQUEsZ0JBSEFILEdBQUEsY0FHQUMsR0FBQSxXQUNBTCxFQUFBblcsS0FBQTBXLElBQUEsT0FDQVAsRUFBQW5XLEtBQUEwVyxJQUFBLE9BQ0FQLEVBQUFuVyxLQUFBMFcsSUFBQSxNQUNBUCxFQUFBblcsS0FBQSxJQUFBMFcsRUFHQSxJQUFBQyxFQUFBSixFQUFBLHlCQUNBSixFQUFBblcsS0FBQTJXLElBQUEsTUFDQVIsRUFBQW5XLEtBQUEsSUFBQTJXLEVBR0FSLEVBQUFuVyxLQUFBMlcsSUFBQSxTQUNBUixFQUFBblcsS0FBQTJXLElBQUEsT0FHQVIsRUFBQW5XLEtBQUFvVyxJQUFBLE1BR0FELEVBQUFuVyxLQUFBLElBQUFvVyxFQUdBLFFBQUEzVSxFQUFBLEVBQWlCQSxFQUFBLElBQU9BLEVBQ3hCMFUsRUFBQW5XLEVBQUF5QixHQUFBb1QsRUFBQXBULEdBR0EsT0FBQTBQLEdBQUE2RSxFQUFBRyxxQkN6R0EsSUFBQUosRUFBVW5XLEVBQVEsR0FDbEJvVyxFQUFrQnBXLEVBQVEsR0EyQjFCRyxFQUFBRCxRQXpCQSxTQUFBNk0sRUFBQXdFLEVBQUFDLEdBQ0EsSUFBQXBSLEVBQUFtUixHQUFBQyxHQUFBLEVBRUEscUJBQ0FELEVBQUEsV0FBQXhFLEVBQUEsSUFBQWlLLE1BQUEsU0FDQWpLLEVBQUEsTUFJQSxJQUFBa0ssR0FGQWxLLEtBQUEsSUFFQTRJLFNBQUE1SSxFQUFBb0osVUFPQSxHQUpBYyxFQUFBLE1BQUFBLEVBQUEsTUFDQUEsRUFBQSxNQUFBQSxFQUFBLE9BR0ExRixFQUNBLFFBQUEyRixFQUFBLEVBQW9CQSxFQUFBLEtBQVNBLEVBQzdCM0YsRUFBQW5SLEVBQUE4VyxHQUFBRCxFQUFBQyxHQUlBLE9BQUEzRixHQUFBNkUsRUFBQWEscUJDekJBLElBQUFFLEVBQVVuWCxFQUFRLElBQ2xCb1gsRUFBV3BYLEVBQVEsSUFDbkJHLEVBQUFELFFBQUFpWCxFQUFBLFFBQUFDLG9CQ0ZBLElBQUFoQixFQUFrQnBXLEVBQVEsR0FxQjFCRyxFQUFBRCxRQUFBLFNBQUFTLEVBQUEwVyxFQUFBQyxHQUNBLElBQUFDLEVBQUEsU0FBQWxXLEVBQUFtVyxFQUFBakcsRUFBQUMsR0FDQSxJQUFBaUcsRUFBQWxHLEdBQUFDLEdBQUEsRUFLQSxHQUhBLHFCQUFBblEsRUFiQSxTQUFBcUQsR0FDQUEsRUFBQWdULFNBQUFDLG1CQUFBalQsSUFFQSxJQURBLElBQUEySCxFQUFBLElBQUEySyxNQUFBdFMsRUFBQUUsUUFDQXhFLEVBQUEsRUFBaUJBLEVBQUFzRSxFQUFBRSxPQUFnQnhFLElBQ2pDaU0sRUFBQWpNLEdBQUFzRSxFQUFBa1QsV0FBQXhYLEdBRUEsT0FBQWlNLEVBT0F3TCxDQUFBeFcsSUFDQSxxQkFBQW1XLEVBeEJBLFNBQUFNLEdBRUEsSUFBQXpMLEVBQUEsR0FLQSxPQUpBeUwsRUFBQW5FLFFBQUEsa0JBQThCLFNBQUFvRSxHQUM5QjFMLEVBQUF5QixLQUFBekksU0FBQTBTLEVBQUEsT0FHQTFMLEVBaUJBMkwsQ0FBQVIsS0FFQVIsTUFBQWlCLFFBQUE1VyxHQUFBLE1BQUE2VyxVQUFBLG1DQUNBLElBQUFsQixNQUFBaUIsUUFBQVQsSUFBQSxLQUFBQSxFQUFBNVMsT0FBQSxNQUFBc1QsVUFBQSwrREFHQSxJQUFBN0wsRUFBQWlMLEVBQUFFLEVBQUFXLE9BQUE5VyxJQUlBLEdBSEFnTCxFQUFBLE1BQUFBLEVBQUEsR0FBQWdMLEVBQ0FoTCxFQUFBLE1BQUFBLEVBQUEsT0FFQWtGLEVBQ0EsUUFBQXZCLEVBQUEsRUFBdUJBLEVBQUEsS0FBVUEsRUFDakN1QixFQUFBa0csRUFBQXpILEdBQUEzRCxFQUFBMkQsR0FJQSxPQUFBdUIsR0FBQTZFLEVBQUEvSixJQUlBLElBQ0FrTCxFQUFBNVcsT0FDRyxNQUFBOFAsSUFPSCxPQUhBOEcsRUFBQWEsSUFBQSx1Q0FDQWIsRUFBQXhCLElBQUEsdUNBRUF3QixpQ0NyREEsSUFBQXJDLEVBQWFsVixFQUFRLEdBc0JyQkcsRUFBQUQsUUFwQkEsU0FBQW1NLEdBaUJBLE1BaEJBLG1CQUFBdUIsT0FBQUMsS0FFQW1KLE1BQUFpQixRQUFBNUwsR0FDQUEsRUFBQXVCLE9BQUFDLEtBQUF4QixHQUNLLGlCQUFBQSxJQUNMQSxFQUFBdUIsT0FBQUMsS0FBQXhCLEVBQUEsU0FJQTJLLE1BQUFpQixRQUFBNUwsR0FDQUEsRUFBQSxJQUFBdUIsT0FBQXZCLEdBQ0ssaUJBQUFBLElBQ0xBLEVBQUEsSUFBQXVCLE9BQUF2QixFQUFBLFNBSUE2SSxFQUFBMUksV0FBQSxRQUFBeUMsT0FBQTVDLEdBQUE2QyxpRkNyQkFsUCxvQkFBQWtCLEVBQUFtWCxxQkFBQXJZLG9CQUFBVSxFQUFBMlgsb0JBQUEsbUNBQUFDLFNBQUF0WSxvQkFBQVUsRUFBQTJYLG9CQUFBLG1DQUFBRSxTQUFBdlksb0JBQUFVLEVBQUEyWCxvQkFBQSxtQ0FBQUcsU0FBQXhZLG9CQUFBVSxFQUFBMlgsb0JBQUEsbUNBQUFJLFNBQUF6WSxvQkFBQVUsRUFBQTJYLG9CQUFBLCtCQUFBSyxTQUFBMVksb0JBQUFVLEVBQUEyWCxvQkFBQSwrQkFBQU0sU0FBQTNZLG9CQUFBVSxFQUFBMlgsb0JBQUEscUNBQUFPLFNBQUE1WSxvQkFBQVUsRUFBQTJYLG9CQUFBLHFDQUFBUSxTQUFBN1ksb0JBQUFVLEVBQUEyWCxvQkFBQSxxQ0FBQVMsU0FBQTlZLG9CQUFBVSxFQUFBMlgsb0JBQUEsb0NBQUFVLFVBQUEvWSxvQkFBQVUsRUFBQTJYLG9CQUFBLHFDQUFBVyxVQUFBaFosb0JBQUFVLEVBQUEyWCxvQkFBQSx3Q0FBQVksVUFBQWpaLG9CQUFBVSxFQUFBMlgsb0JBQUEsa0NBQUFhLFVBQUFsWixvQkFBQVUsRUFBQTJYLG9CQUFBLHNDQUFBYyxVQUFBblosb0JBQUFVLEVBQUEyWCxvQkFBQSxtQ0FBQWUsVUFBQXBaLG9CQUFBVSxFQUFBMlgsb0JBQUEsbUNBQUFnQixVQUFBclosb0JBQUFVLEVBQUEyWCxvQkFBQSxxQ0FBQWlCLFVBQUF0WixvQkFBQVUsRUFBQTJYLG9CQUFBLHdDQUFBa0IsVUFBQXZaLG9CQUFBVSxFQUFBMlgsb0JBQUEsbUNBQUFtQixVQUFBeFosb0JBQUFVLEVBQUEyWCxvQkFBQSxxQ0FBQW9CLFVBQUF6WixvQkFBQVUsRUFBQTJYLG9CQUFBLDJDQUFBcUIsVUFBQTFaLG9CQUFBVSxFQUFBMlgsb0JBQUEsa0NBQUFzQixVQUFBM1osb0JBQUFVLEVBQUEyWCxvQkFBQSx3Q0FBQXVCLFVBQUE1WixvQkFBQVUsRUFBQTJYLG9CQUFBLG1DQUFBd0IsVUFBQTdaLG9CQUFBVSxFQUFBMlgsb0JBQUEseUNBQUF5QixVQUFBOVosb0JBQUFVLEVBQUEyWCxvQkFBQSxzQ0FBQTBCLFVBQUEvWixvQkFBQVUsRUFBQTJYLG9CQUFBLHNDQUFBMkIsVUFBQWhhLG9CQUFBVSxFQUFBMlgsb0JBQUEsZ0RBQUE0QixVQUFBamEsb0JBQUFVLEVBQUEyWCxvQkFBQSxpREFBQTZCLFVBQUFsYSxvQkFBQVUsRUFBQTJYLG9CQUFBLG1EQUFBOEIsVUFBQW5hLG9CQUFBVSxFQUFBMlgsb0JBQUEsNkNBQUErQixVQUFBcGEsb0JBQUFVLEVBQUEyWCxvQkFBQSw0Q0FBQWdDLFVBQUFyYSxvQkFBQVUsRUFBQTJYLG9CQUFBLHFEQUFBaUMsVUFBQXRhLG9CQUFBVSxFQUFBMlgsb0JBQUEseUJBQUFrQyxVQUFBdmEsb0JBQUFVLEVBQUEyWCxvQkFBQSwrQkFBQW1DLFVBQUF4YSxvQkFBQVUsRUFBQTJYLG9CQUFBLDBCQUFBb0MsVUFBQXphLG9CQUFBVSxFQUFBMlgsb0JBQUEsMkJBQUFxQyxVQUFBMWEsb0JBQUFVLEVBQUEyWCxvQkFBQSw2QkFBQXNDLFVBQUEzYSxvQkFBQVUsRUFBQTJYLG9CQUFBLHlCQUFBdUMsVUFBQTVhLG9CQUFBVSxFQUFBMlgsb0JBQUEsOEJBQUF3QyxVQUFBN2Esb0JBQUFVLEVBQUEyWCxvQkFBQSwyQkFBQXlDLFVBQUE5YSxvQkFBQVUsRUFBQTJYLG9CQUFBLDBCQUFBMEMsVUFBQS9hLG9CQUFBVSxFQUFBMlgsb0JBQUEsMkJBQUEyQyxVQUFBaGIsb0JBQUFVLEVBQUEyWCxvQkFBQSwyQkFBQTRDLFVBQUFqYixvQkFBQVUsRUFBQTJYLG9CQUFBLCtCQUFBNkMsVUFBQWxiLG9CQUFBVSxFQUFBMlgsb0JBQUEsK0JBQUE4QyxVQUFBbmIsb0JBQUFVLEVBQUEyWCxvQkFBQSw4QkFBQStDLFVBQUFwYixvQkFBQVUsRUFBQTJYLG9CQUFBLGdEQUFBZ0QsVUFBQXJiLG9CQUFBVSxFQUFBMlgsb0JBQUEsZ0NBQUFpRCxVQUFBdGIsb0JBQUFVLEVBQUEyWCxvQkFBQSx3Q0FBQWtELFVBQUF2YixvQkFBQVUsRUFBQTJYLG9CQUFBLHNDQUFBbUQsVUFBQXhiLG9CQUFBVSxFQUFBMlgsb0JBQUEsMENBQUFvRCxVQUFBemIsb0JBQUFVLEVBQUEyWCxvQkFBQSw2QkFBQXFELFVBQUExYixvQkFBQVUsRUFBQTJYLG9CQUFBLDBCQUFBc0QsVUFBQSxJQUFBQyxrQ0FBQTViLG9CQUFBLEdBQUE2YiwwQ0FBQTdiLG9CQUFBNkIsRUFBQStaLG1DQUFBRSxvQ0FBQTliLG9CQUFBLEdBQUErYiw0Q0FBQS9iLG9CQUFBNkIsRUFBQWlhLHFDQUdBRSxlQUFBLG9CQUFBQyxjQUFBLG9CQUFBQyxjQUFBLG9CQUFBQyxVQUFBLEdBRUEsU0FBQUMscUJBQUExSCxFQUFBdlUsR0FDQSxPQUFnQ3VVLEVBQWhDdlUsRUFBQSxDQUFrQkQsUUFBQSxJQUFjQyxFQUFBRCxTQUFBQyxFQUFBRCxRQUdoQyxJQUFBd00sSUFBQTBQLHFCQUFBLFNBQUFqYyxHQUVBLFlBQUE2YixlQUFBSyxJQUNBbGMsRUFBQUQsUUFBQThiLGVBQUFLLElBQ0FsYyxFQUFBRCxRQUFBbWMsSUFBQUwsZUFBQUssUUFDRyxDQUVILElBQUFBLEVBQUEsU0FBQUMsR0FDQXZaLEtBQUF3WixNQUFBLEdBQ0F4WixLQUFBeVosUUFBQSxHQUVBLFFBQUFwYyxFQUFBLEVBQXFCQSxFQUFBa2MsRUFBQTFYLE9BQWtCeEUsSUFDdkMsU0FBQWtjLEVBQUFsYyxHQUFBLENBRUEsSUFBQXFjLEVBQUFILEVBQUFsYyxHQUNBdUIsRUFBQThhLEVBQUEsR0FDQXBiLEVBQUFvYixFQUFBLEdBRUExWixLQUFBd1osTUFBQXpPLEtBQUFuTSxHQUlBb0IsS0FBQXlaLFFBQUE3YSxHQUFBLENBQ0FvUSxFQUFBMVEsRUFDQWpCLEVBQUEyQyxLQUFBd1osTUFBQTNYLE9BQUEsS0FLQXlYLEVBQUFyYSxVQUFBMGEsTUFBQSxXQUNBM1osS0FBQXdaLE1BQUEsR0FDQXhaLEtBQUF5WixRQUFBLElBR0FILEVBQUFyYSxVQUFBMmEsT0FBQSxTQUFBaGIsR0FDQSxJQUFBTixFQUFBMEIsS0FBQXlaLFFBQUE3YSxHQUNBLGFBQUFOLFdBRUEwQixLQUFBeVosUUFBQTdhLEdBRUFvQixLQUFBd1osTUFBQXhILE9BQUExVCxFQUFBakIsRUFBQSxJQUVBLElBR0FpYyxFQUFBcmEsVUFBQTJTLFFBQUEsV0FDQSxJQUFBd0gsRUFBQXBaLEtBQ0E2WixFQUFBLEVBQ0EsT0FDQUMsS0FBQSxXQUNBLElBQUFsYixFQUFBd2EsRUFBQUksTUFBQUssS0FDQSxPQUNBdmIsV0FBQW9WLElBQUE5VSxFQUFBLENBQUFBLEVBQUF3YSxFQUFBSyxRQUFBN2EsR0FBQW9RLFFBQUEwRSxFQUNBcUcsVUFBQXJHLElBQUE5VSxNQU1BMGEsRUFBQXJhLFVBQUFnTSxRQUFBLFNBQUErTyxFQUFBWixHQUNBQSxLQUFBcFosS0FFQSxRQUFBM0MsRUFBQSxFQUFxQkEsRUFBQTJDLEtBQUF3WixNQUFBM1gsT0FBdUJ4RSxJQUFBLENBQzVDLElBQUF1QixFQUFBb0IsS0FBQXdaLE1BQUFuYyxHQUVBMmMsRUFBQXhjLEtBQUE0YixFQUFBcFosS0FBQXlaLFFBQUE3YSxHQUFBb1EsRUFBQXBRLEVBQUF3YSxLQUlBRSxFQUFBcmEsVUFBQWYsSUFBQSxTQUFBVSxHQUNBLE9BQUFvQixLQUFBeVosUUFBQTdhLEdBQUFvQixLQUFBeVosUUFBQTdhLEdBQUFvUSxPQUFBMEUsR0FHQTRGLEVBQUFyYSxVQUFBZ2IsSUFBQSxTQUFBcmIsR0FDQSxhQUFBb0IsS0FBQXlaLFFBQUE3YSxJQUdBMGEsRUFBQXJhLFVBQUFpYixLQUFBLFdBQ0EsSUFBQWQsRUFBQXBaLEtBQ0E2WixFQUFBLEVBQ0EsT0FDQUMsS0FBQSxXQUNBLElBQUFsYixFQUFBd2EsRUFBQUksTUFBQUssS0FDQSxPQUNBdmIsV0FBQW9WLElBQUE5VSxTQUFBOFUsRUFDQXFHLFVBQUFyRyxJQUFBOVUsTUFNQTBhLEVBQUFyYSxVQUFBa2IsSUFBQSxTQUFBdmIsRUFBQU4sR0FDQSxPQUFBMEIsS0FBQXlaLFFBQUE3YSxJQUNBb0IsS0FBQXlaLFFBQUE3YSxHQUFBb1EsRUFBQTFRLEVBQ0EwQixPQUlBQSxLQUFBd1osTUFBQXpPLEtBQUFuTSxHQUlBb0IsS0FBQXlaLFFBQUE3YSxHQUFBLENBQ0FvUSxFQUFBMVEsRUFDQWpCLEVBQUEyQyxLQUFBd1osTUFBQTNYLE9BQUEsR0FFQTdCLE9BR0FzWixFQUFBcmEsVUFBQW1iLE9BQUEsV0FDQSxJQUFBaEIsRUFBQXBaLEtBQ0E2WixFQUFBLEVBQ0EsT0FDQUMsS0FBQSxXQUNBLElBQUFsYixFQUFBd2EsRUFBQUksTUFBQUssS0FDQSxPQUNBdmIsV0FBQW9WLElBQUE5VSxFQUFBd2EsRUFBQUssUUFBQTdhLEdBQUFvUSxPQUFBMEUsRUFDQXFHLFVBQUFyRyxJQUFBOVUsTUFPQWIsT0FBQUMsZUFBQXNiLEVBQUFyYSxVQUFBLFFBQ0FoQixZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBOEIsS0FBQXdaLE1BQUEzWCxVQUdBekUsRUFBQUQsUUFBQW1jLEtBR0FlLE1BQUExUSxJQUFBMlAsSUFPQVIsMENBQUFuSSxFQUFJMVIsVUFBQXFiLGVBQUEsU0FBQXRRLEdBQ0osT0FBQUEsS0FBQXVRLFFBQUF2YSxLQUFBbUQsV0FDQSxDQUNBcVgsWUFBQXhhLEtBQUFvRCxhQVFBMFYsMENBQUFuSSxFQUFJOEosaUJBQUEsU0FBQUMsRUFBQTFRLEdBQ0osSUFBQTdILEVBQWUyVywwQ0FBQW5JLEVBQUlqUCxXQUFBZ1osRUFBQUYsYUFDbkIsT0FBQXhRLEtBQUF1USxRQUFBcFksRUFBQWdCLFdBQUFoQixHQUdBcEUsT0FBQUMsZUFBc0I4YSwwQ0FBQW5JLEVBQUkxUixVQUFBLGFBQzFCWCxNQUFBLFNBRUEsSUFBQXFjLE9BQWE3QiwwQ0FBQW5JLEVBTWIsU0FBQWlLLGdCQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBM0YsVUFBQSxxQ0FFM0YsU0FBQTRGLGtCQUFBQyxFQUFBQyxHQUEyQyxRQUFBNWQsRUFBQSxFQUFnQkEsRUFBQTRkLEVBQUFwWixPQUFrQnhFLElBQUEsQ0FBTyxJQUFBNmQsRUFBQUQsRUFBQTVkLEdBQTJCNmQsRUFBQWpkLFdBQUFpZCxFQUFBamQsYUFBQSxFQUF3RGlkLEVBQUFDLGNBQUEsRUFBZ0MsVUFBQUQsTUFBQUUsVUFBQSxHQUF1RHJkLE9BQUFDLGVBQUFnZCxFQUFBRSxFQUFBdGMsSUFBQXNjLElBRTlQLFNBQUFHLGFBQUFQLEVBQUFRLEVBQUFDLEdBQWlNLE9BQXBJRCxHQUFBUCxrQkFBQUQsRUFBQTdiLFVBQUFxYyxHQUFzRUMsR0FBQVIsa0JBQUFELEVBQUFTLEdBQThEVCxFQUVqTSxJQUFBVSxPQUVBLFdBT0EsU0FBQUEsRUFBQWxkLEdBQ0FzYyxnQkFBQTVhLEtBQUF3YixHQUVBeGIsS0FBQTFCLFFBK0NBLE9BckNBK2MsYUFBQUcsRUFBQSxFQUNBNWMsSUFBQSxVQUNBTixNQUFBLFdBQ0EsT0FBQTBCLEtBQUExQixRQU1HLENBQ0hNLElBQUEsU0FDQU4sTUFBQSxXQUNBLE9BQUEwQixLQUFBMUIsUUFNRyxDQUNITSxJQUFBLGlCQUNBTixNQUFBLFNBQUEwTCxHQUNBLE9BQUFBLEtBQUF1USxTQUFBa0IsU0FBQXpiLEtBQUExQixPQUFBMEIsS0FBQTFCLE1BQ0EsQ0FDQW9kLGNBQUExYixLQUFBMUIsTUFBQThFLGVBT0csRUFDSHhFLElBQUEsbUJBQ0FOLE1BQUEsU0FBQW9jLEVBQUExUSxHQUNBLE9BQUFBLEtBQUF1USxRQUFBb0IsV0FBQWpCLEVBQUFnQixlQUFBLElBQUFGLEVBQUFHLFdBQUFqQixFQUFBZ0Isb0JBSUFGLEVBekRBLEdBNERBemQsT0FBQUMsZUFBQXdkLE9BQUF2YyxVQUFBLGFBQ0FYLE1BQUEsV0FFQSxJQUFBc2QsU0FBQUosT0FFQSxTQUFBSyxRQUFBM2IsR0FBd1UsT0FBdE8yYixRQUEzRSxtQkFBQXpkLFFBQUEsaUJBQUFBLE9BQUEwZCxTQUEyRSxTQUFBNWIsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQTlCLFFBQUE4QixFQUFBNmIsY0FBQTNkLFFBQUE4QixJQUFBOUIsT0FBQWEsVUFBQSxnQkFBQWlCLElBQW1JQSxHQUV4VSxTQUFBOGIsa0JBQUFuQixFQUFBQyxHQUFtRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBM0YsVUFBQSxxQ0FFN0YsU0FBQThHLG9CQUFBakIsRUFBQUMsR0FBNkMsUUFBQTVkLEVBQUEsRUFBZ0JBLEVBQUE0ZCxFQUFBcFosT0FBa0J4RSxJQUFBLENBQU8sSUFBQTZkLEVBQUFELEVBQUE1ZCxHQUEyQjZkLEVBQUFqZCxXQUFBaWQsRUFBQWpkLGFBQUEsRUFBd0RpZCxFQUFBQyxjQUFBLEVBQWdDLFVBQUFELE1BQUFFLFVBQUEsR0FBdURyZCxPQUFBQyxlQUFBZ2QsRUFBQUUsRUFBQXRjLElBQUFzYyxJQUVoUSxTQUFBZ0IsZUFBQXBCLEVBQUFRLEVBQUFDLEdBQXVNLE9BQXhJRCxHQUFBVyxvQkFBQW5CLEVBQUE3YixVQUFBcWMsR0FBd0VDLEdBQUFVLG9CQUFBbkIsRUFBQVMsR0FBZ0VULEVBRXZNLFNBQUFxQiwyQkFBQS9DLEVBQUE1YixHQUFpRCxPQUFBQSxHQUFBLFdBQUFxZSxRQUFBcmUsSUFBQSxtQkFBQUEsRUFBeUY0ZSx1QkFBQWhELEdBQWY1YixFQUUzSCxTQUFBNGUsdUJBQUFoRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBaUQsZUFBQSw2REFBeUYsT0FBQWpELEVBRXZKLFNBQUFrRCxnQkFBQXhlLEdBQWdMLE9BQW5Kd2UsZ0JBQUF2ZSxPQUFBd2UsZUFBQXhlLE9BQUF5ZSxlQUFBLFNBQUExZSxHQUFnRyxPQUFBQSxFQUFBMmUsV0FBQTFlLE9BQUF5ZSxlQUFBMWUsS0FBbURBLEdBRWhMLFNBQUE0ZSxVQUFBQyxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBekgsVUFBQSxzREFBNkV3SCxFQUFBMWQsVUFBQWxCLE9BQUFZLE9BQUFpZSxLQUFBM2QsVUFBQSxDQUF5RThjLFlBQUEsQ0FBZXpkLE1BQUFxZSxFQUFBdkIsVUFBQSxFQUFBRCxjQUFBLEtBQTBEeUIsR0FBQUMsZ0JBQUFGLEVBQUFDLEdBRXhVLFNBQUFDLGdCQUFBL2UsRUFBQXFCLEdBQTBJLE9BQTFHMGQsZ0JBQUE5ZSxPQUFBd2UsZ0JBQUEsU0FBQXplLEVBQUFxQixHQUE2RixPQUFqQnJCLEVBQUEyZSxVQUFBdGQsRUFBaUJyQixJQUFhQSxFQUFBcUIsR0FTMUksSUFBQTJkLFVBRUEsU0FBQUMsR0FHQSxTQUFBRCxFQUFBamQsRUFBQUMsR0FDQSxJQUFBa2QsRUFVQSxPQVJBaEIsa0JBQUFoYyxLQUFBOGMsR0FHQUUsRUFEQXJDLE9BQUExYSxPQUFBSixHQUNBc2MsMkJBQUFuYyxLQUFBc2MsZ0JBQUFRLEdBQUF0ZixLQUFBd0MsS0FBQUgsUUFBQUMsT0FFQXFjLDJCQUFBbmMsS0FBQXNjLGdCQUFBUSxHQUFBdGYsS0FBQXdDLEtBQUFILEVBQUFDLElBR0FxYywyQkFBQWEsR0FnR0EsT0E3R0FOLFVBQUFJLEVBOEdDbkMsUUF2RkR1QixlQUFBWSxFQUFBLEVBQ0FsZSxJQUFBLFNBQ0FOLE1BQUEsV0FDQSxPQUNBMmUsV0FBQWpkLEtBQUFvRCxjQVdHLENBQ0h4RSxJQUFBLGlCQUtBTixNQUFBLFdBQ0EsT0FDQTJlLFdBQUEsQ0FDQTFlLEVBQUF5QixLQUFBRixLQUNBekMsRUFBQTJDLEtBQUFILFNBUUcsRUFDSGpCLElBQUEsVUFDQU4sTUFBQSxTQUFBQSxHQUNBLFdBQUF3ZSxFQUFBbkMsT0FBQXJhLFFBQUFoQyxNQVVHLENBQ0hNLElBQUEsYUFDQU4sTUFBQSxTQUFBQSxHQUNBLFdBQUF3ZSxFQUFBbkMsT0FBQWphLFdBQUFwQyxNQVdHLENBQ0hNLElBQUEsV0FDQU4sTUFBQSxTQUFBK0MsRUFBQUMsR0FDQSxXQUFBd2IsRUFBQXpiLEVBQUFDLEtBV0csQ0FDSDFDLElBQUEsYUFDQU4sTUFBQSxTQUFBcUQsRUFBQXViLEdBQ0EsV0FBQUosRUFBQW5DLE9BQUFqWixXQUFBQyxFQUFBdWIsTUFFRyxDQUNIdGUsSUFBQSxtQkFDQU4sTUFBQSxTQUFBb2MsR0FDQSxXQUFBb0MsRUFBQXBDLEVBQUF1QyxXQUFBNWYsRUFBQXFkLEVBQUF1QyxXQUFBMWUsT0FJQXVlLEVBOUdBLEdBaUhBL2UsT0FBQUMsZUFBQThlLFVBQUE3ZCxVQUFBLGFBQ0FYLE1BQUEsY0FFQSxJQUFBNmUsVUFBQUwsVUFFQU0sV0FBQSxHQVVBLFNBQUFDLHlCQUFBMUwsR0FDQSxPQUFBQSxFQUFBdk8sV0FBQXdOLFFBQUEsMEJBR0EsU0FBQTBNLG9CQUFBbGIsR0FHQSxJQUZBLElBQUFELEVBQUEsSUFBQXhDLFdBQUF5QyxHQUVBL0UsRUFBQSxFQUFpQkEsRUFBQStFLElBQVUvRSxFQUMzQjhFLEVBQUE5RSxHQUFBbUUsS0FBQW1HLE1BQUEsSUFBQW5HLEtBQUFvUixVQUdBLE9BQUF6USxFQUdBLElBQUFpUSxZQUFBa0wsb0JBRUEsdUJBQUFwRSxlQUFBL0csUUFBQStHLE9BQUEvRyxPQUFBb0wsZ0JBQ0FuTCxZQUFBLFNBQUFoUSxHQUNBLE9BQUE4VyxPQUFBL0csT0FBQW9MLGdCQUFBLElBQUE1ZCxXQUFBeUMsU0FFQyxDQUNELElBQ0FnUSxZQUFBZ0wsV0FBQWhMLFlBQ0csTUFBQXhTLElBSUgsTUFBQXdTLGNBQ0FBLFlBQUFrTCxxQkFJQSxJQUFBRSxNQUFBLENBQ0FILGtEQUNBakwseUJBS0EsU0FBQXFMLG1CQUNBLFVBQUEzYixNQUFBLG1DQUdBLFNBQUE0YixzQkFDQSxVQUFBNWIsTUFBQSxxQ0FHQSxJQUFBNmIsaUJBQUFGLGlCQUNBRyxtQkFBQUYsb0JBVUEsU0FBQUcsV0FBQUMsR0FDQSxHQUFBSCxtQkFBQUksV0FFQSxPQUFBQSxXQUFBRCxFQUFBLEdBSUEsSUFBQUgsbUJBQUFGLG1CQUFBRSxtQkFBQUksV0FFQSxPQURBSixpQkFBQUksV0FDQUEsV0FBQUQsRUFBQSxHQUdBLElBRUEsT0FBQUgsaUJBQUFHLEVBQUEsR0FDRyxNQUFBbGUsR0FDSCxJQUVBLE9BQUErZCxpQkFBQW5nQixLQUFBLEtBQUFzZ0IsRUFBQSxHQUNLLE1BQUFsZSxHQUVMLE9BQUErZCxpQkFBQW5nQixLQUFBd0MsS0FBQThkLEVBQUEsS0FLQSxTQUFBRSxnQkFBQUMsR0FDQSxHQUFBTCxxQkFBQU0sYUFFQSxPQUFBQSxhQUFBRCxHQUlBLElBQUFMLHFCQUFBRixzQkFBQUUscUJBQUFNLGFBRUEsT0FEQU4sbUJBQUFNLGFBQ0FBLGFBQUFELEdBR0EsSUFFQSxPQUFBTCxtQkFBQUssR0FDRyxNQUFBcmUsR0FDSCxJQUVBLE9BQUFnZSxtQkFBQXBnQixLQUFBLEtBQUF5Z0IsR0FDSyxNQUFBcmUsR0FHTCxPQUFBZ2UsbUJBQUFwZ0IsS0FBQXdDLEtBQUFpZSxLQXhEQSxtQkFBQTlFLE9BQUE0RSxhQUNBSixpQkFBQUksWUFHQSxtQkFBQTVFLE9BQUErRSxlQUNBTixtQkFBQU0sY0F3REEsSUFBQUMsTUFBQSxHQUNBQyxVQUFBLEVBQ0FDLGFBQ0FDLFlBQUEsRUFFQSxTQUFBQyxrQkFDQUgsVUFBQUMsZUFJQUQsVUFBQSxFQUVBQyxhQUFBeGMsT0FDQXNjLE1BQUFFLGFBQUFqSixPQUFBK0ksT0FFQUcsWUFBQSxFQUdBSCxNQUFBdGMsUUFDQTJjLGNBSUEsU0FBQUEsYUFDQSxJQUFBSixTQUFBLENBSUEsSUFBQUssRUFBQVosV0FBQVUsaUJBQ0FILFVBQUEsRUFHQSxJQUZBLElBQUFNLEVBQUFQLE1BQUF0YyxPQUVBNmMsR0FBQSxDQUlBLElBSEFMLGFBQUFGLE1BQ0FBLE1BQUEsS0FFQUcsV0FBQUksR0FDQUwsY0FDQUEsYUFBQUMsWUFBQUssTUFJQUwsWUFBQSxFQUNBSSxFQUFBUCxNQUFBdGMsT0FHQXdjLGFBQUEsS0FDQUQsVUFBQSxFQUNBSixnQkFBQVMsSUFHQSxTQUFBRyxTQUFBZCxHQUNBLElBQUFlLEVBQUEsSUFBQTVLLE1BQUE2SyxVQUFBamQsT0FBQSxHQUVBLEdBQUFpZCxVQUFBamQsT0FBQSxFQUNBLFFBQUF4RSxFQUFBLEVBQW1CQSxFQUFBeWhCLFVBQUFqZCxPQUFzQnhFLElBQ3pDd2hCLEVBQUF4aEIsRUFBQSxHQUFBeWhCLFVBQUF6aEIsR0FJQThnQixNQUFBcFQsS0FBQSxJQUFBZ1UsS0FBQWpCLEVBQUFlLElBRUEsSUFBQVYsTUFBQXRjLFFBQUF1YyxVQUNBUCxXQUFBVyxZQUlBLFNBQUFPLEtBQUFqQixFQUFBdkUsR0FDQXZaLEtBQUE4ZCxNQUNBOWQsS0FBQXVaLFFBR0F3RixLQUFBOWYsVUFBQTBmLElBQUEsV0FDQTNlLEtBQUE4ZCxJQUFBa0IsTUFBQSxLQUFBaGYsS0FBQXVaLFFBR0EsSUFBQTBGLE1BQUEsVUFDQUMsU0FBQSxVQUNBQyxTQUFBLEVBQ0FDLElBQUEsR0FDQUMsS0FBQSxHQUNBL0ssUUFBQSxHQUVBZ0wsU0FBQSxHQUNBQyxRQUFBLEdBQ0FDLE9BQUEsR0FFQSxTQUFBQyxRQUVBLElBQUFDLEdBQUFELEtBQ0FFLFlBQUFGLEtBQ0FHLEtBQUFILEtBQ0EvSyxJQUFBK0ssS0FDQUksZUFBQUosS0FDQUssbUJBQUFMLEtBQ0FNLEtBQUFOLEtBQ0EsU0FBQU8sUUFBQXBpQixHQUNBLFVBQUFrRSxNQUFBLG9DQUVBLFNBQUFtZSxNQUNBLFVBRUEsU0FBQUMsTUFBQUMsR0FDQSxVQUFBcmUsTUFBQSxrQ0FFQSxTQUFBc2UsUUFDQSxTQUdBLElBQUFDLFlBQUFsSCxPQUFBa0gsYUFBQSxHQUVBQyxlQUFBRCxZQUFBRSxLQUFBRixZQUFBRyxRQUFBSCxZQUFBSSxPQUFBSixZQUFBSyxNQUFBTCxZQUFBTSxXQUFBLFdBQ0EsV0FBQXJVLE1BQUFFLFdBS0EsU0FBQW9VLE9BQUFDLEdBQ0EsSUFBQUMsRUFBQSxLQUFBUixlQUFBOWlCLEtBQUE2aUIsYUFDQVUsRUFBQXZmLEtBQUFtRyxNQUFBbVosR0FDQUUsRUFBQXhmLEtBQUFtRyxNQUFBbVosRUFBQSxPQVlBLE9BVkFELElBQ0FFLEdBQUFGLEVBQUEsSUFDQUcsR0FBQUgsRUFBQSxJQUVBLElBQ0FFLElBQ0FDLEdBQUEsTUFJQSxDQUFBRCxFQUFBQyxHQUVBLElBQUFDLFVBQUEsSUFBQTNVLEtBQ0EsU0FBQTRVLFNBR0EsT0FGQSxJQUFBNVUsS0FDQTJVLFdBQ0EsSUFFQSxJQUFBRSxRQUFBLENBQ0F2QyxrQkFDQUssWUFDQUUsZ0JBQ0FDLFFBQ0FDLFVBQ0EvSyxnQkFDQWdMLGtCQUNBSSxNQUNBQyx3QkFDQUMsVUFDQWxMLFFBQ0FtTCw4QkFDQUMsc0NBQ0FDLFVBQ0FDLGdCQUNBQyxRQUNBQyxZQUNBRSxZQUNBUSxjQUNBMUIsa0JBQ0FLLGdCQUNBQyxjQUNBMEIsZUFHQUUsU0FHQUEsU0FEQSxtQkFBQXJqQixPQUFBWSxPQUNBLFNBQUEwaUIsRUFBQUMsR0FFQUQsRUFBQUUsT0FBQUQsRUFDQUQsRUFBQXBpQixVQUFBbEIsT0FBQVksT0FBQTJpQixFQUFBcmlCLFVBQUEsQ0FDQThjLFlBQUEsQ0FDQXpkLE1BQUEraUIsRUFDQXBqQixZQUFBLEVBQ0FtZCxVQUFBLEVBQ0FELGNBQUEsTUFLQSxTQUFBa0csRUFBQUMsR0FDQUQsRUFBQUUsT0FBQUQsRUFFQSxJQUFBRSxFQUFBLGFBRUFBLEVBQUF2aUIsVUFBQXFpQixFQUFBcmlCLFVBQ0FvaUIsRUFBQXBpQixVQUFBLElBQUF1aUIsRUFDQUgsRUFBQXBpQixVQUFBOGMsWUFBQXNGLEdBSUEsSUFBQUksV0FBQUwsU0FFQSxTQUFBTSxVQUFBeGhCLEdBQThVLE9BQTFPd2hCLFVBQTNFLG1CQUFBdGpCLFFBQUEsaUJBQUFBLE9BQUEwZCxTQUEyRSxTQUFBNWIsR0FBb0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBb0MsT0FBQUEsR0FBQSxtQkFBQTlCLFFBQUE4QixFQUFBNmIsY0FBQTNkLFFBQUE4QixJQUFBOUIsT0FBQWEsVUFBQSxnQkFBQWlCLElBQW1JQSxHQUM5VSxJQUFBeWhCLGFBQUEsV0FDQSxTQUFBQyxPQUFBcFIsR0FDQSxJQUFBcVIsU0FBQXJSLEdBQUEsQ0FHQSxJQUZBLElBQUFzUixFQUFBLEdBRUF6a0IsRUFBQSxFQUFtQkEsRUFBQXloQixVQUFBamQsT0FBc0J4RSxJQUN6Q3lrQixFQUFBL1csS0FBQWdYLFFBQUFqRCxVQUFBemhCLEtBR0EsT0FBQXlrQixFQUFBalksS0FBQSxLQUdBeE0sRUFBQSxFQTBCQSxJQTFCQSxJQUNBd2hCLEVBQUFDLFVBQ0FKLEVBQUFHLEVBQUFoZCxPQUNBRixFQUFBa0wsT0FBQTJELEdBQUFJLFFBQUErUSxhQUFBLFNBQUE5TyxHQUNBLFVBQUFBLEVBQUEsVUFDQSxHQUFBeFYsR0FBQXFoQixFQUFBLE9BQUE3TCxFQUVBLE9BQUFBLEdBQ0EsU0FDQSxPQUFBaEcsT0FBQWdTLEVBQUF4aEIsTUFFQSxTQUNBLE9BQUEya0IsT0FBQW5ELEVBQUF4aEIsTUFFQSxTQUNBLElBQ0EsT0FBQTZSLEtBQUErUyxVQUFBcEQsRUFBQXhoQixNQUNTLE1BQUE2a0IsR0FDVCxtQkFHQSxRQUNBLE9BQUFyUCxLQUlBQSxFQUFBZ00sRUFBQXhoQixHQUF1QkEsRUFBQXFoQixFQUFTN0wsRUFBQWdNLElBQUF4aEIsR0FDaEM4a0IsT0FBQXRQLEtBQUF1UCxTQUFBdlAsR0FDQWxSLEdBQUEsSUFBQWtSLEVBRUFsUixHQUFBLElBQUFvZ0IsUUFBQWxQLEdBSUEsT0FBQWxSLEVBS0EsU0FBQTBnQixVQUFBMVEsRUFBQTJRLEdBRUEsR0FBQUMsWUFBQXBKLE9BQUFnSSxTQUNBLGtCQUNBLE9BQUFrQixVQUFBMVEsRUFBQTJRLEdBQUF0RCxNQUFBaGYsS0FBQThlLFlBSUEsSUFBQTBELEdBQUEsRUFjQSxPQVpBLFdBU0EsT0FSQUEsSUFFQXpVLFFBQUFDLE1BQUFzVSxHQUdBRSxHQUFBLEdBR0E3USxFQUFBcU4sTUFBQWhmLEtBQUE4ZSxZQUtBLElBQUEyRCxPQUFBLEdBQ0FDLGFBQ0EsU0FBQUMsU0FBQXhJLEdBSUEsR0FIQW9JLFlBQUFHLDZCQUFBdkIsUUFBQS9CLElBQUF3RCxZQUFBLElBQ0F6SSxJQUFBak4sZUFFQXVWLE9BQUF0SSxHQUNBLE9BQUFuSixPQUFBLE1BQUFtSixFQUFBLFdBQUFwTixLQUFBMlYsY0FBQSxDQUdBRCxPQUFBdEksR0FBQSxXQUNBLElBQUFtSSxFQUFBVixPQUFBNUMsTUFBQSxLQUFBRixXQUNBL1EsUUFBQUMsTUFBQSxZQUFBbU0sRUFKQSxFQUlBbUksU0FHQUcsT0FBQXRJLEdBQUEsYUFJQSxPQUFBc0ksT0FBQXRJLEdBWUEsU0FBQTRILFFBQUE3aEIsRUFBQWlSLEdBRUEsSUFBQTBSLEVBQUEsQ0FDQUMsS0FBQSxHQUNBQyxRQUFBQyxnQkFvQkEsT0FqQkFsRSxVQUFBamQsUUFBQSxJQUFBZ2hCLEVBQUFJLE1BQUFuRSxVQUFBLElBQ0FBLFVBQUFqZCxRQUFBLElBQUFnaEIsRUFBQUssT0FBQXBFLFVBQUEsSUFFQXFFLFVBQUFoUyxHQUVBMFIsRUFBQU8sV0FBQWpTLEVBQ0dBLEdBRUhrUyxRQUFBUixFQUFBMVIsR0FJQW9SLFlBQUFNLEVBQUFPLGNBQUFQLEVBQUFPLFlBQUEsR0FDQWIsWUFBQU0sRUFBQUksU0FBQUosRUFBQUksTUFBQSxHQUNBVixZQUFBTSxFQUFBSyxVQUFBTCxFQUFBSyxRQUFBLEdBQ0FYLFlBQUFNLEVBQUFTLGlCQUFBVCxFQUFBUyxlQUFBLEdBQ0FULEVBQUFLLFNBQUFMLEVBQUFFLFFBQUFRLGtCQUNBQyxZQUFBWCxFQUFBM2lCLEVBQUEyaUIsRUFBQUksT0ErQkEsU0FBQU0saUJBQUE1aEIsRUFBQThoQixHQUNBLElBQUFDLEVBQUEzQixRQUFBNEIsT0FBQUYsR0FFQSxPQUFBQyxFQUNBLEtBQUEzQixRQUFBbUIsT0FBQVEsR0FBQSxPQUFBL2hCLEVBQUEsS0FBQW9nQixRQUFBbUIsT0FBQVEsR0FBQSxPQUVBL2hCLEVBSUEsU0FBQXFoQixlQUFBcmhCLEVBQUE4aEIsR0FDQSxPQUFBOWhCLEVBR0EsU0FBQWlpQixZQUFBckssR0FDQSxJQUFBc0ssRUFBQSxHQUlBLE9BSEF0SyxFQUFBdE8sUUFBQSxTQUFBdEksRUFBQXNLLEdBQ0E0VyxFQUFBbGhCLElBQUEsSUFFQWtoQixFQUdBLFNBQUFMLFlBQUFYLEVBQUF2a0IsRUFBQXdsQixHQUdBLEdBQUFqQixFQUFBUyxlQUFBaGxCLEdBQUF5bEIsV0FBQXpsQixFQUFBeWpCLFVBQ0F6akIsRUFBQXlqQixxQkFDQXpqQixFQUFBeWQsYUFBQXpkLEVBQUF5ZCxZQUFBOWMsWUFBQVgsR0FBQSxDQUNBLElBQUEwbEIsRUFBQTFsQixFQUFBeWpCLFFBQUErQixFQUFBakIsR0FNQSxPQUpBaEIsU0FBQW1DLEtBQ0FBLEVBQUFSLFlBQUFYLEVBQUFtQixFQUFBRixJQUdBRSxFQUlBLElBQUFDLEVBQUFDLGdCQUFBckIsRUFBQXZrQixHQUVBLEdBQUEybEIsRUFDQSxPQUFBQSxFQUlBLElBQUEvSixFQUFBbmMsT0FBQW1jLEtBQUE1YixHQUNBNmxCLEVBQUFQLFlBQUExSixHQVFBLEdBTkEySSxFQUFBTyxhQUNBbEosRUFBQW5jLE9BQUFxbUIsb0JBQUE5bEIsSUFLQStsQixRQUFBL2xCLEtBQUE0YixFQUFBbFksUUFBQSxlQUFBa1ksRUFBQWxZLFFBQUEsbUJBQ0EsT0FBQXNpQixZQUFBaG1CLEdBSUEsT0FBQTRiLEVBQUFyWSxPQUFBLENBQ0EsR0FBQWtpQixXQUFBemxCLEdBQUEsQ0FDQSxJQUFBVixFQUFBVSxFQUFBVixLQUFBLEtBQUFVLEVBQUFWLEtBQUEsR0FDQSxPQUFBaWxCLEVBQUFFLFFBQUEsWUFBQW5sQixFQUFBLGVBR0EsR0FBQTJtQixTQUFBam1CLEdBQ0EsT0FBQXVrQixFQUFBRSxRQUFBL1IsT0FBQS9SLFVBQUFtRSxTQUFBNUYsS0FBQWMsR0FBQSxVQUdBLEdBQUFrbUIsT0FBQWxtQixHQUNBLE9BQUF1a0IsRUFBQUUsUUFBQXpXLEtBQUFyTixVQUFBbUUsU0FBQTVGLEtBQUFjLEdBQUEsUUFHQSxHQUFBK2xCLFFBQUEvbEIsR0FDQSxPQUFBZ21CLFlBQUFobUIsR0FJQSxJQTJDQW1tQixFQTNDQUMsRUFBQSxHQUNBbkwsR0FBQSxFQUNBb0wsRUFBQSxLQUFrQixNQUVsQnpQLFFBQUE1VyxLQUNBaWIsR0FBQSxFQUNBb0wsRUFBQSxXQUlBWixXQUFBemxCLE1BRUFvbUIsRUFBQSxjQURBcG1CLEVBQUFWLEtBQUEsS0FBQVUsRUFBQVYsS0FBQSxJQUNBLEtBa0JBLE9BZEEybUIsU0FBQWptQixLQUNBb21CLEVBQUEsSUFBQTFULE9BQUEvUixVQUFBbUUsU0FBQTVGLEtBQUFjLElBSUFrbUIsT0FBQWxtQixLQUNBb21CLEVBQUEsSUFBQXBZLEtBQUFyTixVQUFBMmxCLFlBQUFwbkIsS0FBQWMsSUFJQStsQixRQUFBL2xCLEtBQ0FvbUIsRUFBQSxJQUFBSixZQUFBaG1CLElBR0EsSUFBQTRiLEVBQUFyWSxRQUFBMFgsR0FBQSxHQUFBamIsRUFBQXVELE9BSUFpaUIsRUFBQSxFQUNBUyxTQUFBam1CLEdBQ0F1a0IsRUFBQUUsUUFBQS9SLE9BQUEvUixVQUFBbUUsU0FBQTVGLEtBQUFjLEdBQUEsVUFFQXVrQixFQUFBRSxRQUFBLHVCQUlBRixFQUFBQyxLQUFBL1gsS0FBQXpNLEdBSUFtbUIsRUFEQWxMLEVBQ0FzTCxZQUFBaEMsRUFBQXZrQixFQUFBd2xCLEVBQUFLLEVBQUFqSyxHQUVBQSxFQUFBdlEsSUFBQSxTQUFBL0ssR0FDQSxPQUFBa21CLGVBQUFqQyxFQUFBdmtCLEVBQUF3bEIsRUFBQUssRUFBQXZsQixFQUFBMmEsS0FJQXNKLEVBQUFDLEtBQUFpQyxNQUNBQyxxQkFBQVAsRUFBQUMsRUFBQUMsSUF2QkFBLEVBQUEsR0FBQUQsRUFBQUMsRUFBQSxHQTBCQSxTQUFBVCxnQkFBQXJCLEVBQUF2a0IsR0FDQSxHQUFBaWtCLFlBQUFqa0IsR0FBQSxPQUFBdWtCLEVBQUFFLFFBQUEseUJBRUEsR0FBQWxCLFNBQUF2akIsR0FBQSxDQUNBLElBQUEybUIsRUFBQSxJQUFBL1YsS0FBQStTLFVBQUEzakIsR0FBQXNTLFFBQUEsYUFBQUEsUUFBQSxZQUFBQSxRQUFBLGdCQUNBLE9BQUFpUyxFQUFBRSxRQUFBa0MsRUFBQSxVQUdBLE9BQUFDLFNBQUE1bUIsR0FBQXVrQixFQUFBRSxRQUFBLEdBQUF6a0IsRUFBQSxVQUNBNmtCLFVBQUE3a0IsR0FBQXVrQixFQUFBRSxRQUFBLEdBQUF6a0IsRUFBQSxXQUVBNmpCLE9BQUE3akIsR0FBQXVrQixFQUFBRSxRQUFBLHNCQUdBLFNBQUF1QixZQUFBaG1CLEdBQ0EsVUFBQXdELE1BQUE3QyxVQUFBbUUsU0FBQTVGLEtBQUFjLEdBQUEsSUFHQSxTQUFBdW1CLFlBQUFoQyxFQUFBdmtCLEVBQUF3bEIsRUFBQUssRUFBQWpLLEdBR0EsSUFGQSxJQUFBdUssRUFBQSxHQUVBcG5CLEVBQUEsRUFBQUMsRUFBQWdCLEVBQUF1RCxPQUFtQ3hFLEVBQUFDLElBQU9ELEVBQzFDNkIsZUFBQVosRUFBQXVPLE9BQUF4UCxJQUNBb25CLEVBQUExWixLQUFBK1osZUFBQWpDLEVBQUF2a0IsRUFBQXdsQixFQUFBSyxFQUFBdFgsT0FBQXhQLElBQUEsSUFFQW9uQixFQUFBMVosS0FBQSxJQVNBLE9BTEFtUCxFQUFBalAsUUFBQSxTQUFBck0sR0FDQUEsRUFBQXVtQixNQUFBLFVBQ0FWLEVBQUExWixLQUFBK1osZUFBQWpDLEVBQUF2a0IsRUFBQXdsQixFQUFBSyxFQUFBdmxCLEdBQUEsTUFHQTZsQixFQUdBLFNBQUFLLGVBQUFqQyxFQUFBdmtCLEVBQUF3bEIsRUFBQUssRUFBQXZsQixFQUFBMmEsR0FDQSxJQUFBM2IsRUFBQStELEVBQUF5akIsRUE2Q0EsSUE1Q0FBLEVBQUFybkIsT0FBQXNuQix5QkFBQS9tQixFQUFBTSxJQUFBLENBQ0FOLFFBQUFNLEtBR0FWLElBRUF5RCxFQURBeWpCLEVBQUFqTCxJQUNBMEksRUFBQUUsUUFBQSw2QkFFQUYsRUFBQUUsUUFBQSxzQkFHQXFDLEVBQUFqTCxNQUNBeFksRUFBQWtoQixFQUFBRSxRQUFBLHVCQUlBN2pCLGVBQUFpbEIsRUFBQXZsQixLQUNBaEIsRUFBQSxJQUFBZ0IsRUFBQSxLQUdBK0MsSUFDQWtoQixFQUFBQyxLQUFBOWdCLFFBQUFvakIsRUFBQTltQixPQUFBLEdBRUFxRCxFQURBd2dCLE9BQUEyQixHQUNBTixZQUFBWCxFQUFBdUMsRUFBQTltQixNQUFBLE1BRUFrbEIsWUFBQVgsRUFBQXVDLEVBQUE5bUIsTUFBQXdsQixFQUFBLElBR0E5aEIsUUFBQSxXQUVBTCxFQURBNFgsRUFDQTVYLEVBQUFnSyxNQUFBLE1BQUFoQyxJQUFBLFNBQUEyYixHQUNBLFdBQUFBLElBQ1d6YixLQUFBLE1BQUFtQixPQUFBLEdBRVgsS0FBQXJKLEVBQUFnSyxNQUFBLE1BQUFoQyxJQUFBLFNBQUEyYixHQUNBLFlBQUFBLElBQ1d6YixLQUFBLE9BSVhsSSxFQUFBa2hCLEVBQUFFLFFBQUEseUJBSUFSLFlBQUEza0IsR0FBQSxDQUNBLEdBQUEyYixHQUFBM2EsRUFBQXVtQixNQUFBLFNBQ0EsT0FBQXhqQixHQUdBL0QsRUFBQXNSLEtBQUErUyxVQUFBLEdBQUFyakIsSUFFQXVtQixNQUFBLGlDQUNBdm5CLElBQUFvTixPQUFBLEVBQUFwTixFQUFBaUUsT0FBQSxHQUNBakUsRUFBQWlsQixFQUFBRSxRQUFBbmxCLEVBQUEsVUFFQUEsSUFBQWdULFFBQUEsWUFBQUEsUUFBQSxZQUFBQSxRQUFBLGdCQUNBaFQsRUFBQWlsQixFQUFBRSxRQUFBbmxCLEVBQUEsV0FJQSxPQUFBQSxFQUFBLEtBQUErRCxFQUdBLFNBQUFxakIscUJBQUFQLEVBQUFDLEVBQUFDLEdBTUEsT0FMQUYsRUFBQWMsT0FBQSxTQUFBQyxFQUFBQyxHQUVBLE9BREFBLEVBQUF6akIsUUFBQSxNQUNBd2pCLEVBQUFDLEVBQUE3VSxRQUFBLHNCQUFBL08sT0FBQSxHQUNHLEdBRUgsR0FDQThpQixFQUFBLFNBQUFELEVBQUEsR0FBQUEsRUFBQSxXQUFBRCxFQUFBNWEsS0FBQSxhQUFBOGEsRUFBQSxHQUdBQSxFQUFBLEdBQUFELEVBQUEsSUFBQUQsRUFBQTVhLEtBQUEsVUFBQThhLEVBQUEsR0FLQSxTQUFBelAsUUFBQXdRLEdBQ0EsT0FBQXpSLE1BQUFpQixRQUFBd1EsR0FFQSxTQUFBdkMsVUFBQXdDLEdBQ0Esd0JBQUFBLEVBRUEsU0FBQXhELE9BQUF3RCxHQUNBLGNBQUFBLEVBRUEsU0FBQUMsa0JBQUFELEdBQ0EsYUFBQUEsRUFFQSxTQUFBVCxTQUFBUyxHQUNBLHVCQUFBQSxFQUVBLFNBQUE5RCxTQUFBOEQsR0FDQSx1QkFBQUEsRUFFQSxTQUFBRSxTQUFBRixHQUNBLGlCQUFBakUsVUFBQWlFLEdBRUEsU0FBQXBELFlBQUFvRCxHQUNBLGdCQUFBQSxFQUVBLFNBQUFwQixTQUFBelQsR0FDQSxPQUFBc1IsU0FBQXRSLElBQUEsb0JBQUFnVixlQUFBaFYsR0FFQSxTQUFBc1IsU0FBQXVELEdBQ0EsaUJBQUFqRSxVQUFBaUUsSUFBQSxPQUFBQSxFQUVBLFNBQUFuQixPQUFBN21CLEdBQ0EsT0FBQXlrQixTQUFBemtCLElBQUEsa0JBQUFtb0IsZUFBQW5vQixHQUVBLFNBQUEwbUIsUUFBQXprQixHQUNBLE9BQUF3aUIsU0FBQXhpQixLQUFBLG1CQUFBa21CLGVBQUFsbUIsaUJBQUFrQyxPQUVBLFNBQUFpaUIsV0FBQTRCLEdBQ0EseUJBQUFBLEVBRUEsU0FBQUksWUFBQUosR0FDQSxjQUFBQSxHQUFBLGtCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLGlCQUFBQSxHQUFBLFdBQUFqRSxVQUFBaUUsU0FDQSxJQUFBQSxFQUVBLFNBQUFLLFNBQUFDLEdBQ0EsT0FBQXBiLE9BQUFtYixTQUFBQyxHQUdBLFNBQUFILGVBQUFob0IsR0FDQSxPQUFBQyxPQUFBa0IsVUFBQW1FLFNBQUE1RixLQUFBTSxHQUdBLFNBQUFvb0IsSUFBQXBuQixHQUNBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQXNFLFNBQUEsSUFBQXRFLEVBQUFzRSxTQUFBLElBNVVBMmUsUUFBQW1CLE9BQUEsQ0FDQWlELEtBQUEsT0FDQUMsT0FBQSxPQUNBQyxVQUFBLE9BQ0FDLFFBQUEsT0FDQUMsTUFBQSxRQUNBQyxLQUFBLFFBQ0FDLE1BQUEsUUFDQUMsS0FBQSxRQUNBQyxLQUFBLFFBQ0FDLE1BQUEsUUFDQUMsUUFBQSxRQUNBQyxJQUFBLFFBQ0FDLE9BQUEsU0FHQWhGLFFBQUE0QixPQUFBLENBQ0FxRCxRQUFBLE9BQ0FuWixPQUFBLFNBQ0FvWixRQUFBLFNBQ0F2VCxVQUFBLE9BQ0F3VCxLQUFBLE9BQ0FDLE9BQUEsUUFDQUMsS0FBQSxVQUVBQyxPQUFBLE9Bc1RBLElBQUFDLE9BQUEsMEVBRUEsU0FBQUMsY0FDQSxJQUFBNXBCLEVBQUEsSUFBQTJPLEtBQ0FrYixFQUFBLENBQUF0QixJQUFBdm9CLEVBQUE4cEIsWUFBQXZCLElBQUF2b0IsRUFBQStwQixjQUFBeEIsSUFBQXZvQixFQUFBZ3FCLGVBQUE5ZCxLQUFBLEtBQ0EsT0FBQWxNLEVBQUFpcUIsVUFBQU4sT0FBQTNwQixFQUFBa3FCLFlBQUFMLEdBQUEzZCxLQUFBLEtBSUEsU0FBQS9CLE1BQ0FpRyxRQUFBakcsSUFBQSxVQUFBeWYsY0FBQTNGLE9BQUE1QyxNQUFBLEtBQUFGLFlBRUEsU0FBQXVFLFFBQUF0WixFQUFBdEgsR0FFQSxJQUFBQSxJQUFBMmYsU0FBQTNmLEdBQUEsT0FBQXNILEVBSUEsSUFIQSxJQUFBbVEsRUFBQW5jLE9BQUFtYyxLQUFBelgsR0FDQXBGLEVBQUE2YyxFQUFBclksT0FFQXhFLEtBQ0EwTSxFQUFBbVEsRUFBQTdjLElBQUFvRixFQUFBeVgsRUFBQTdjLElBR0EsT0FBQTBNLEVBR0EsU0FBQTdLLGVBQUFnQixFQUFBNG5CLEdBQ0EsT0FBQS9wQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUEwQyxFQUFBNG5CLEdBR0EsSUFBQUMsS0FBQSxDQUNBM0csU0FBQUssV0FDQTRCLGdCQUNBdmIsUUFDQWtlLGtCQUNBRCx3QkFDQWhDLHNCQUNBTSxnQkFDQUcsY0FDQXBDLGtCQUNBbUMsa0JBQ0FoQyx3QkFDQXNELGtCQUNBaEUsa0JBQ0FxRCxrQkFDQVUsb0NBQ0F6RCxjQUNBZ0Isb0JBQ0FqTyxnQkFDQTZNLGdCQUNBTSxvQkFDQVQsY0FDQWUsbUJBR0EsU0FBQXFGLGtCQUFBbk4sRUFBQUMsR0FBbUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQTNGLFVBQUEscUNBRTdGLFNBQUE4UyxvQkFBQWpOLEVBQUFDLEdBQTZDLFFBQUE1ZCxFQUFBLEVBQWdCQSxFQUFBNGQsRUFBQXBaLE9BQWtCeEUsSUFBQSxDQUFPLElBQUE2ZCxFQUFBRCxFQUFBNWQsR0FBMkI2ZCxFQUFBamQsV0FBQWlkLEVBQUFqZCxhQUFBLEVBQXdEaWQsRUFBQUMsY0FBQSxFQUFnQyxVQUFBRCxNQUFBRSxVQUFBLEdBQXVEcmQsT0FBQUMsZUFBQWdkLEVBQUFFLEVBQUF0YyxJQUFBc2MsSUFFaFEsU0FBQWdOLGVBQUFwTixFQUFBUSxFQUFBQyxHQUF1TSxPQUF4SUQsR0FBQTJNLG9CQUFBbk4sRUFBQTdiLFVBQUFxYyxHQUF3RUMsR0FBQTBNLG9CQUFBbk4sRUFBQVMsR0FBZ0VULEVBRXZNLElBQUFxTixTQUFlblAsNENBQUFySSxFQUFNOUYsT0FDckJ1ZCxjQUFBNUssTUFBQXBMLFlBQ0FpVyxZQUFBTixLQUFBMUYsVUFFQWlHLGVBQUFGLGNBQUEsR0FFQUcsa0JBQUEsSUFBQXZYLE9BQUEscUJBQ0F3WCxlQUFBLEVBRUEsSUFDQUwsbUJBQUFyZCxPQUFBMGQsZUFBQSxHQUNDLE1BQUE5YSxHQUNEOGEsZUFBQSxFQU1BLElBRkEsSUFBQUMsU0FBQSxHQUVBQyxHQUFBLEVBQWdCQSxHQUFBLElBQVVBLEtBQzFCRCxTQUFBQyxTQUFBLFdBQUFBLEdBQUF0bEIsU0FBQSxJQU9BLElBSEEsSUFBQXVsQixhQUFBLEdBQ0F0ckIsRUFBQSxFQUVBQSxFQUFBLElBQ0FzckIsYUFBQSxHQUFBdHJCLE9BR0EsS0FBQUEsRUFBQSxJQUNBc3JCLGFBQUEsR0FBQXRyQixHQUFBc3JCLGFBQUEsR0FBQXRyQixPQUdBLElBQUF1ckIsUUFBQVQsU0FFQSxTQUFBVSxhQUFBdmYsR0FDQSxPQUFBQSxFQUFBbEcsU0FBQSxPQUdBLFNBQUEwbEIsa0JBQUFDLEVBQUFsUCxHQUNBLElBQUFtUCxFQUFBRCxFQUFBbFAsR0FDQSxXQUFBMUUsVUFBQSxvQkFBQUMsT0FBQTJULEVBQUEsa0NBQUEzVCxPQUFBNFQsRUFBQSwyQkFBQTVULE9BQUEyVCxFQUFBbFUsV0FBQWdGLEdBQUEsdUVBT0EsSUFBQW9QLFNBRUEsV0FRQSxTQUFBQSxFQUFBN1gsR0FJQSxHQUhBNFcsa0JBQUFob0IsS0FBQWlwQixHQUdBN1gsYUFBQTZYLEVBQUEsT0FBQTdYLEVBRUEsU0FBQUEsR0FBQSxpQkFBQUEsRUFNQSxPQUpBcFIsS0FBQW9SLEdBQUE2WCxFQUFBQyxTQUFBOVgsUUFFQTZYLEVBQUFFLGlCQUFBbnBCLEtBQUFvcEIsS0FBQXBwQixLQUFBb0QsU0FBQSxTQU1BLElBQUFpbUIsRUFBQUosRUFBQUssUUFBQWxZLEdBRUEsSUFBQWlZLEdBQUEsTUFBQWpZLEVBQ0EsVUFBQStELFVBQUEsMkZBQ0ssR0FBQWtVLEdBQUEsaUJBQUFqWSxHQUFBLEtBQUFBLEVBQUF2UCxRQUFBMm1CLGNBQ0wsV0FBQVMsRUFBQWQsU0FBQXJkLEtBQUFzRyxFQUFBLFFBQ0ssR0FBQWlZLEdBQUEsaUJBQUFqWSxHQUFBLEtBQUFBLEVBQUF2UCxPQUNMLE9BQUFvbkIsRUFBQU0sb0JBQUFuWSxHQUNLLFNBQUFBLEdBQUEsS0FBQUEsRUFBQXZQLE9BR0EsVUFBQXVQLEtBQUFvWSxZQUVMLE9BQUFQLEVBQUFNLG9CQUFBblksRUFBQW9ZLGVBRUEsVUFBQXJVLFVBQUEsMkZBTEFuVixLQUFBb1IsS0FRQTZYLEVBQUFFLGlCQUFBbnBCLEtBQUFvcEIsS0FBQXBwQixLQUFBb0QsU0FBQSxRQTBSQSxPQWhSQThrQixlQUFBZSxFQUFBLEVBQ0FycUIsSUFBQSxjQUNBTixNQUFBLFdBQ0EsR0FBQTJxQixFQUFBRSxnQkFBQW5wQixLQUFBb3BCLEtBQUEsT0FBQXBwQixLQUFBb3BCLEtBQ0EsSUFBQUssRUFBQSxHQUVBLElBQUF6cEIsS0FBQW9SLEtBQUFwUixLQUFBb1IsR0FBQXZQLE9BQ0EsVUFBQXNULFVBQUEsOEVBQUFqRyxLQUFBK1MsVUFBQWppQixLQUFBb1IsSUFBQSxLQUdBLEdBQUFwUixLQUFBb1IsY0FBQXdYLFFBR0EsT0FGQWEsRUFBQVosYUFBQTdvQixLQUFBb1IsSUFDQTZYLEVBQUFFLGlCQUFBbnBCLEtBQUFvcEIsS0FBQUssR0FDQUEsRUFHQSxRQUFBQyxFQUFBLEVBQXVCQSxFQUFBMXBCLEtBQUFvUixHQUFBdlAsT0FBc0I2bkIsSUFBQSxDQUM3QyxJQUFBQyxFQUFBbEIsU0FBQXpvQixLQUFBb1IsR0FBQXlELFdBQUE2VSxJQUVBLG9CQUFBQyxFQUNBLE1BQUFiLGtCQUFBOW9CLEtBQUFvUixHQUFBc1ksR0FHQUQsR0FBQUUsRUFJQSxPQURBVixFQUFBRSxpQkFBQW5wQixLQUFBb3BCLEtBQUFLLEdBQ0FBLElBVUcsQ0FDSDdxQixJQUFBLFdBU0FOLE1BQUEsU0FBQXNqQixHQUVBLE9BQUE1aEIsS0FBQW9SLElBQUFwUixLQUFBb1IsR0FBQXdZLEtBQ0E1cEIsS0FBQW9SLEdBQUFoTyxTQUFBLGlCQUFBd2UsSUFBQSxPQUdBNWhCLEtBQUF3cEIsZ0JBU0csQ0FDSDVxQixJQUFBLFNBQ0FOLE1BQUEsV0FDQSxPQUFBMEIsS0FBQXdwQixnQkFVRyxDQUNINXFCLElBQUEsU0FDQU4sTUFBQSxTQUFBdXJCLEdBQ0EsT0FBQUEsYUFBQVosRUFDQWpwQixLQUFBb0QsYUFBQXltQixFQUFBem1CLFdBR0EsaUJBQUF5bUIsR0FBQVosRUFBQUssUUFBQU8sSUFBQSxLQUFBQSxFQUFBaG9CLFFBQUE3QixLQUFBb1IsY0FBQXdYLFFBQ0FpQixJQUFBN3BCLEtBQUFvUixHQUFBaE8sU0FBQSxVQUdBLGlCQUFBeW1CLEdBQUFaLEVBQUFLLFFBQUFPLElBQUEsS0FBQUEsRUFBQWhvQixPQUNBZ29CLEVBQUFoYixnQkFBQTdPLEtBQUF3cEIsY0FHQSxpQkFBQUssR0FBQVosRUFBQUssUUFBQU8sSUFBQSxLQUFBQSxFQUFBaG9CLE9BQ0Fnb0IsSUFBQTdwQixLQUFBb1IsS0FHQSxNQUFBeVksa0JBQUFaLEdBQUFZLEVBQUFMLGVBQ0FLLEVBQUFMLGdCQUFBeHBCLEtBQUF3cEIsZ0JBWUcsQ0FDSDVxQixJQUFBLGVBQ0FOLE1BQUEsV0FDQSxJQUFBNmUsRUFBQSxJQUFBN1EsS0FDQWtiLEVBQUF4bkIsS0FBQW9SLEdBQUEwWSxhQUFBLEdBRUEsT0FEQTNNLEVBQUE0TSxRQUFBLElBQUF2b0IsS0FBQW1HLE1BQUE2ZixJQUNBckssSUFNRyxDQUNIdmUsSUFBQSxpQkFLQU4sTUFBQSxXQUNBLE9BQUEwQixLQUFBd3BCLFlBQUEsQ0FDQVEsS0FBQWhxQixLQUFBd3BCLGVBRUEsQ0FDQVEsS0FBQWhxQixLQUFBb0QsU0FBQSxXQU9HLEVBQ0h4RSxJQUFBLFNBQ0FOLE1BQUEsV0FDQSxPQUFBMnFCLEVBQUFwUCxPQUFBb1AsRUFBQXBQLE1BQUEsY0FVRyxDQUNIamIsSUFBQSxXQUNBTixNQUFBLFNBQUFrcEIsR0FDQSxpQkFBQUEsSUFDQUEsS0FBQWxiLEtBQUFpVSxNQUFBLE1BR0EsSUFBQTBKLEVBQUFoQixFQUFBaUIsU0FDQUMsRUFBQWhDLFNBQUFpQyxNQUFBLElBZ0JBLE9BZEFELEVBQUEsT0FBQTNDLEVBQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE1BQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE9BQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE9BRUEyQyxFQUFBLEdBQUE3QixlQUFBLEdBQ0E2QixFQUFBLEdBQUE3QixlQUFBLEdBQ0E2QixFQUFBLEdBQUE3QixlQUFBLEdBQ0E2QixFQUFBLEdBQUE3QixlQUFBLEdBQ0E2QixFQUFBLEdBQUE3QixlQUFBLEdBRUE2QixFQUFBLFFBQUFGLEVBQ0FFLEVBQUEsSUFBQUYsR0FBQSxNQUNBRSxFQUFBLEdBQUFGLEdBQUEsT0FDQUUsSUFFRyxDQUNIdnJCLElBQUEsV0FDQU4sTUFBQSxXQUNBLFdBQUEycUIsSUFVRyxDQUNIcnFCLElBQUEsaUJBQ0FOLE1BQUEsU0FBQWtwQixHQUNBLElBQUEyQyxFQUFBaEMsU0FBQXJkLEtBQUEsMkJBT0EsT0FMQXFmLEVBQUEsT0FBQTNDLEVBQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE1BQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE9BQ0EyQyxFQUFBLEdBQUEzQyxHQUFBLE9BRUEsSUFBQXlCLEVBQUFrQixLQVVHLENBQ0h2ckIsSUFBQSxzQkFDQU4sTUFBQSxTQUFBNm9CLEdBRUEsWUFBQUEsR0FBQSxNQUFBQSxHQUFBLEtBQUFBLEVBQUF0bEIsT0FDQSxVQUFBc1QsVUFBQSwyRkFJQSxHQUFBcVQsY0FBQSxXQUFBUyxFQUFBZCxTQUFBcmQsS0FBQXFjLEVBQUEsUUFNQSxJQUpBLElBQUE1TixFQUFBLElBQUFxUCxRQUFBLElBQ0E5cEIsRUFBQSxFQUNBekIsRUFBQSxFQUVBQSxFQUFBLElBQ0FrYyxFQUFBemEsS0FBQTZwQixhQUFBeEIsRUFBQXRTLFdBQUF4WCxPQUFBLEVBQUFzckIsYUFBQXhCLEVBQUF0UyxXQUFBeFgsTUFHQSxXQUFBNHJCLEVBQUExUCxLQVNHLENBQ0gzYSxJQUFBLFVBQ0FOLE1BQUEsU0FBQThTLEdBQ0EsYUFBQUEsSUFFQSxpQkFBQUEsSUFJQSxpQkFBQUEsRUFDQSxLQUFBQSxFQUFBdlAsUUFBQSxLQUFBdVAsRUFBQXZQLFFBQUEwbUIsa0JBQUF4YixLQUFBcUUsR0FHQUEsYUFBQTZYLElBSUE3WCxhQUFBd1gsU0FBQSxLQUFBeFgsRUFBQXZQLFVBS0F1UCxFQUFBb1ksY0FDQSxLQUFBcFksS0FBQXZQLFFBQUEsS0FBQXVQLEtBQUF2UCxRQUFBMG1CLGtCQUFBeGIsS0FBQXFFLFlBS0csQ0FDSHhTLElBQUEsbUJBQ0FOLE1BQUEsU0FBQW9jLEdBQ0EsV0FBQXVPLEVBQUF2TyxFQUFBc1AsVUFJQWYsRUFwVUEsR0F3VUFBLFNBQUFvQixRQUFBaEMsWUFBQSxXQUNBLE9BQUFZLFNBQUFpQixVQUNDLHFEQUNEakIsU0FBQWhxQixVQUFBb3JCLFFBQUFoQyxZQUFBLFdBQ0EsT0FBQVksU0FBQWlCLFVBQ0MscURBQ0RqQixTQUFBaHFCLFVBQUFpckIsT0FBQTdCLFlBQUEsV0FDQSxPQUFBWSxTQUFBaUIsVUFDQyxxREFDRGpCLFNBQUFocUIsVUFBQWlxQixTQUFBYixZQUFBLFNBQUFiLEdBQ0EsT0FBQXlCLFNBQUFDLFNBQUExQixJQUNDLDJEQUtEenBCLE9BQUFDLGVBQUFpckIsU0FBQWhxQixVQUFBLGtCQUNBaEIsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQThCLEtBQUFvUixHQUFBLEdBQUFwUixLQUFBb1IsR0FBQSxNQUFBcFIsS0FBQW9SLEdBQUEsT0FBQXBSLEtBQUFvUixHQUFBLFFBRUErSSxJQUFBLFNBQUE3YixHQUVBMEIsS0FBQW9SLEdBQUEsT0FBQTlTLEVBQ0EwQixLQUFBb1IsR0FBQSxHQUFBOVMsR0FBQSxNQUNBMEIsS0FBQW9SLEdBQUEsR0FBQTlTLEdBQUEsT0FDQTBCLEtBQUFvUixHQUFBLEdBQUE5UyxHQUFBLFVBVUEycUIsU0FBQWhxQixVQUFBOG9CLEtBQUFoRyxRQUFBdUksUUFBQSxXQUFBckIsU0FBQWhxQixVQUFBbUUsU0FLQTZsQixTQUFBcFAsU0FBQSxTQUFBclksS0FBQW9SLFVBSUE3VSxPQUFBQyxlQUFBaXJCLFNBQUFocUIsVUFBQSxhQUNBWCxNQUFBLGFBRUEsSUFBQWlzQixTQUFBdEIsU0FFQSxTQUFBdUIsa0JBQUEzUCxFQUFBQyxHQUFtRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBM0YsVUFBQSxxQ0FFN0YsU0FBQXNWLG9CQUFBelAsRUFBQUMsR0FBNkMsUUFBQTVkLEVBQUEsRUFBZ0JBLEVBQUE0ZCxFQUFBcFosT0FBa0J4RSxJQUFBLENBQU8sSUFBQTZkLEVBQUFELEVBQUE1ZCxHQUEyQjZkLEVBQUFqZCxXQUFBaWQsRUFBQWpkLGFBQUEsRUFBd0RpZCxFQUFBQyxjQUFBLEVBQWdDLFVBQUFELE1BQUFFLFVBQUEsR0FBdURyZCxPQUFBQyxlQUFBZ2QsRUFBQUUsRUFBQXRjLElBQUFzYyxJQUVoUSxTQUFBd1AsZUFBQTVQLEVBQUFRLEVBQUFDLEdBQXVNLE9BQXhJRCxHQUFBbVAsb0JBQUEzUCxFQUFBN2IsVUFBQXFjLEdBQXdFQyxHQUFBa1Asb0JBQUEzUCxFQUFBUyxHQUFnRVQsRUFFdk0sU0FBQTZQLFlBQUFocEIsR0FDQSxPQUFBQSxFQUFBZ0ssTUFBQSxJQUFBaWYsT0FBQS9nQixLQUFBLElBT0EsSUFBQWdoQixXQUVBLFdBT0EsU0FBQUEsRUFBQUMsRUFBQTlnQixHQUNBd2dCLGtCQUFBeHFCLEtBQUE2cUIsR0FHQTdxQixLQUFBOHFCLFdBQUEsR0FDQTlxQixLQUFBZ0ssVUFBQTJnQixZQUFBM2dCLEdBQUEsR0FFQSxRQUFBM00sRUFBQSxFQUFtQkEsRUFBQTJDLEtBQUFnSyxRQUFBbkksT0FBeUJ4RSxJQUM1QyxTQUFBMkMsS0FBQWdLLFFBQUEzTSxJQUFBLE1BQUEyQyxLQUFBZ0ssUUFBQTNNLElBQUEsTUFBQTJDLEtBQUFnSyxRQUFBM00sSUFBQSxNQUFBMkMsS0FBQWdLLFFBQUEzTSxJQUFBLE1BQUEyQyxLQUFBZ0ssUUFBQTNNLElBQUEsTUFBQTJDLEtBQUFnSyxRQUFBM00sR0FDQSxVQUFBeUUsTUFBQSxrQ0FBQXNULE9BQUFwVixLQUFBZ0ssUUFBQTNNLEdBQUEsdUJBOEJBLE9BckJBcXRCLGVBQUFHLEVBQUEsRUFDQWpzQixJQUFBLGlCQUNBTixNQUFBLFdBQ0EsT0FDQXlzQixtQkFBQSxDQUNBRCxRQUFBOXFCLEtBQUE4cUIsUUFDQTlnQixRQUFBaEssS0FBQWdLLGFBUUcsRUFDSHBMLElBQUEsbUJBQ0FOLE1BQUEsU0FBQW9jLEdBQ0EsV0FBQW1RLEVBQUFuUSxFQUFBcVEsbUJBQUFELFFBQUFwUSxFQUFBcVEsbUJBQUEvZ0IsUUFBQTJCLE1BQUEsSUFBQWlmLE9BQUEvZ0IsS0FBQSxTQUlBZ2hCLEVBOUNBLEdBaURBOXNCLE9BQUFDLGVBQUE2c0IsV0FBQTVyQixVQUFBLGFBQ0FYLE1BQUEsZUFFQSxJQUFBK29CLE9BQUF3RCxXQU1BLFNBQUFHLGtCQUFBblEsRUFBQUMsR0FBbUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQTNGLFVBQUEscUNBRTdGLFNBQUE4VixvQkFBQWpRLEVBQUFDLEdBQTZDLFFBQUE1ZCxFQUFBLEVBQWdCQSxFQUFBNGQsRUFBQXBaLE9BQWtCeEUsSUFBQSxDQUFPLElBQUE2ZCxFQUFBRCxFQUFBNWQsR0FBMkI2ZCxFQUFBamQsV0FBQWlkLEVBQUFqZCxhQUFBLEVBQXdEaWQsRUFBQUMsY0FBQSxFQUFnQyxVQUFBRCxNQUFBRSxVQUFBLEdBQXVEcmQsT0FBQUMsZUFBQWdkLEVBQUFFLEVBQUF0YyxJQUFBc2MsSUFFaFEsU0FBQWdRLGVBQUFwUSxFQUFBUSxFQUFBQyxHQUF1TSxPQUF4SUQsR0FBQTJQLG9CQUFBblEsRUFBQTdiLFVBQUFxYyxHQUF3RUMsR0FBQTBQLG9CQUFBblEsRUFBQVMsR0FBZ0VULEVBRXZNLElBQUFxUSxXQUVBLFdBTUEsU0FBQUEsRUFBQTdzQixHQUNBMHNCLGtCQUFBaHJCLEtBQUFtckIsR0FFQW5yQixLQUFBMUIsUUFnRUEsT0F0REE0c0IsZUFBQUMsRUFBQSxFQUNBdnNCLElBQUEsVUFDQU4sTUFBQSxXQUNBLE9BQUEwQixLQUFBMUIsUUFNRyxDQUNITSxJQUFBLFdBQ0FOLE1BQUEsV0FDQSxPQUFBMEIsS0FBQTFCLFFBTUcsQ0FDSE0sSUFBQSxVQUNBTixNQUFBLFdBQ0EsT0FBQTBCLEtBQUExQixRQU1HLENBQ0hNLElBQUEsU0FDQU4sTUFBQSxXQUNBLE9BQUEwQixLQUFBMUIsUUFNRyxDQUNITSxJQUFBLGlCQUNBTixNQUFBLFdBQ0EsT0FDQThzQixRQUFBcHJCLEtBQUExQixVQU9HLEVBQ0hNLElBQUEsbUJBQ0FOLE1BQUEsU0FBQW9jLEdBQ0EsV0FBQXlRLEVBQUF6USxFQUFBMFEsYUFJQUQsRUF6RUEsR0E0RUFwdEIsT0FBQUMsZUFBQW10QixXQUFBbHNCLFVBQUEsYUFDQVgsTUFBQSxXQUVBLElBQUErc0IsT0FBQUYsV0FNQSxTQUFBRyxrQkFBQXpRLEVBQUFDLEdBQW1ELEtBQUFELGFBQUFDLEdBQTBDLFVBQUEzRixVQUFBLHFDQUU3RixTQUFBb1csb0JBQUF2USxFQUFBQyxHQUE2QyxRQUFBNWQsRUFBQSxFQUFnQkEsRUFBQTRkLEVBQUFwWixPQUFrQnhFLElBQUEsQ0FBTyxJQUFBNmQsRUFBQUQsRUFBQTVkLEdBQTJCNmQsRUFBQWpkLFdBQUFpZCxFQUFBamQsYUFBQSxFQUF3RGlkLEVBQUFDLGNBQUEsRUFBZ0MsVUFBQUQsTUFBQUUsVUFBQSxHQUF1RHJkLE9BQUFDLGVBQUFnZCxFQUFBRSxFQUFBdGMsSUFBQXNjLElBRWhRLFNBQUFzUSxlQUFBMVEsRUFBQVEsRUFBQUMsR0FBdU0sT0FBeElELEdBQUFpUSxvQkFBQXpRLEVBQUE3YixVQUFBcWMsR0FBd0VDLEdBQUFnUSxvQkFBQXpRLEVBQUFTLEdBQWdFVCxFQUV2TSxJQUFBMlEsTUFFQSxXQU9BLFNBQUFBLEVBQUFudEIsR0FDQWd0QixrQkFBQXRyQixLQUFBeXJCLEdBRUF6ckIsS0FBQTFCLFFBK0NBLE9BckNBa3RCLGVBQUFDLEVBQUEsRUFDQTdzQixJQUFBLFVBQ0FOLE1BQUEsV0FDQSxPQUFBMEIsS0FBQTFCLFFBTUcsQ0FDSE0sSUFBQSxTQUNBTixNQUFBLFdBQ0EsT0FBQTBCLEtBQUExQixRQU1HLENBQ0hNLElBQUEsaUJBQ0FOLE1BQUEsU0FBQTBMLEdBQ0EsT0FBQUEsS0FBQXVRLFFBQUF2YSxLQUFBMUIsTUFDQSxDQUNBb3RCLFdBQUExckIsS0FBQTFCLE1BQUE4RSxlQU9HLEVBQ0h4RSxJQUFBLG1CQUNBTixNQUFBLFNBQUFvYyxFQUFBMVEsR0FDQSxPQUFBQSxLQUFBdVEsUUFBQWpZLFNBQUFvWSxFQUFBZ1IsV0FBQSxRQUFBRCxFQUFBL1EsRUFBQWdSLGdCQUlBRCxFQXpEQSxHQTREQTF0QixPQUFBQyxlQUFBeXRCLE1BQUF4c0IsVUFBQSxhQUNBWCxNQUFBLFVBRUEsSUFBQXF0QixPQUFBRixNQU1BLFNBQUFHLGtCQUFBL1EsRUFBQUMsR0FBbUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQTNGLFVBQUEscUNBRTdGLFNBQUEwVyxvQkFBQTdRLEVBQUFDLEdBQTZDLFFBQUE1ZCxFQUFBLEVBQWdCQSxFQUFBNGQsRUFBQXBaLE9BQWtCeEUsSUFBQSxDQUFPLElBQUE2ZCxFQUFBRCxFQUFBNWQsR0FBMkI2ZCxFQUFBamQsV0FBQWlkLEVBQUFqZCxhQUFBLEVBQXdEaWQsRUFBQUMsY0FBQSxFQUFnQyxVQUFBRCxNQUFBRSxVQUFBLEdBQXVEcmQsT0FBQUMsZUFBQWdkLEVBQUFFLEVBQUF0YyxJQUFBc2MsSUFFaFEsU0FBQTRRLGVBQUFoUixFQUFBUSxFQUFBQyxHQUF1TSxPQUF4SUQsR0FBQXVRLG9CQUFBL1EsRUFBQTdiLFVBQUFxYyxHQUF3RUMsR0FBQXNRLG9CQUFBL1EsRUFBQVMsR0FBZ0VULEVBRXZNLElBQUFpUixLQUVBLFdBUUEsU0FBQUEsRUFBQXhoQixFQUFBeWhCLEdBQ0FKLGtCQUFBNXJCLEtBQUErckIsR0FFQS9yQixLQUFBdUssT0FDQXZLLEtBQUFnc0IsUUE0Q0EsT0FyQ0FGLGVBQUFDLEVBQUEsRUFDQW50QixJQUFBLFNBQ0FOLE1BQUEsV0FDQSxPQUNBMHRCLE1BQUFoc0IsS0FBQWdzQixNQUNBemhCLEtBQUF2SyxLQUFBdUssUUFPRyxDQUNIM0wsSUFBQSxpQkFDQU4sTUFBQSxXQUNBLE9BQUEwQixLQUFBZ3NCLE1BQ0EsQ0FDQUMsTUFBQWpzQixLQUFBdUssS0FDQTJoQixPQUFBbHNCLEtBQUFnc0IsT0FJQSxDQUNBQyxNQUFBanNCLEtBQUF1SyxTQU9HLEVBQ0gzTCxJQUFBLG1CQUNBTixNQUFBLFNBQUFvYyxHQUNBLFdBQUFxUixFQUFBclIsRUFBQXVSLE1BQUF2UixFQUFBd1IsWUFJQUgsRUF4REEsR0EyREFodUIsT0FBQUMsZUFBQSt0QixLQUFBOXNCLFVBQUEsYUFDQVgsTUFBQSxTQUVBLElBQUFpTSxLQUFBd2hCLEtBRUFJLFNBQWVuVCw0Q0FBQXJJLEVBQU05RixPQUNyQnVoQixvQkFBQSxnREFDQUMsaUJBQUEsMkJBQ0FDLGlCQUFBLGdCQUNBQyxhQUFBLEtBQ0FDLGNBQUEsS0FDQUMsY0FBQSxLQUNBQyxXQUFBLEdBRUFDLFdBQUEsb0NBQUFDLFVBRUFDLG9CQUFBLG9DQUFBRCxVQUNBRSxvQkFBQSxvQ0FBQUYsVUFDQUcsZUFBQSxrQkFFQSxTQUFBQyxRQUFBMXVCLEdBQ0EsT0FBQXFDLE1BQUEyQixTQUFBaEUsRUFBQSxLQUlBLFNBQUEydUIsV0FBQTN1QixHQUNBLElBQUE0dUIsRUFBQXZTLE9BQUFqYSxXQUFBLEtBRUF5c0IsRUFBQXhTLE9BQUFqYSxXQUFBLEdBRUEsS0FBQXBDLEVBQUE4dUIsTUFBQSxJQUFBOXVCLEVBQUE4dUIsTUFBQSxJQUFBOXVCLEVBQUE4dUIsTUFBQSxJQUFBOXVCLEVBQUE4dUIsTUFBQSxJQUNBLE9BQ0FDLFNBQUEvdUIsRUFDQXNGLElBQUF1cEIsR0FJQSxRQUFBOXZCLEVBQUEsRUFBaUJBLEdBQUEsRUFBUUEsSUFJekI4dkIsR0FGQUEsSUFBQXprQixVQUFBLEtBRUFqRyxJQUFBLElBQUFrWSxPQUFBcmMsRUFBQTh1QixNQUFBL3ZCLEdBQUEsSUFDQWlCLEVBQUE4dUIsTUFBQS92QixHQUFBOHZCLEVBQUExcEIsSUFBQXlwQixHQUFBcnRCLElBQ0FzdEIsSUFBQWhsQixPQUFBK2tCLEdBR0EsT0FDQUcsU0FBQS91QixFQUNBc0YsSUFBQXVwQixHQUtBLFNBQUFHLGFBQUFDLEVBQUFDLEdBQ0EsSUFBQUQsSUFBQUMsRUFDQSxPQUNBMXRCLEtBQUE2YSxPQUFBamEsV0FBQSxHQUNBYixJQUFBOGEsT0FBQWphLFdBQUEsSUFJQSxJQUFBK3NCLEVBQUFGLEVBQUExa0IsbUJBQUEsSUFDQTZrQixFQUFBLElBQUEvUyxPQUFBNFMsRUFBQXRwQixhQUFBLEdBQ0EwcEIsRUFBQUgsRUFBQTNrQixtQkFBQSxJQUNBK2tCLEVBQUEsSUFBQWpULE9BQUE2UyxFQUFBdnBCLGFBQUEsR0FDQTRwQixFQUFBSixFQUFBN21CLFNBQUErbUIsR0FDQUcsRUFBQUwsRUFBQTdtQixTQUFBZ25CLEdBQ0FHLEVBQUFMLEVBQUE5bUIsU0FBQSttQixHQUNBSyxFQUFBTixFQUFBOW1CLFNBQUFnbkIsR0FNQSxPQUxBQyxJQUFBcHJCLElBQUFxckIsRUFBQWpsQixtQkFBQSxLQUNBaWxCLEVBQUEsSUFBQW5ULE9BQUFtVCxFQUFBN3BCLGFBQUEsR0FBQXhCLElBQUFzckIsR0FBQXRyQixJQUFBdXJCLEVBQUFubEIsbUJBQUEsS0FJQSxDQUNBL0ksS0FKQSt0QixJQUFBcHJCLElBQUFxckIsRUFBQWpsQixtQkFBQSxLQUtBaEosSUFKQW11QixFQUFBRixFQUFBcGxCLFVBQUEsSUFBQWpHLElBQUEsSUFBQWtZLE9BQUFxVCxFQUFBL3BCLGFBQUEsS0FRQSxTQUFBYSxTQUFBeW9CLEVBQUFDLEdBRUEsSUFBQVMsRUFBQVYsRUFBQXp0QixPQUFBLEVBQ0FvdUIsRUFBQVYsRUFBQTF0QixPQUFBLEVBRUEsT0FBQW11QixFQUFBQyxHQUVHRCxJQUFBQyxHQUNIWCxFQUFBMXRCLE1BQUEsRUFDQTJ0QixFQUFBM3RCLE1BQUEsRUFPQSxTQUFBc3VCLFdBQUFoSCxFQUFBN1osR0FDQSxVQUFBNkgsVUFBQSxJQUFBQyxPQUFBK1IsRUFBQSx5Q0FBQS9SLE9BQUE5SCxJQVdBLFNBQUE4Z0IsV0FBQTlrQixHQUNBdEosS0FBQXNKLFFBV0E4a0IsV0FBQTFzQixXQUFBLFNBQUF5bEIsR0FFQSxJQWdDQWtILEVBaENBL3FCLEdBQUEsRUFDQWdyQixHQUFBLEVBQ0FDLEdBQUEsRUFFQUMsRUFBQSxFQUVBQyxFQUFBLEVBRUFDLEVBQUEsRUFFQUMsRUFBQSxFQUVBQyxFQUFBLEVBRUE5cUIsRUFBQSxJQUVBK3FCLEVBQUEsRUFFQUMsRUFBQSxFQUVBQyxFQUFBLEVBRUFDLEVBQUEsRUFFQUMsRUFBQSxFQUVBNXhCLEVBQUEsRUFFQTZ4QixFQUFBLE1BRUFDLEVBQUEsTUFJQXRWLEVBQUEsRUFJQSxHQUFBc04sRUFBQXRsQixRQUFBLElBQ0EsVUFBQXNULFVBQUFnUyxFQUFBLGtDQUlBLElBQUFpSSxFQUFBakksRUFBQWhDLE1BQUFpSCxxQkFDQWlELEVBQUFsSSxFQUFBaEMsTUFBQWtILGtCQUNBaUQsRUFBQW5JLEVBQUFoQyxNQUFBbUgsa0JBRUEsSUFBQThDLElBQUFDLElBQUFDLEdBQUEsSUFBQW5JLEVBQUF0bEIsT0FDQSxVQUFBc1QsVUFBQWdTLEVBQUEsa0NBR0EsR0FBQWlJLEVBQUEsQ0FHQSxJQUFBRyxFQUFBSCxFQUFBLEdBR0F4dkIsRUFBQXd2QixFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUVBeHZCLFFBQUE4VCxJQUFBK2IsR0FBQXRCLFdBQUFoSCxFQUFBLDBCQUVBdm5CLFFBQUE4VCxJQUFBNmIsR0FBQXBCLFdBQUFoSCxFQUFBLDhCQUVBelQsSUFBQTlULElBQUE0dkIsR0FBQUMsSUFDQXRCLFdBQUFoSCxFQUFBLDZCQVVBLEdBTEEsTUFBQUEsRUFBQXROLElBQUEsTUFBQXNOLEVBQUF0TixLQUNBdlcsRUFBQSxNQUFBNmpCLEVBQUF0TixPQUlBbVQsUUFBQTdGLEVBQUF0TixLQUFBLE1BQUFzTixFQUFBdE4sR0FBQSxDQUNBLFNBQUFzTixFQUFBdE4sSUFBQSxNQUFBc04sRUFBQXROLEdBQ0EsV0FBQXVVLFdBQUFqQyxTQUFBcmhCLEtBQUF4SCxFQUFBdXBCLG9CQUFBQyxzQkFDSyxTQUFBM0YsRUFBQXROLEdBQ0wsV0FBQXVVLFdBQUFqQyxTQUFBcmhCLEtBQUE2aEIsYUFLQSxLQUFBSyxRQUFBN0YsRUFBQXROLEtBQUEsTUFBQXNOLEVBQUF0TixJQUNBLE1BQUFzTixFQUFBdE4sSUFPQWdWLEVBQUEsS0FDQSxNQUFBMUgsRUFBQXROLElBQUEwVSxLQUNBQSxJQUNBSyxFQUFBSCxHQUdBRixHQUFBLEVBRUF6cUIsRUFBQWdyQixLQUFBeHNCLFNBQUE2a0IsRUFBQXROLEdBQUEsSUFDQWdWLEdBQUEsR0FJQU4sSUFBQUcsR0FBQSxHQUNBSixJQUFBSyxHQUFBLEdBQ0FGLEdBQUEsRUFDQTVVLEdBQUEsSUF0QkF5VSxHQUFBSCxXQUFBaEgsRUFBQSw2QkFDQW1ILEdBQUEsRUFDQXpVLEdBQUEsR0F1QkEsR0FBQXlVLElBQUFHLEVBQUEsVUFBQXRaLFVBQUFnUyxFQUFBLGtDQUVBLFNBQUFBLEVBQUF0TixJQUFBLE1BQUFzTixFQUFBdE4sR0FBQSxDQUVBLElBQUFzTCxFQUFBZ0MsRUFBQW5jLFNBQUE2TyxHQUFBc0wsTUFBQTRILGdCQUVBLElBQUE1SCxNQUFBLGNBQUFpSixXQUFBakMsU0FBQXJoQixLQUFBNmhCLGFBRUFzQyxFQUFBM3NCLFNBQUE2aUIsRUFBQSxPQUVBdEwsR0FBQXNMLEVBQUEsR0FBQXRqQixPQUlBLEdBQUFzbEIsRUFBQXROLEdBQUEsV0FBQXVVLFdBQUFqQyxTQUFBcmhCLEtBQUE2aEIsYUFLQSxHQUZBb0MsRUFBQSxFQUVBRixHQVdBLEdBSEFHLEVBQUFILEVBQUEsRUFHQSxLQUZBTCxFQUFBRSxHQUdBLFdBQUF2SCxFQUFBeUgsRUFBQUosRUFBQSxJQUNBQSxHQUFBLE9BWkFPLEVBQUEsRUFDQUMsRUFBQSxFQUNBbHJCLEVBQUEsS0FDQTRxQixFQUFBLEVBQ0FHLEVBQUEsRUFDQUwsRUFBQSxFQXVCQSxJQVBBUyxHQUFBTixLQUFBTSxFQUFBLE1BQ0FBLEVBQUF6QyxhQUVBeUMsR0FBQU4sRUFJQU0sRUFBQTFDLGNBQUEsQ0FJQSxJQUZBeUMsR0FBQSxHQUVBRCxFQUFBckMsV0FBQSxDQUlBLEdBRkE1b0IsRUFBQStGLEtBQUEsSUFFQXNiLE1BQUEsU0FDQThKLEVBQUExQyxhQUNBLE1BR0E0QixXQUFBaEgsRUFBQSxZQUdBOEgsR0FBQSxFQUdBLEtBQUFBLEVBQUF6QyxjQUFBcUMsRUFBQUgsR0FBQSxDQUVBLE9BQUFNLEdBQUFSLEVBQUFLLEVBQUEsQ0FDQUksRUFBQXpDLGFBQ0FnQyxFQUFBLEVBQ0EsTUFXQSxHQVJBSyxFQUFBSCxFQUVBQSxHQUFBLEVBR0FNLEdBQUEsRUFHQUMsRUFBQTFDLGFBQ0EwQyxHQUFBLE1BQ0ssQ0FJTCxHQUZBbnJCLEVBQUErRixLQUFBLElBRUFzYixNQUFBLFNBQ0E4SixFQUFBMUMsYUFDQSxNQUdBNEIsV0FBQWhILEVBQUEsYUFNQSxHQUFBNkgsRUFBQUQsRUFBQSxFQUFBUCxFQUFBLENBQ0EsSUFBQWtCLEVBQUFqQixFQUlBSCxJQUNBTSxHQUFBLEVBQ0FjLEdBQUEsR0FJQXBzQixJQUNBc3JCLEdBQUEsRUFDQWMsR0FBQSxHQUdBLElBQUFDLEVBQUFydEIsU0FBQTZrQixFQUFBeUgsRUFBQUksRUFBQSxPQUNBWSxFQUFBLEVBRUEsR0FBQUQsR0FBQSxJQUNBQyxFQUFBLEVBRUEsSUFBQUQsR0FHQSxJQUZBQyxFQUFBOXJCLEVBQUFrckIsR0FBQSxLQUVBM3hCLEVBQUF1eEIsRUFBQUksRUFBQSxFQUE4QzN4QixFQUFBcXlCLEVBQWlCcnlCLElBQy9ELEdBQUFpRixTQUFBNmtCLEVBQUE5cEIsR0FBQSxLQUNBdXlCLEVBQUEsRUFDQSxNQU1BLEdBQUFBLEVBR0EsSUFGQSxJQUFBQyxFQUFBYixFQUVZYSxHQUFBLEVBQVdBLElBQ3ZCLEtBQUEvckIsRUFBQStyQixHQUFBLElBQ0EvckIsRUFBQStyQixHQUFBLEVBRUEsSUFBQUEsR0FBQSxDQUNBLEtBQUFaLEVBQUExQyxjQUlBLFdBQUE2QixXQUFBakMsU0FBQXJoQixLQUFBeEgsRUFBQXVwQixvQkFBQUMsc0JBSEFtQyxHQUFBLEVBQ0FuckIsRUFBQStyQixHQUFBLEdBZ0JBLEdBSkFYLEVBQUF2VSxPQUFBamEsV0FBQSxHQUVBeXVCLEVBQUF4VSxPQUFBamEsV0FBQSxHQUVBLElBQUE4dEIsRUFDQVUsRUFBQXZVLE9BQUFqYSxXQUFBLEdBQ0F5dUIsRUFBQXhVLE9BQUFqYSxXQUFBLFFBQ0csR0FBQXN1QixFQUFBRCxFQUFBLElBQ0gsSUFBQWUsRUFBQWYsRUFJQSxJQUhBSSxFQUFBeFUsT0FBQWphLFdBQUFvRCxFQUFBZ3NCLE1BQ0FaLEVBQUEsSUFBQXZVLE9BQUEsS0FFVW1WLEdBQUFkLEVBQW9CYyxJQUU5QlgsR0FEQUEsSUFBQXZvQixTQUFBK1QsT0FBQWphLFdBQUEsTUFDQStCLElBQUFrWSxPQUFBamEsV0FBQW9ELEVBQUFnc0IsU0FFRyxDQUNILElBQUFDLEVBQUFoQixFQUdBLElBRkFHLEVBQUF2VSxPQUFBamEsV0FBQW9ELEVBQUFpc0IsTUFFVUEsR0FBQWYsRUFBQSxHQUEwQmUsSUFFcENiLEdBREFBLElBQUF0b0IsU0FBQStULE9BQUFqYSxXQUFBLE1BQ0ErQixJQUFBa1ksT0FBQWphLFdBQUFvRCxFQUFBaXNCLEtBS0EsSUFGQVosRUFBQXhVLE9BQUFqYSxXQUFBb0QsRUFBQWlzQixNQUVVQSxHQUFBZixFQUFxQmUsSUFFL0JaLEdBREFBLElBQUF2b0IsU0FBQStULE9BQUFqYSxXQUFBLE1BQ0ErQixJQUFBa1ksT0FBQWphLFdBQUFvRCxFQUFBaXNCLEtBSUEsSUFBQUMsRUFBQTFDLGFBQUE0QixFQUFBdlUsT0FBQWpaLFdBQUEsdUJBQ0FzdUIsRUFBQW53QixJQUFBbXdCLEVBQUFud0IsSUFBQTRDLElBQUEwc0IsR0FFQXJxQixTQUFBa3JCLEVBQUFud0IsSUFBQXN2QixLQUNBYSxFQUFBbHdCLEtBQUFrd0IsRUFBQWx3QixLQUFBMkMsSUFBQWtZLE9BQUFqYSxXQUFBLEtBSUEydEIsRUFBQVksRUFBQXhDLGNBQ0EsSUFBQXdELEVBQUEsQ0FDQXB3QixJQUFBOGEsT0FBQWphLFdBQUEsR0FDQVosS0FBQTZhLE9BQUFqYSxXQUFBLElBR0FzdkIsRUFBQWx3QixLQUFBK0ksbUJBQUEsSUFBQU4sSUFBQW9TLE9BQUFqYSxXQUFBLElBQUErRCxPQUFBa1csT0FBQWphLFdBQUEsS0FFQXV2QixFQUFBbndCLEtBQUFtd0IsRUFBQW53QixLQUFBMEksR0FBQW1TLE9BQUFqYSxXQUFBLEdBQUFnSSxVQUFBLEtBQ0F1bkIsRUFBQW53QixLQUFBbXdCLEVBQUFud0IsS0FBQTBJLEdBQUFtUyxPQUFBamEsV0FBQTJ0QixHQUFBOWxCLElBQUFvUyxPQUFBamEsV0FBQSxPQUFBZ0ksVUFBQSxNQUNBdW5CLEVBQUFud0IsS0FBQW13QixFQUFBbndCLEtBQUEwSSxHQUFBd25CLEVBQUFsd0IsS0FBQXlJLElBQUFvUyxPQUFBamEsV0FBQSxvQkFFQXV2QixFQUFBbndCLEtBQUFtd0IsRUFBQW53QixLQUFBMEksR0FBQW1TLE9BQUFqYSxXQUFBLE1BQUEydEIsR0FBQTNsQixVQUFBLEtBQ0F1bkIsRUFBQW53QixLQUFBbXdCLEVBQUFud0IsS0FBQTBJLEdBQUF3bkIsRUFBQWx3QixLQUFBeUksSUFBQW9TLE9BQUFqYSxXQUFBLG9CQUdBdXZCLEVBQUFwd0IsSUFBQW13QixFQUFBbndCLElBRUF5RCxJQUNBMnNCLEVBQUFud0IsS0FBQW13QixFQUFBbndCLEtBQUEwSSxHQUFBbVMsT0FBQWpaLFdBQUEseUJBSUEsSUFBQXlvQixFQUFBZ0MsU0FBQS9CLE1BQUEsSUF5QkEsT0F4QkF2USxFQUFBLEVBR0FzUSxFQUFBdFEsS0FBQSxJQUFBb1csRUFBQXB3QixRQUNBc3FCLEVBQUF0USxLQUFBb1csRUFBQXB3QixTQUFBLE1BQ0FzcUIsRUFBQXRRLEtBQUFvVyxFQUFBcHdCLFNBQUEsT0FDQXNxQixFQUFBdFEsS0FBQW9XLEVBQUFwd0IsU0FBQSxPQUVBc3FCLEVBQUF0USxLQUFBLElBQUFvVyxFQUFBcHdCLElBQUFDLEtBQ0FxcUIsRUFBQXRRLEtBQUFvVyxFQUFBcHdCLElBQUFDLE1BQUEsTUFDQXFxQixFQUFBdFEsS0FBQW9XLEVBQUFwd0IsSUFBQUMsTUFBQSxPQUNBcXFCLEVBQUF0USxLQUFBb1csRUFBQXB3QixJQUFBQyxNQUFBLE9BR0FxcUIsRUFBQXRRLEtBQUEsSUFBQW9XLEVBQUFud0IsS0FBQUQsSUFDQXNxQixFQUFBdFEsS0FBQW9XLEVBQUFud0IsS0FBQUQsS0FBQSxNQUNBc3FCLEVBQUF0USxLQUFBb1csRUFBQW53QixLQUFBRCxLQUFBLE9BQ0FzcUIsRUFBQXRRLEtBQUFvVyxFQUFBbndCLEtBQUFELEtBQUEsT0FFQXNxQixFQUFBdFEsS0FBQSxJQUFBb1csRUFBQW53QixVQUNBcXFCLEVBQUF0USxLQUFBb1csRUFBQW53QixXQUFBLE1BQ0FxcUIsRUFBQXRRLEtBQUFvVyxFQUFBbndCLFdBQUEsT0FDQXFxQixFQUFBdFEsS0FBQW9XLEVBQUFud0IsV0FBQSxPQUVBLElBQUFzdUIsV0FBQWpFLElBSUEsSUFBQStGLGlCQUFBLEdBRUFDLGNBQUEsTUFFQUMscUJBQUEsR0FFQUMsZ0JBQUEsR0FRQWpDLFdBQUFudkIsVUFBQW1FLFNBQUEsV0FvQkEsSUFoQkEsSUFBQXRELEVBRUF3d0IsRUFFQUMsRUFFQTF3QixFQUVBMndCLEVBRUFDLEVBRUFDLEVBQUEsRUFFQVYsRUFBQSxJQUFBL2IsTUFBQSxJQUVBNVcsRUFBQSxFQUFpQkEsRUFBQTJ5QixFQUFBbnVCLE9BQXdCeEUsSUFDekMyeUIsRUFBQTN5QixHQUFBLEVBSUEsSUFFQTR4QixFQUVBMEIsRUFJQUMsRUFNQXhsQixFQUFBeUYsRUFkQWdKLEVBQUEsRUFNQWdYLEdBQUEsRUFJQUMsRUFBQSxDQUNBMUQsTUFBQSxJQUFBblosTUFBQSxJQUtBa1QsRUFBQSxHQUVBdE4sRUFBQSxFQUVBLElBQUFzUSxFQUFBbnFCLEtBQUFzSixNQXNCQSxHQXBCQXpKLEVBQUFzcUIsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBQ0EwVyxFQUFBcEcsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBRUF5VyxFQUFBbkcsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBQ0EvWixFQUFBcXFCLEVBQUF0USxLQUFBc1EsRUFBQXRRLE1BQUEsRUFBQXNRLEVBQUF0USxNQUFBLEdBQUFzUSxFQUFBdFEsTUFBQSxHQUVBQSxFQUFBLEVBRUEsQ0FDQWhhLElBQUEsSUFBQThhLE9BQUE5YSxFQUFBMHdCLEdBQ0F6d0IsS0FBQSxJQUFBNmEsT0FBQTJWLEVBQUF4d0IsSUFHQUEsS0FBQWdGLFNBQUE2VixPQUFBOVosT0FDQXNtQixFQUFBcGMsS0FBQSxNQUlBeWxCLEVBQUExd0IsR0FBQSxHQUFBb3dCLG1CQUVBLE1BRUEsR0FBQU0sSUFBQUoscUJBQ0EsT0FBQWpKLEVBQUF0ZCxLQUFBLGVBQ0ssR0FBQTJtQixJQUFBSCxnQkFDTCxZQUVBSSxFQUFBM3dCLEdBQUEsR0FBQXF3QixjQUNBUyxFQUFBLEdBQUE5d0IsR0FBQSxXQUdBOHdCLEVBQUE5d0IsR0FBQSxLQUNBMndCLEVBQUEzd0IsR0FBQSxHQUFBcXdCLGNBYUEsR0FWQWxCLEVBQUF3QixFQUFBaEUsY0FLQXFFLEVBQUExRCxNQUFBLFVBQUF0dEIsS0FBQSxHQUFBOHdCLElBQUEsSUFDQUUsRUFBQTFELE1BQUEsR0FBQWtELEVBQ0FRLEVBQUExRCxNQUFBLEdBQUFtRCxFQUNBTyxFQUFBMUQsTUFBQSxHQUFBdnRCLEVBRUEsSUFBQWl4QixFQUFBMUQsTUFBQSxRQUFBMEQsRUFBQTFELE1BQUEsUUFBQTBELEVBQUExRCxNQUFBLFFBQUEwRCxFQUFBMUQsTUFBQSxHQUNBeUQsR0FBQSxPQUVBLElBQUFoZ0IsRUFBQSxFQUFlQSxHQUFBLEVBQVFBLElBQUEsQ0FDdkIsSUFBQWtnQixFQUFBLEVBRUE1dUIsRUFBQThxQixXQUFBNkQsR0FLQSxHQUpBQSxFQUFBM3VCLEVBQUFrckIsU0FDQTBELEVBQUE1dUIsRUFBQXlCLElBQUEvRCxJQUtBLElBQUF1TCxFQUFBLEVBQWlCQSxHQUFBLEVBQVFBLElBRXpCNGtCLEVBQUEsRUFBQW5mLEVBQUF6RixHQUFBMmxCLEVBQUEsR0FFQUEsRUFBQXZ2QixLQUFBbUcsTUFBQW9wQixFQUFBLElBUUEsR0FBQUYsRUFDQUgsRUFBQSxFQUNBVixFQUFBblcsR0FBQSxPQUlBLElBRkE2VyxFQUFBLElBRUFWLEVBQUFuVyxJQUNBNlcsR0FBQSxFQUNBN1csR0FBQSxFQVlBLElBUkE4VyxFQUFBRCxFQUFBLEVBQUF6QixJQVFBLElBQUEwQixJQUFBLEdBQUExQixFQUFBLEdBS0EsR0FBQXlCLEVBQUEsR0FHQSxPQUZBdkosRUFBQXBjLEtBQUEsR0FDQWtrQixFQUFBLEVBQUE5SCxFQUFBcGMsS0FBQSxLQUFBa2tCLEdBQXFEQSxFQUFBLEdBQUE5SCxFQUFBcGMsS0FBQSxJQUFBa2tCLEdBQ3JEOUgsRUFBQXRkLEtBQUEsSUFHQXNkLEVBQUFwYyxLQUFBaWxCLEVBQUFuVyxPQUNBNlcsR0FBQSxJQUdBdkosRUFBQXBjLEtBQUEsS0FHQSxRQUFBMmQsRUFBQSxFQUFvQkEsRUFBQWdJLEVBQXlCaEksSUFDN0N2QixFQUFBcGMsS0FBQWlsQixFQUFBblcsTUFJQXNOLEVBQUFwYyxLQUFBLEtBRUE0bEIsRUFBQSxFQUNBeEosRUFBQXBjLEtBQUEsSUFBQTRsQixHQUVBeEosRUFBQXBjLEtBQUE0bEIsUUFJQSxHQUFBMUIsR0FBQSxFQUNBLFFBQUF2RixFQUFBLEVBQXVCQSxFQUFBZ0gsRUFBMEJoSCxJQUNqRHZDLEVBQUFwYyxLQUFBaWxCLEVBQUFuVyxVQUVLLENBQ0wsSUFBQW1YLEVBQUFOLEVBQUF6QixFQUVBLEdBQUErQixFQUFBLEVBQ0EsUUFBQUMsRUFBQSxFQUF5QkEsRUFBQUQsRUFBc0JDLElBQy9DOUosRUFBQXBjLEtBQUFpbEIsRUFBQW5XLFdBR0FzTixFQUFBcGMsS0FBQSxLQUtBLElBRkFvYyxFQUFBcGMsS0FBQSxLQUVBaW1CLElBQUEsR0FDQTdKLEVBQUFwYyxLQUFBLEtBR0EsUUFBQW1tQixFQUFBLEVBQXVCQSxFQUFBUixFQUFBbHZCLEtBQUFrRyxJQUFBc3BCLEVBQUEsS0FBNERFLElBQ25GL0osRUFBQXBjLEtBQUFpbEIsRUFBQW5XLE1BS0EsT0FBQXNOLEVBQUF0ZCxLQUFBLEtBR0F1a0IsV0FBQW52QixVQUFBa3lCLE9BQUEsV0FDQSxPQUNBQyxlQUFBcHhCLEtBQUFvRCxhQVFBZ3JCLFdBQUFudkIsVUFBQXFiLGVBQUEsV0FDQSxPQUNBOFcsZUFBQXB4QixLQUFBb0QsYUFRQWdyQixXQUFBM1QsaUJBQUEsU0FBQUMsR0FDQSxPQUFBMFQsV0FBQTFzQixXQUFBZ1osRUFBQTBXLGlCQUdBcnpCLE9BQUFDLGVBQUFvd0IsV0FBQW52QixVQUFBLGFBQ0FYLE1BQUEsZUFFQSxJQUFBK3lCLFdBQUFqRCxXQU1BLFNBQUFrRCxrQkFBQXpXLEVBQUFDLEdBQW1ELEtBQUFELGFBQUFDLEdBQTBDLFVBQUEzRixVQUFBLHFDQUU3RixTQUFBb2Msb0JBQUF2VyxFQUFBQyxHQUE2QyxRQUFBNWQsRUFBQSxFQUFnQkEsRUFBQTRkLEVBQUFwWixPQUFrQnhFLElBQUEsQ0FBTyxJQUFBNmQsRUFBQUQsRUFBQTVkLEdBQTJCNmQsRUFBQWpkLFdBQUFpZCxFQUFBamQsYUFBQSxFQUF3RGlkLEVBQUFDLGNBQUEsRUFBZ0MsVUFBQUQsTUFBQUUsVUFBQSxHQUF1RHJkLE9BQUFDLGVBQUFnZCxFQUFBRSxFQUFBdGMsSUFBQXNjLElBRWhRLFNBQUFzVyxlQUFBMVcsRUFBQVEsRUFBQUMsR0FBdU0sT0FBeElELEdBQUFpVyxvQkFBQXpXLEVBQUE3YixVQUFBcWMsR0FBd0VDLEdBQUFnVyxvQkFBQXpXLEVBQUFTLEdBQWdFVCxFQUV2TSxJQUFBMlcsT0FFQSxXQU1BLFNBQUFBLElBQ0FILGtCQUFBdHhCLEtBQUF5eEIsR0F5QkEsT0FsQkFELGVBQUFDLEVBQUEsRUFDQTd5QixJQUFBLGlCQUNBTixNQUFBLFdBQ0EsT0FDQW96QixRQUFBLE1BT0csRUFDSDl5QixJQUFBLG1CQUNBTixNQUFBLFdBQ0EsV0FBQW16QixNQUlBQSxFQWhDQSxHQW1DQTF6QixPQUFBQyxlQUFBeXpCLE9BQUF4eUIsVUFBQSxhQUNBWCxNQUFBLFdBRUEsSUFBQXF6QixRQUFBRixPQU1BLFNBQUFHLGtCQUFBL1csRUFBQUMsR0FBbUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQTNGLFVBQUEscUNBRTdGLFNBQUEwYyxvQkFBQTdXLEVBQUFDLEdBQTZDLFFBQUE1ZCxFQUFBLEVBQWdCQSxFQUFBNGQsRUFBQXBaLE9BQWtCeEUsSUFBQSxDQUFPLElBQUE2ZCxFQUFBRCxFQUFBNWQsR0FBMkI2ZCxFQUFBamQsV0FBQWlkLEVBQUFqZCxhQUFBLEVBQXdEaWQsRUFBQUMsY0FBQSxFQUFnQyxVQUFBRCxNQUFBRSxVQUFBLEdBQXVEcmQsT0FBQUMsZUFBQWdkLEVBQUFFLEVBQUF0YyxJQUFBc2MsSUFFaFEsU0FBQTRXLGVBQUFoWCxFQUFBUSxFQUFBQyxHQUF1TSxPQUF4SUQsR0FBQXVXLG9CQUFBL1csRUFBQTdiLFVBQUFxYyxHQUF3RUMsR0FBQXNXLG9CQUFBL1csRUFBQVMsR0FBZ0VULEVBRXZNLElBQUFpWCxPQUVBLFdBTUEsU0FBQUEsSUFDQUgsa0JBQUE1eEIsS0FBQSt4QixHQXlCQSxPQWxCQUQsZUFBQUMsRUFBQSxFQUNBbnpCLElBQUEsaUJBQ0FOLE1BQUEsV0FDQSxPQUNBMHpCLFFBQUEsTUFPRyxFQUNIcHpCLElBQUEsbUJBQ0FOLE1BQUEsV0FDQSxXQUFBeXpCLE1BSUFBLEVBaENBLEdBbUNBaDBCLE9BQUFDLGVBQUErekIsT0FBQTl5QixVQUFBLGFBQ0FYLE1BQUEsV0FFQSxJQUFBMnpCLFFBQUFGLE9BTUEsU0FBQUcsa0JBQUFyWCxFQUFBQyxHQUFtRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBM0YsVUFBQSxxQ0FFN0YsU0FBQWdkLG9CQUFBblgsRUFBQUMsR0FBNkMsUUFBQTVkLEVBQUEsRUFBZ0JBLEVBQUE0ZCxFQUFBcFosT0FBa0J4RSxJQUFBLENBQU8sSUFBQTZkLEVBQUFELEVBQUE1ZCxHQUEyQjZkLEVBQUFqZCxXQUFBaWQsRUFBQWpkLGFBQUEsRUFBd0RpZCxFQUFBQyxjQUFBLEVBQWdDLFVBQUFELE1BQUFFLFVBQUEsR0FBdURyZCxPQUFBQyxlQUFBZ2QsRUFBQUUsRUFBQXRjLElBQUFzYyxJQUVoUSxTQUFBa1gsZUFBQXRYLEVBQUFRLEVBQUFDLEdBQXVNLE9BQXhJRCxHQUFBNlcsb0JBQUFyWCxFQUFBN2IsVUFBQXFjLEdBQXdFQyxHQUFBNFcsb0JBQUFyWCxFQUFBUyxHQUFnRVQsRUFFdk0sSUFBQXVYLE1BRUEsV0FTQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBUCxrQkFBQWx5QixLQUFBcXlCLEdBR0EsSUFBQWpGLEVBQUFrRixFQUFBM21CLE1BQUEsS0FFQSxJQUFBeWhCLEVBQUF2ckIsU0FDQTJ3QixFQUFBcEYsRUFBQXNGLFFBQ0FKLEVBQUFsRixFQUFBc0YsU0FHQTF5QixLQUFBc3lCLGFBQ0F0eUIsS0FBQXV5QixNQUNBdnlCLEtBQUF3eUIsS0FDQXh5QixLQUFBeXlCLFVBQUEsR0FnREEsT0F4Q0FMLGVBQUFDLEVBQUEsRUFDQXp6QixJQUFBLFNBQ0FOLE1BQUEsV0FDQSxJQUFBUixFQUFBQyxPQUFBbU0sT0FBQSxDQUNBeW9CLEtBQUEzeUIsS0FBQXN5QixXQUNBTSxJQUFBNXlCLEtBQUF1eUIsS0FDT3Z5QixLQUFBeXlCLFFBRVAsT0FEQSxNQUFBenlCLEtBQUF3eUIsS0FBQTEwQixFQUFBKzBCLElBQUE3eUIsS0FBQXd5QixJQUNBMTBCLElBTUcsQ0FDSGMsSUFBQSxpQkFDQU4sTUFBQSxXQUNBLElBQUFSLEVBQUEsQ0FDQTYwQixLQUFBM3lCLEtBQUFzeUIsV0FDQU0sSUFBQTV5QixLQUFBdXlCLEtBSUEsT0FGQXZ5QixLQUFBd3lCLEtBQUExMEIsRUFBQSswQixJQUFBN3lCLEtBQUF3eUIsSUFDQTEwQixFQUFBQyxPQUFBbU0sT0FBQXBNLEVBQUFrQyxLQUFBeXlCLFdBT0csRUFDSDd6QixJQUFBLG1CQUNBTixNQUFBLFNBQUFvYyxHQUNBLElBQUFrUCxFQUFBN3JCLE9BQUFtTSxPQUFBLEdBQWlDd1EsR0FJakMsTUFIQSxxQkFBQXpQLFFBQUEsU0FBQTRGLEdBQ0EsY0FBQStZLEVBQUEvWSxLQUVBLElBQUF3aEIsRUFBQTNYLEVBQUFpWSxLQUFBalksRUFBQWtZLElBQUFsWSxFQUFBbVksSUFBQWpKLE9BSUF5SSxFQXZFQSxHQTBFQXQwQixPQUFBQyxlQUFBcTBCLE1BQUFwekIsVUFBQSxhQUNBWCxNQUFBLFVBSUFQLE9BQUFDLGVBQUFxMEIsTUFBQXB6QixVQUFBLGFBQ0FmLElBQUEsV0FDQSxPQUFBOEIsS0FBQXN5QixZQUVBblksSUFBQSxTQUFBeFgsR0FDQTNDLEtBQUFzeUIsV0FBQTN2QixHQUVBd1ksY0FBQSxJQUVBLElBQUEyWCxPQUFBVCxNQUVBLFNBQUFVLGtCQUFBbFksRUFBQUMsR0FBbUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQTNGLFVBQUEscUNBRTdGLFNBQUE2ZCxvQkFBQWhZLEVBQUFDLEdBQTZDLFFBQUE1ZCxFQUFBLEVBQWdCQSxFQUFBNGQsRUFBQXBaLE9BQWtCeEUsSUFBQSxDQUFPLElBQUE2ZCxFQUFBRCxFQUFBNWQsR0FBMkI2ZCxFQUFBamQsV0FBQWlkLEVBQUFqZCxhQUFBLEVBQXdEaWQsRUFBQUMsY0FBQSxFQUFnQyxVQUFBRCxNQUFBRSxVQUFBLEdBQXVEcmQsT0FBQUMsZUFBQWdkLEVBQUFFLEVBQUF0YyxJQUFBc2MsSUFFaFEsU0FBQStYLGVBQUFuWSxFQUFBUSxFQUFBQyxHQUF1TSxPQUF4SUQsR0FBQTBYLG9CQUFBbFksRUFBQTdiLFVBQUFxYyxHQUF3RUMsR0FBQXlYLG9CQUFBbFksRUFBQVMsR0FBZ0VULEVBRXZNLElBQUFvWSxTQUFlbGEsNENBQUFySSxFQUFNOUYsT0FLckJzb0IsT0FFQSxXQWdCQSxTQUFBQSxFQUFBaEosRUFBQWlKLEdBR0EsR0FGQUwsa0JBQUEveUIsS0FBQW16QixLQUVBLE1BQUFoSixHQUFBLGlCQUFBQSxHQUFBK0ksU0FBQWxOLFNBQUFtRSxpQkFBQXhxQixZQUFBc1UsTUFBQWlCLFFBQUFpVixJQUNBLFVBQUFoVixVQUFBLHFEQU1BLEdBSEFuVixLQUFBcXpCLFNBQUEsTUFBQUQsRUFBQUUsNEJBQUFGLEVBQ0FwekIsS0FBQXV6QixTQUFBLEVBRUEsTUFBQXBKLGdCQUFBbkksWUFpQkEsSUFBQWtSLFNBQ0FsekIsS0FBQXd6QixPQUFBTixTQUFBOUksTUFBQStJLEVBQUFNLGFBQ08sb0JBQUE5ekIsV0FDUEssS0FBQXd6QixPQUFBLElBQUE3ekIsV0FBQSxJQUFBK3pCLFlBQUFQLEVBQUFNLGNBRUF6ekIsS0FBQXd6QixPQUFBLElBQUF2ZixNQUFBa2YsRUFBQU0saUJBdEJBLENBRUEsb0JBQUF0SixFQUVBLFlBQUErSSxTQUNBbHpCLEtBQUF3ekIsT0FBQU4sU0FBQXBvQixLQUFBcWYsT0FDUyx3QkFBQXhxQixhQUFBc1UsTUFBQWlCLFFBQUFpVixHQUdULFVBQUFoVixVQUFBLHFEQUZBblYsS0FBQXd6QixPQUFBRyxtQkFBQXhKLFFBS0FucUIsS0FBQXd6QixPQUFBckosRUFHQW5xQixLQUFBdXpCLFNBQUFwSixFQUFBdG9CLFFBb1BBLE9Bak9Bb3hCLGVBQUFFLEVBQUEsRUFDQXYwQixJQUFBLE1BQ0FOLE1BQUEsU0FBQXMxQixHQUVBLFNBQUFBLEVBQUEseUJBQUFBLEdBQUEsSUFBQUEsRUFBQS94QixPQUFBLFVBQUFzVCxVQUFBLDZEQUNBLG9CQUFBeWUsS0FBQSxHQUFBQSxFQUFBLGNBQUF6ZSxVQUFBLDREQUVBLElBQUEwZSxFQUFBLEtBVUEsR0FQQUEsRUFEQSxpQkFBQUQsRUFDQUEsRUFBQS9lLFdBQUEsR0FDTyxNQUFBK2UsRUFBQSxPQUNQQSxFQUFBLEdBRUFBLEVBR0E1ekIsS0FBQXd6QixPQUFBM3hCLE9BQUE3QixLQUFBdXpCLFNBQ0F2ekIsS0FBQXd6QixPQUFBeHpCLEtBQUF1ekIsWUFBQU0sT0FFQSxZQUFBWCxtQkFBQWxOLFNBQUFobUIsS0FBQXd6QixRQUFBLENBRUEsSUFBQXJKLEVBQUErSSxTQUFBOUksTUFBQStJLEVBQUFNLFlBQUF6ekIsS0FBQXd6QixPQUFBM3hCLFFBRUE3QixLQUFBd3pCLE9BQUE1SixLQUFBTyxFQUFBLElBQUFucUIsS0FBQXd6QixPQUFBM3hCLFFBQ0E3QixLQUFBd3pCLE9BQUFySixFQUNBbnFCLEtBQUF3ekIsT0FBQXh6QixLQUFBdXpCLFlBQUFNLE1BQ1MsQ0FDVCxJQUFBQyxFQUFBLEtBR0FBLEVBREFDLGFBQUEvekIsS0FBQXd6QixRQUNBLElBQUE3ekIsV0FBQSxJQUFBK3pCLFlBQUFQLEVBQUFNLFlBQUF6ekIsS0FBQXd6QixPQUFBM3hCLFNBRUEsSUFBQW9TLE1BQUFrZixFQUFBTSxZQUFBenpCLEtBQUF3ekIsT0FBQTN4QixRQUlBLFFBQUF4RSxFQUFBLEVBQXlCQSxFQUFBMkMsS0FBQXd6QixPQUFBM3hCLE9BQXdCeEUsSUFDakR5MkIsRUFBQXoyQixHQUFBMkMsS0FBQXd6QixPQUFBbjJCLEdBSUEyQyxLQUFBd3pCLE9BQUFNLEVBRUE5ekIsS0FBQXd6QixPQUFBeHpCLEtBQUF1ekIsWUFBQU0sS0FhRyxDQUNIajFCLElBQUEsUUFDQU4sTUFBQSxTQUFBNm9CLEVBQUExWSxHQUdBLEdBRkFBLEVBQUEsaUJBQUFBLElBQUF6TyxLQUFBdXpCLFNBRUF2ekIsS0FBQXd6QixPQUFBM3hCLE9BQUE0TSxFQUFBMFksRUFBQXRsQixPQUFBLENBQ0EsSUFBQXNvQixFQUFBLEtBRUEsWUFBQStJLG1CQUFBbE4sU0FBQWhtQixLQUFBd3pCLFFBQ0FySixFQUFBK0ksU0FBQTlJLE1BQUFwcUIsS0FBQXd6QixPQUFBM3hCLE9BQUFzbEIsRUFBQXRsQixRQUNBN0IsS0FBQXd6QixPQUFBNUosS0FBQU8sRUFBQSxJQUFBbnFCLEtBQUF3ekIsT0FBQTN4QixhQUNTLEdBQUFreUIsYUFBQS96QixLQUFBd3pCLFFBQUEsQ0FFVHJKLEVBQUEsSUFBQXhxQixXQUFBLElBQUErekIsWUFBQTF6QixLQUFBd3pCLE9BQUEzeEIsT0FBQXNsQixFQUFBdGxCLFNBRUEsUUFBQXhFLEVBQUEsRUFBeUJBLEVBQUEyQyxLQUFBdXpCLFNBQW1CbDJCLElBQzVDOHNCLEVBQUE5c0IsR0FBQTJDLEtBQUF3ekIsT0FBQW4yQixHQUtBMkMsS0FBQXd6QixPQUFBckosRUFHQSxZQUFBK0ksbUJBQUFsTixTQUFBbUIsSUFBQStMLFNBQUFsTixTQUFBaG1CLEtBQUF3ekIsUUFDQXJNLEVBQUF5QyxLQUFBNXBCLEtBQUF3ekIsT0FBQS9rQixFQUFBLEVBQUEwWSxFQUFBdGxCLFFBQ0E3QixLQUFBdXpCLFNBQUE5a0IsRUFBQTBZLEVBQUF0bEIsT0FBQTdCLEtBQUF1ekIsU0FBQTlrQixFQUFBMFksRUFBQXRsQixPQUFBN0IsS0FBQXV6QixjQUNPLFlBQUFMLFVBQUEsaUJBQUEvTCxHQUFBK0wsU0FBQWxOLFNBQUFobUIsS0FBQXd6QixRQUNQeHpCLEtBQUF3ekIsT0FBQVEsTUFBQTdNLEVBQUExWSxFQUFBLFVBQ0F6TyxLQUFBdXpCLFNBQUE5a0IsRUFBQTBZLEVBQUF0bEIsT0FBQTdCLEtBQUF1ekIsU0FBQTlrQixFQUFBMFksRUFBQXRsQixPQUFBN0IsS0FBQXV6QixjQUNPLEdBQUFRLGFBQUE1TSxJQUFBbFQsTUFBQWlCLFFBQUFpUyxJQUFBLGlCQUFBQSxFQUFBLENBQ1AsUUFBQXVCLEVBQUEsRUFBd0JBLEVBQUF2QixFQUFBdGxCLE9BQW9CNm1CLElBQzVDMW9CLEtBQUF3ekIsT0FBQS9rQixLQUFBMFksRUFBQXVCLEdBR0Exb0IsS0FBQXV6QixTQUFBOWtCLEVBQUF6TyxLQUFBdXpCLFNBQUE5a0IsRUFBQXpPLEtBQUF1ekIsY0FDTyxvQkFBQXBNLEVBQUEsQ0FDUCxRQUFBdUMsRUFBQSxFQUF5QkEsRUFBQXZDLEVBQUF0bEIsT0FBcUI2bkIsSUFDOUMxcEIsS0FBQXd6QixPQUFBL2tCLEtBQUEwWSxFQUFBdFMsV0FBQTZVLEdBR0ExcEIsS0FBQXV6QixTQUFBOWtCLEVBQUF6TyxLQUFBdXpCLFNBQUE5a0IsRUFBQXpPLEtBQUF1ekIsWUFZRyxDQUNIMzBCLElBQUEsT0FDQU4sTUFBQSxTQUFBaTFCLEVBQUExeEIsR0FHQSxHQUZBQSxPQUFBLEVBQUFBLEVBQUE3QixLQUFBdXpCLFNBRUF2ekIsS0FBQXd6QixPQUFBLE1BQ0EsT0FBQXh6QixLQUFBd3pCLE9BQUE1bkIsTUFBQTJuQixJQUFBMXhCLEdBTUEsSUFGQSxJQUFBc29CLEVBQUEsb0JBQUF4cUIsV0FBQSxJQUFBQSxXQUFBLElBQUErekIsWUFBQTd4QixJQUFBLElBQUFvUyxNQUFBcFMsR0FFQXhFLEVBQUEsRUFBcUJBLEVBQUF3RSxFQUFZeEUsSUFDakM4c0IsRUFBQTlzQixHQUFBMkMsS0FBQXd6QixPQUFBRCxLQUlBLE9BQUFwSixJQVNHLENBQ0h2ckIsSUFBQSxRQUNBTixNQUFBLFNBQUEyMUIsR0FHQSxJQUZBQSxFQUFBLE1BQUFBLFlBRUEsSUFBQWYsbUJBQUFsTixTQUFBaG1CLEtBQUF3ekIsU0FBQXh6QixLQUFBd3pCLE9BQUEzeEIsU0FBQTdCLEtBQUF1ekIsU0FBQSxPQUFBdnpCLEtBQUF3ekIsT0FFQSxZQUFBTixtQkFBQWxOLFNBQUFobUIsS0FBQXd6QixRQUNBLE9BQUFTLEVBQUFqMEIsS0FBQXd6QixPQUFBNW5CLE1BQUEsRUFBQTVMLEtBQUF1ekIsVUFBQXZ6QixLQUFBd3pCLE9BQUFwd0IsU0FBQSxXQUFBcEQsS0FBQXV6QixVQUVBLEdBQUFVLEVBQUEsQ0FFQSxTQUFBajBCLEtBQUF3ekIsT0FBQSxNQUNBLE9BQUF4ekIsS0FBQXd6QixPQUFBNW5CLE1BQUEsRUFBQTVMLEtBQUF1ekIsVUFLQSxJQUZBLElBQUFXLEVBQUFILGFBQUEvekIsS0FBQXd6QixRQUFBLElBQUE3ekIsV0FBQSxJQUFBK3pCLFlBQUExekIsS0FBQXV6QixXQUFBLElBQUF0ZixNQUFBalUsS0FBQXV6QixVQUVBbDJCLEVBQUEsRUFBMkJBLEVBQUEyQyxLQUFBdXpCLFNBQW1CbDJCLElBQzlDNjJCLEVBQUE3MkIsR0FBQTJDLEtBQUF3ekIsT0FBQW4yQixHQUlBLE9BQUE2MkIsRUFHQSxPQUFBQywrQkFBQW4wQixLQUFBd3pCLE9BQUEsRUFBQXh6QixLQUFBdXpCLFlBV0csQ0FDSDMwQixJQUFBLFNBQ0FOLE1BQUEsV0FDQSxPQUFBMEIsS0FBQXV6QixXQU1HLENBQ0gzMEIsSUFBQSxTQUNBTixNQUFBLFdBQ0EsYUFBQTBCLEtBQUF3ekIsT0FBQXh6QixLQUFBd3pCLE9BQUFwd0IsU0FBQSxlQU1HLENBQ0h4RSxJQUFBLFdBQ0FOLE1BQUEsU0FBQXNqQixHQUNBLGFBQUE1aEIsS0FBQXd6QixPQUFBeHpCLEtBQUF3ekIsT0FBQTVuQixNQUFBLEVBQUE1TCxLQUFBdXpCLFVBQUFud0IsU0FBQXdlLEdBQUEsS0FNRyxDQUNIaGpCLElBQUEsaUJBQ0FOLE1BQUEsV0FDQSxJQUFBODFCLEVBQUFsQixTQUFBbE4sU0FBQWhtQixLQUFBd3pCLFFBQUF4ekIsS0FBQXd6QixPQUFBcHdCLFNBQUEsVUFBQTh2QixTQUFBcG9CLEtBQUE5SyxLQUFBd3pCLFFBQUFwd0IsU0FBQSxVQUNBZ3dCLEVBQUFwUixPQUFBaGlCLEtBQUFxekIsVUFBQWp3QixTQUFBLElBQ0EsT0FDQWl4QixRQUFBLENBQ0FDLE9BQUFGLEVBQ0FoQixRQUFBLElBQUFBLEVBQUF2eEIsT0FBQSxJQUFBdXhCLFNBUUcsRUFDSHgwQixJQUFBLG1CQUNBTixNQUFBLFNBQUFvYyxHQUNBLElBQUFuTixFQUFBbU4sRUFBQTJaLFFBQUFqQixRQUFBOXdCLFNBQUFvWSxFQUFBMlosUUFBQWpCLFFBQUEsTUFFQSxXQUFBRCxFQURBRCxTQUFBcG9CLEtBQUE0UCxFQUFBMlosUUFBQUMsT0FBQSxVQUNBL21CLE9BSUE0bEIsRUE3UkEsR0FxU0FHLDRCQUFBLEVBRUEsU0FBQVMsYUFBQTd6QixHQUNBLDhCQUFBbkMsT0FBQWtCLFVBQUFtRSxTQUFBNUYsS0FBQTBDLEdBT0EsU0FBQXl6QixtQkFBQVksR0FJQSxJQUZBLElBQUFwSyxFQUFBLG9CQUFBeHFCLFdBQUEsSUFBQUEsV0FBQSxJQUFBK3pCLFlBQUFhLEVBQUExeUIsU0FBQSxJQUFBb1MsTUFBQXNnQixFQUFBMXlCLFFBRUF4RSxFQUFBLEVBQWlCQSxFQUFBazNCLEVBQUExeUIsT0FBaUJ4RSxJQUNsQzhzQixFQUFBOXNCLEdBQUFrM0IsRUFBQTFmLFdBQUF4WCxHQUlBLE9BQUE4c0IsRUFTQSxTQUFBZ0ssK0JBQUFLLEVBQUFDLEVBQUFDLEdBR0EsSUFGQSxJQUFBdnlCLEVBQUEsR0FFQTlFLEVBQUFvM0IsRUFBMEJwM0IsRUFBQXEzQixFQUFjcjNCLElBQ3hDOEUsR0FBQTBLLE9BQUE4bkIsYUFBQUgsRUFBQW4zQixJQUdBLE9BQUE4RSxFQUdBZ3hCLE9BQUFNLFlBQUEsSUFPQU4sT0FBQXlCLGdCQUFBLEVBT0F6QixPQUFBMEIsaUJBQUEsRUFPQTFCLE9BQUEyQixtQkFBQSxFQU9BM0IsT0FBQTRCLGlCQUFBLEVBT0E1QixPQUFBNkIsYUFBQSxFQU9BN0IsT0FBQThCLFlBQUEsRUFPQTlCLE9BQUErQixxQkFBQSxJQUNBbjNCLE9BQUFDLGVBQUFtMUIsT0FBQWwwQixVQUFBLGFBQ0FYLE1BQUEsV0FFQSxJQUFBNjJCLE9BQUFoQyxPQUVBaUMsVUFBQSxDQUVBQyxlQUFBLFdBQ0FDLGdCQUFBLFdBQ0FDLGVBQUEvekIsS0FBQUMsSUFBQSxRQUNBK3pCLGdCQUFBaDBCLEtBQUFDLElBQUEsTUFFQWcwQixXQUFBLGlCQUVBQyxZQUFBLGlCQVFBQyxpQkFBQSxFQU9BQyxpQkFBQSxFQU9BQyxpQkFBQSxFQU9BQyxnQkFBQSxFQU9BQyxpQkFBQSxFQU9BQyxvQkFBQSxFQU9BQyxjQUFBLEVBT0FDLGtCQUFBLEVBT0FDLGVBQUEsRUFPQUMsZUFBQSxHQU9BQyxpQkFBQSxHQU9BQyxvQkFBQSxHQU9BQyxlQUFBLEdBT0FDLGlCQUFBLEdBT0FDLHVCQUFBLEdBT0FDLGNBQUEsR0FPQUMsb0JBQUEsR0FPQUMsZUFBQSxHQU9BQyxxQkFBQSxHQU9BQyxrQkFBQSxJQU9BQyxrQkFBQSxJQU9BekQsNEJBQUEsRUFPQTBELDZCQUFBLEVBT0FDLCtCQUFBLEVBT0FDLHlCQUFBLEVBT0FDLHdCQUFBLEVBT0FDLGlDQUFBLEtBR0EsU0FBQUMsVUFBQW4zQixHQUE4VSxPQUExT20zQixVQUEzRSxtQkFBQWo1QixRQUFBLGlCQUFBQSxPQUFBMGQsU0FBMkUsU0FBQTViLEdBQW9DLGNBQUFBLEdBQStCLFNBQUFBLEdBQW9DLE9BQUFBLEdBQUEsbUJBQUE5QixRQUFBOEIsRUFBQTZiLGNBQUEzZCxRQUFBOEIsSUFBQTlCLE9BQUFhLFVBQUEsZ0JBQUFpQixJQUFtSUEsR0FVOVUsSUFBQW8zQixhQUFBLENBQ0F0TixLQUFBTyxTQUNBOEosUUFBQWMsT0FDQS9KLFFBQUFDLE9BQ0FLLFdBQUFDLE9BQ0F5RixlQUFBQyxXQUNBM1YsY0FBQUUsU0FDQXBCLFlBQUFHLE9BQ0ErVyxRQUFBQyxRQUNBSyxRQUFBQyxRQUNBbEgsbUJBQUExRCxPQUNBcEssV0FBQUUsV0FHQSxTQUFBb2EsaUJBQUFuZSxFQUFBeGEsRUFBQU4sRUFBQTBMLEdBQ0Esb0JBQUExTCxFQUFBLENBQ0EsR0FBQTBMLEVBQUF1USxRQUNBLE9BQUFqYyxFQUtBLEdBQUFrRCxLQUFBbUcsTUFBQXJKLE9BQUEsQ0FDQSxHQUFBQSxHQUFBZzNCLGdCQUFBaDNCLEdBQUErMkIsZUFBQSxXQUFBMUosT0FBQXJ0QixHQUNBLEdBQUFBLEdBQUFrM0IsZ0JBQUFsM0IsR0FBQWkzQixlQUFBLFdBQUE1YSxPQUFBamEsV0FBQXBDLEdBSUEsV0FBQXNkLFNBQUF0ZCxHQUlBLFNBQUFBLEdBQUEsV0FBQSs0QixVQUFBLzRCLEdBQUEsT0FBQUEsRUFFQSxHQUFBQSxFQUFBazVCLFdBQUEsWUFLQSxJQUpBLElBQUF0ZCxFQUFBbmMsT0FBQW1jLEtBQUE1YixHQUFBbTVCLE9BQUEsU0FBQTVtQixHQUNBLE9BQUFBLEVBQUE2bUIsV0FBQSxZQUFBcDVCLEVBQUF1UyxLQUdBeFQsRUFBQSxFQUFpQkEsRUFBQTZjLEVBQUFyWSxPQUFpQnhFLElBQUEsQ0FDbEMsSUFBQUssRUFBQTQ1QixhQUFBcGQsRUFBQTdjLElBQ0EsR0FBQUssRUFBQSxPQUFBQSxFQUFBK2MsaUJBQUFuYyxFQUFBMEwsR0FHQSxTQUFBMUwsRUFBQXE1QixNQUFBLENBQ0EsSUFBQWg2QixFQUFBVyxFQUFBcTVCLE1BQ0F2USxFQUFBLElBQUE5YSxLQUVBLE1BREEsaUJBQUEzTyxFQUFBeXBCLEVBQUEyQyxRQUFBemQsS0FBQTZDLE1BQUF4UixJQUEyRGdkLE9BQUExYSxPQUFBdEMsR0FBQXlwQixFQUFBMkMsUUFBQXBzQixFQUFBd0YsWUFBc0QsaUJBQUF4RixHQUFBcU0sRUFBQXVRLFNBQUE2TSxFQUFBMkMsUUFBQXBzQixHQUNqSHlwQixFQUdBLFNBQUE5b0IsRUFBQTJ0QixNQUFBLENBQ0EsSUFBQXJDLEVBQUE3ckIsT0FBQW1NLE9BQUEsR0FBK0I1TCxHQU0vQixPQUpBQSxFQUFBNHRCLFNBQ0F0QyxFQUFBc0MsT0FBQXFMLGlCQUFBbmUsRUFBQSxLQUFBOWEsRUFBQTR0QixTQUdBM2hCLEtBQUFrUSxpQkFBQW5jLEdBR0EsU0FBQUEsRUFBQXEwQixNQUFBLE1BQUFyMEIsRUFBQXM1QixXQUFBLENBQ0EsSUFBQTVvQixFQUFBMVEsRUFBQXEwQixLQUFBcjBCLElBQUFzNUIsV0FHQSxHQUFBNW9CLGFBQUE4akIsT0FBQSxPQUFBOWpCLEVBQ0EsSUFBQTZvQixFQUFBOTVCLE9BQUFtYyxLQUFBbEwsR0FBQXlvQixPQUFBLFNBQUE1bUIsR0FDQSxPQUFBQSxFQUFBNm1CLFdBQUEsT0FFQXJPLEdBQUEsRUFLQSxHQUpBd08sRUFBQTVzQixRQUFBLFNBQUE0RixJQUNBLHlCQUFBN08sUUFBQTZPLEtBQUF3WSxHQUFBLEtBR0FBLEVBQUEsT0FBQXlKLE9BQUFyWSxpQkFBQXpMLEdBR0EsT0FBQTFRLEVBd0JBLFNBQUE2USxNQUFBaUIsRUFBQXBHLEdBQ0EsSUFBQWdULEVBQUFoZCxLQVFBLE1BRkEsa0JBSkFnSyxFQUFBak0sT0FBQW1NLE9BQUEsR0FBNEIsQ0FDNUJxUSxTQUFBLEdBQ0d2USxJQUVIdVEsVUFBQXZRLEVBQUE4dEIsUUFBQTl0QixFQUFBdVEsU0FDQSxrQkFBQXZRLEVBQUE4dEIsU0FBQTl0QixFQUFBdVEsU0FBQXZRLEVBQUE4dEIsUUFDQTVvQixLQUFBQyxNQUFBaUIsRUFBQSxTQUFBeFIsRUFBQU4sR0FDQSxPQUFBaTVCLGlCQUFBdmEsRUFBQXBlLEVBQUFOLEVBQUEwTCxLQVFBLElBQUFxckIsZUFBQSxXQUNBQyxnQkFBQSxXQUNBQyxlQUFBLG1CQUNBQyxnQkFBQSxtQkEwQkEsU0FBQXZULFVBQUEzakIsRUFBQXk1QixFQUFBQyxFQUFBaHVCLEdBQ0EsTUFBQWd1QixHQUFBLFdBQUFYLFVBQUFXLEtBQ0FodUIsRUFBQWd1QixFQUNBQSxFQUFBLEdBR0EsTUFBQUQsR0FBQSxXQUFBVixVQUFBVSxJQUFBOWpCLE1BQUFpQixRQUFBNmlCLEtBQ0EvdEIsRUFBQSt0QixFQUNBQSxFQUFBLEtBQ0FDLEVBQUEsR0FHQWh1QixFQUFBak0sT0FBQW1NLE9BQUEsR0FBNEIsQ0FDNUJxUSxTQUFBLEdBQ0d2USxHQUNILElBQUEwUSxFQUFBekcsTUFBQWlCLFFBQUE1VyxHQUFBMjVCLGVBQUEzNUIsRUFBQTBMLEdBQUFrdUIsa0JBQUE1NUIsRUFBQTBMLEdBQ0EsT0FBQWtGLEtBQUErUyxVQUFBdkgsRUFBQXFkLEVBQUFDLEdBWUEsU0FBQUcsVUFBQUMsRUFBQXB1QixHQUVBLE9BREFBLEtBQUEsR0FDQWtGLEtBQUFDLE1BQUE4UyxVQUFBbVcsRUFBQXB1QixJQVlBLFNBQUFxdUIsWUFBQUMsRUFBQXR1QixHQUVBLE9BREFBLEtBQUEsR0FDQW1GLE1BQUFELEtBQUErUyxVQUFBcVcsR0FBQXR1QixHQUdBLFNBQUFpdUIsZUFBQTFlLEVBQUF2UCxHQUNBLE9BQUF1UCxFQUFBNVAsSUFBQSxTQUFBcUYsR0FDQSxPQUFBdXBCLGVBQUF2cEIsRUFBQWhGLEtBSUEsU0FBQXd1QixhQUFBcFIsR0FDQSxJQUFBcVIsRUFBQXJSLEVBQUFzUixjQUVBLFdBQUF0UixFQUFBdVIscUJBQUFGLElBQUE3c0IsTUFBQSxVQUdBLFNBQUEyc0IsZUFBQWo2QixFQUFBMEwsR0FDQSxHQUFBaUssTUFBQWlCLFFBQUE1VyxHQUFBLE9BQUEyNUIsZUFBQTM1QixFQUFBMEwsR0FDQSxRQUFBMEosSUFBQXBWLEVBQUEsWUFFQSxHQUFBQSxhQUFBZ08sS0FBQSxDQUNBLElBQUFzc0IsRUFBQXQ2QixFQUFBa08sVUFFQXFzQixFQUFBRCxHQUFBLEdBQUFBLEVBQUEsYUFDQSxPQUFBNXVCLEVBQUF1USxTQUFBc2UsRUFBQSxDQUNBbEIsTUFBQWEsYUFBQWw2QixJQUNLLENBQ0xxNUIsTUFBQSxDQUNBbmQsWUFBQWxjLEVBQUFrTyxVQUFBcEosYUFLQSxvQkFBQTlFLElBQUEwTCxFQUFBdVEsUUFBQSxDQUVBLEdBQUEvWSxLQUFBbUcsTUFBQXJKLE9BQUEsQ0FDQSxJQUNBdzZCLEVBQUF4NkIsR0FBQWszQixnQkFBQWwzQixHQUFBaTNCLGVBRUEsR0FIQWozQixHQUFBZzNCLGdCQUFBaDNCLEdBQUErMkIsZUFHQSxPQUNBM0osV0FBQXB0QixFQUFBOEUsWUFFQSxHQUFBMDFCLEVBQUEsT0FDQXRlLFlBQUFsYyxFQUFBOEUsWUFJQSxPQUNBc1ksY0FBQXBkLEVBQUE4RSxZQUlBLEdBQUE5RSxhQUFBMFMsT0FBQSxDQUNBLElBQUErbkIsRUFBQXo2QixFQUFBeTZCLE1BT0EsWUFMQXJsQixJQUFBcWxCLElBQ0FBLEVBQUF6NkIsRUFBQThFLFdBQUEraEIsTUFBQSxpQkFHQSxJQUFBa0MsT0FBQS9vQixFQUFBMDZCLE9BQUFELEdBQ0F6ZSxpQkFHQSxhQUFBaGMsR0FBQSxXQUFBKzRCLFVBQUEvNEIsR0FBQTQ1QixrQkFBQTU1QixFQUFBMEwsR0FDQTFMLEVBR0EsSUFBQTI2QixtQkFBQSxDQUNBOUYsT0FBQSxTQUFBcjFCLEdBQ0EsV0FBQXEzQixPQUFBcjNCLEVBQUFRLFFBQUFSLEVBQUFvN0IsVUFFQW5OLEtBQUEsU0FBQWp1QixHQUNBLFdBQUF5TSxLQUFBek0sRUFBQXlNLEtBQUF6TSxFQUFBa3VCLFFBRUFxRyxNQUFBLFNBQUF2MEIsR0FDQSxXQUFBZzFCLE9BQUFoMUIsRUFBQXcwQixZQUFBeDBCLEVBQUEyVyxVQUFBM1csRUFBQXkwQixJQUFBejBCLEVBQUEwMEIsR0FBQTEwQixFQUFBMjBCLFNBR0FyRSxXQUFBLFNBQUF0d0IsR0FDQSxXQUFBdXpCLFdBQUF2ekIsRUFBQXdMLFFBRUFrUyxPQUFBLFNBQUExZCxHQUNBLFdBQUE4ZCxTQUFBOWQsRUFBQVEsUUFFQW10QixNQUFBLFNBQUEzdEIsR0FDQSxXQUFBNnRCLE9BQUE3dEIsRUFBQVEsUUFFQWdCLEtBQUEsU0FBQXhCLEdBQ0EsT0FBQTZjLE9BQUFsYSxTQUNBLE1BQUEzQyxFQUFBK0IsSUFBQS9CLEVBQUErQixJQUFBL0IsRUFBQXE3QixLQUFBLE1BQUFyN0IsRUFBQStCLElBQUEvQixFQUFBZ0MsS0FBQWhDLEVBQUFzN0IsTUFBQSxNQUFBdDdCLEVBQUErQixJQUFBL0IsRUFBQWlDLFNBQUFqQyxFQUFBdTdCLFlBRUF0SCxPQUFBLFdBQ0EsV0FBQUUsU0FFQVIsT0FBQSxXQUNBLFdBQUFFLFNBRUFsZixTQUFBLFNBQUEzVSxHQUNBLFdBQUF5c0IsU0FBQXpzQixJQUVBbXJCLFNBQUEsU0FBQW5yQixHQUNBLFdBQUF5c0IsU0FBQXpzQixJQUdBK3NCLFdBQUEsU0FBQS9zQixHQUNBLFdBQUF1cEIsT0FBQXZwQixFQUFBZ3RCLFFBQUFodEIsRUFBQWtNLFVBRUE1TCxPQUFBLFNBQUFOLEdBQ0EsV0FBQXV0QixPQUFBdnRCLEVBQUFRLFFBRUF3ZSxVQUFBLFNBQUFoZixHQUNBLE9BQUFxZixVQUFBMWMsU0FBQTNDLEVBQUErQixJQUFBL0IsRUFBQWdDLFFBSUEsU0FBQW80QixrQkFBQXhkLEVBQUExUSxHQUNBLFNBQUEwUSxHQUFBLFdBQUEyYyxVQUFBM2MsR0FBQSxVQUFBNVksTUFBQSwwQkFDQSxJQUFBdzNCLEVBQUE1ZSxFQUFBNmUsVUFFQSxZQUFBRCxFQUFBLENBRUEsSUFBQUUsRUFBQSxHQUVBLFFBQUE1N0IsS0FBQThjLEVBQ0E4ZSxFQUFBNTdCLEdBQUEyNkIsZUFBQTdkLEVBQUE5YyxHQUFBb00sR0FHQSxPQUFBd3ZCLEVBQ0csb0JBQUFGLEVBQUEsQ0FFSCxJQUFBRyxFQUFBL2UsRUFFQSxzQkFBQStlLEVBQUFuZixlQUFBLENBS0EsSUFBQW9mLEVBQUFULG1CQUFBSyxHQUVBLElBQUFJLEVBQ0EsVUFBQXZrQixVQUFBLHNDQUFBbWtCLEdBR0FHLEVBQUFDLEVBQUFELEdBVUEsTUFOQSxTQUFBSCxHQUFBRyxFQUFBek4sTUFDQXlOLEVBQUEsSUFBQWx2QixLQUFBa3ZCLEVBQUFsdkIsS0FBQWd1QixlQUFBa0IsRUFBQXpOLE1BQUFoaUIsSUFDSyxVQUFBc3ZCLEdBQUFHLEVBQUFsSCxNQUNMa0gsRUFBQSxJQUFBM0csT0FBQTJHLEVBQUFuSCxXQUFBaUcsZUFBQWtCLEVBQUFsSCxJQUFBdm9CLEdBQUF5dkIsRUFBQWpILEdBQUFpSCxFQUFBaEgsU0FHQWdILEVBQUFuZixlQUFBdFEsR0FFQSxVQUFBbEksTUFBQSx3Q0FBQXUxQixVQUFBaUMsSUFJQSxJQUFBSyxjQUFBLENBQ0F4cUIsWUFDQWtwQix3QkFDQUYsb0JBQ0FsVyxxQkFHQTJYLFVBQUEsSUFDQUMsZUFBQSxJQUNBQyxpQkFBQSxJQUNBQyxnQkFBQSxJQUNBQyxnQkFBQSxJQUNBQyxhQUFBLElBQ0FDLGVBQUEsSUFDQUMsY0FBQSxJQUNBQyxnQkFBQSxJQVNBLFNBQUFDLGFBQUEvd0IsRUFBQXNGLEVBQUEwckIsR0FHQSxJQUZBLElBQUFDLEVBQUEsRUFFQWw5QixFQUFBdVIsRUFBcUJ2UixFQUFBaTlCLEVBQVNqOUIsR0FBQSxHQUM5QixJQUFBbTlCLEVBQUFseEIsRUFBQWpNLEdBRUEsR0FBQWs5QixFQUFBLENBQ0EsSUFBQUMsRUFBQVgsa0JBQUFPLGdCQUNBLFNBR0FHLEdBQUEsT0FDSyxHQUFBQyxFQUFBWixVQUNMLElBQUFZLEVBQUFWLG9CQUFBRyxhQUNBTSxFQUFBLE9BQ08sSUFBQUMsRUFBQVQsbUJBQUFHLGVBQ1BLLEVBQUEsTUFDTyxLQUFBQyxFQUFBUixtQkFBQUcsY0FHUCxTQUZBSSxFQUFBLEdBT0EsT0FBQUEsRUFHQSxJQUFBRSxlQUFBSixhQUNBSyxjQUFBLENBQ0FMLGFBQUFJLGdCQUdBRSxTQUFlM2hCLDRDQUFBckksRUFBTTlGLE9BQ3JCK3ZCLGVBQUFGLGNBQUFMLGFBRUFRLGdCQUFBbGdCLE9BQUFqYSxXQUFBMDBCLFVBQUFLLFlBQ0FxRixnQkFBQW5nQixPQUFBamEsV0FBQTAwQixVQUFBTSxZQUNBcUYsY0FBQSxHQUVBLFNBQUFDLGNBQUE3USxFQUFBbmdCLEVBQUFrTCxHQUVBLElBQUEyRSxHQURBN1AsRUFBQSxNQUFBQSxFQUFBLEdBQWdDQSxJQUNoQ0EsRUFBQTZQLE1BQUE3UCxFQUFBNlAsTUFBQSxFQUVBelgsRUFBQStuQixFQUFBdFEsR0FBQXNRLEVBQUF0USxFQUFBLE1BQUFzUSxFQUFBdFEsRUFBQSxPQUFBc1EsRUFBQXRRLEVBQUEsT0FFQSxHQUFBelgsRUFBQSxFQUNBLFVBQUFOLE1BQUEsOEJBQUFzVCxPQUFBaFQsSUFHQSxHQUFBNEgsRUFBQWl4QixrQ0FBQTlRLEVBQUF0b0IsT0FBQU8sRUFDQSxVQUFBTixNQUFBLGlCQUFBc1QsT0FBQStVLEVBQUF0b0IsT0FBQSwwQkFBQXVULE9BQUFoVCxJQUdBLElBQUE0SCxFQUFBaXhCLGtDQUFBOVEsRUFBQXRvQixTQUFBTyxFQUNBLFVBQUFOLE1BQUEsaUJBQUFzVCxPQUFBK1UsRUFBQXRvQixPQUFBLHdCQUFBdVQsT0FBQWhULElBR0EsR0FBQUEsRUFBQXlYLEVBQUFzUSxFQUFBdG9CLE9BQ0EsVUFBQUMsTUFBQSxjQUFBc1QsT0FBQWhULEVBQUEscUJBQUFnVCxPQUFBeUUsRUFBQSw4QkFBQXpFLE9BQUF1bEIsU0FBQU8sV0FBQS9RLEdBQUEsTUFJQSxPQUFBQSxFQUFBdFEsRUFBQXpYLEVBQUEsR0FDQSxVQUFBTixNQUFBLCtFQUlBLE9BQUFxNUIsa0JBQUFoUixFQUFBdFEsRUFBQTdQLEVBQUFrTCxHQUdBLFNBQUFpbUIsa0JBQUFoUixFQUFBdFEsRUFBQTdQLEVBQUFrTCxHQUNBLElBQUFrbUIsRUFBQSxNQUFBcHhCLEVBQUEsZUFBQUEsRUFBQSxjQUNBcXhCLEVBQUEsTUFBQXJ4QixFQUFBLGdCQUFBQSxFQUFBLGVBQ0FzeEIsRUFBQSxNQUFBdHhCLEVBQUEscUJBQUFBLEVBQUEsb0JBQ0EsSUFBQXN4QixFQUFBLElBQUFDLEVBQUEsS0FDQSxJQUFBQyxFQUFBLE1BQUF4eEIsRUFBQSxpQkFBQUEsRUFBQSxZQUVBeXhCLEVBQUEsTUFBQXp4QixFQUFBLEtBQUFBLEVBQUEsSUFFQTB4QixFQUFBLGtCQUFBMXhCLEVBQUEsWUFBQUEsRUFBQSxXQUVBMnhCLEVBQUEsTUFBQTN4QixFQUFBLGdCQUFBQSxFQUFBLGVBQ0E0eEIsRUFBQSxNQUFBNXhCLEVBQUEsY0FBQUEsRUFBQSxhQUNBNnhCLEVBQUEsTUFBQTd4QixFQUFBLGVBQUFBLEVBQUEsY0FFQXlxQixFQUFBNWEsRUFFQSxHQUFBc1EsRUFBQXRvQixPQUFBLFlBQUFDLE1BQUEsdUNBRUEsSUFBQU0sRUFBQStuQixFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FFQSxHQUFBelgsRUFBQSxHQUFBQSxFQUFBK25CLEVBQUF0b0IsT0FBQSxVQUFBQyxNQUFBLHdCQU9BLElBTEEsSUFBQS9DLEVBQUFtVyxFQUFBLE1BRUE0bUIsRUFBQSxJQUdBLENBRUEsSUFBQUMsRUFBQTVSLEVBQUF0USxLQUVBLE9BQUFraUIsRUFBQSxNQUlBLElBRkEsSUFBQTErQixFQUFBd2MsRUFFQSxJQUFBc1EsRUFBQTlzQixNQUFBOHNCLEVBQUF0b0IsUUFDQXhFLElBSUEsR0FBQUEsR0FBQXM5QixTQUFBTyxXQUFBL1EsR0FBQSxVQUFBcm9CLE1BQUEsc0NBQ0EsSUFBQWxFLEVBQUFzWCxFQUFBNG1CLElBQUEzUixFQUFBL21CLFNBQUEsT0FBQXlXLEVBQUF4YyxHQUdBLEdBRkF3YyxFQUFBeGMsRUFBQSxFQUVBMCtCLElBQUEzRyxVQUFBUSxpQkFBQSxDQUNBLElBQUFvRyxFQUFBN1IsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBQ0EsR0FBQW1pQixHQUFBLEdBQUFBLEVBQUE3UixFQUFBdG9CLE9BQUFnWSxHQUFBLElBQUFzUSxFQUFBdFEsRUFBQW1pQixFQUFBLGFBQUFsNkIsTUFBQSw2QkFFQSxJQUFBODRCLGVBQUF6USxFQUFBdFEsSUFBQW1pQixFQUFBLEdBQ0EsVUFBQWw2QixNQUFBLHlDQUdBLElBQUExQyxFQUFBK3FCLEVBQUEvbUIsU0FBQSxPQUFBeVcsSUFBQW1pQixFQUFBLEdBQ0FqOUIsRUFBQW5CLEdBQUF3QixFQUNBeWEsR0FBQW1pQixPQUNLLEdBQUFELElBQUEzRyxVQUFBYSxjQUFBLENBQ0wsSUFBQTFELEVBQUFvSSxTQUFBdlEsTUFBQSxJQUNBRCxFQUFBUCxLQUFBMkksRUFBQSxFQUFBMVksSUFBQSxJQUNBOWEsRUFBQW5CLEdBQUEsSUFBQTJzQixTQUFBZ0ksR0FDQTFZLEdBQUEsUUFDSyxHQUFBa2lCLElBQUEzRyxVQUFBc0IsZ0JBQUEsSUFBQW1GLEVBQ0w5OEIsRUFBQW5CLEdBQUEsSUFBQSt0QixPQUFBeEIsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLFNBQ0ssR0FBQWtpQixJQUFBM0csVUFBQXNCLGNBQ0wzM0IsRUFBQW5CLEdBQUF1c0IsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLFFBQ0ssR0FBQWtpQixJQUFBM0csVUFBQU8sbUJBQUEsSUFBQWtHLEVBQ0w5OEIsRUFBQW5CLEdBQUEsSUFBQWdlLFNBQUF1TyxFQUFBOFIsYUFBQXBpQixJQUNBQSxHQUFBLE9BQ0ssR0FBQWtpQixJQUFBM0csVUFBQU8saUJBQ0w1MkIsRUFBQW5CLEdBQUF1c0IsRUFBQThSLGFBQUFwaUIsR0FDQUEsR0FBQSxPQUNLLEdBQUFraUIsSUFBQTNHLFVBQUFlLGVBQUEsQ0FDTCxJQUFBOTBCLEVBQUE4b0IsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBQ0F2WSxFQUFBNm9CLEVBQUF0USxLQUFBc1EsRUFBQXRRLE1BQUEsRUFBQXNRLEVBQUF0USxNQUFBLEdBQUFzUSxFQUFBdFEsTUFBQSxHQUNBOWEsRUFBQW5CLEdBQUEsSUFBQTBPLEtBQUEsSUFBQXFPLE9BQUF0WixFQUFBQyxHQUFBNkIsaUJBQ0ssR0FBQTQ0QixJQUFBM0csVUFBQWMsa0JBQUEsQ0FDTCxPQUFBL0wsRUFBQXRRLElBQUEsSUFBQXNRLEVBQUF0USxHQUFBLFVBQUEvWCxNQUFBLDhCQUNBL0MsRUFBQW5CLEdBQUEsSUFBQXVzQixFQUFBdFEsVUFDSyxHQUFBa2lCLElBQUEzRyxVQUFBUyxpQkFBQSxDQUNMLElBQUFxRyxFQUFBcmlCLEVBQ0FzaUIsRUFBQWhTLEVBQUF0USxHQUFBc1EsRUFBQXRRLEVBQUEsTUFBQXNRLEVBQUF0USxFQUFBLE9BQUFzUSxFQUFBdFEsRUFBQSxPQUNBLEdBQUFzaUIsR0FBQSxHQUFBQSxFQUFBaFMsRUFBQXRvQixPQUFBZ1ksRUFBQSxVQUFBL1gsTUFBQSx3Q0FHQS9DLEVBQUFuQixHQURBNjlCLEVBQ0F0UixFQUFBdmUsTUFBQWlPLElBQUFzaUIsR0FFQWhCLGtCQUFBaFIsRUFBQStSLEVBQUFseUIsR0FBQSxHQUdBNlAsR0FBQXNpQixPQUNLLEdBQUFKLElBQUEzRyxVQUFBVSxnQkFBQSxDQUNMLElBQUFzRyxFQUFBdmlCLEVBRUF3aUIsRUFBQWxTLEVBQUF0USxHQUFBc1EsRUFBQXRRLEVBQUEsTUFBQXNRLEVBQUF0USxFQUFBLE9BQUFzUSxFQUFBdFEsRUFBQSxPQUVBeWlCLEVBQUF0eUIsRUFFQXV5QixFQUFBMWlCLEVBQUF3aUIsRUFFQSxHQUFBYixLQUFBNTlCLEdBQUEsQ0FHQSxRQUFBa0IsS0FGQXc5QixFQUFBLEdBRUF0eUIsRUFDQXN5QixFQUFBeDlCLEdBQUFrTCxFQUFBbEwsR0FHQXc5QixFQUFBLE9BS0EsR0FGQXY5QixFQUFBbkIsR0FBQXU5QixrQkFBQWhSLEVBQUFpUyxFQUFBRSxHQUFBLEdBRUEsSUFBQW5TLEdBREF0USxHQUFBd2lCLEdBQ0EsYUFBQXY2QixNQUFBLGlDQUNBLEdBQUErWCxJQUFBMGlCLEVBQUEsVUFBQXo2QixNQUFBLDZCQUNLLEdBQUFpNkIsSUFBQTNHLFVBQUFZLG9CQUNMajNCLEVBQUFuQixRQUFBOFYsT0FDSyxHQUFBcW9CLElBQUEzRyxVQUFBZ0IsZUFDTHIzQixFQUFBbkIsR0FBQSxVQUNLLEdBQUFtK0IsSUFBQTNHLFVBQUF3QixlQUFBLENBRUwsSUFBQTRGLEVBQUFyUyxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FFQTRpQixFQUFBdFMsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBRUE2aUIsRUFBQSxJQUFBL2hCLE9BQUE2aEIsRUFBQUMsR0FHQTE5QixFQUFBbkIsR0FEQWcrQixJQUFBLElBQUFDLEdBQ0FhLEVBQUF6M0IsZ0JBQUE0MUIsa0JBQUE2QixFQUFBcDNCLG1CQUFBdzFCLGlCQUFBNEIsRUFBQXY1QixXQUVBdTVCLE9BRUssR0FBQVgsSUFBQTNHLFVBQUF5QixxQkFBQSxDQUVMLElBQUF2dEIsRUFBQXF4QixTQUFBdlEsTUFBQSxJQUVBRCxFQUFBUCxLQUFBdGdCLEVBQUEsRUFBQXVRLElBQUEsSUFFQUEsR0FBQSxHQUVBLElBQUE4aUIsRUFBQSxJQUFBdEwsV0FBQS9uQixHQUVBdkssRUFBQW5CLEdBQUErK0IsRUFBQUMsU0FBQUQsRUFBQUMsV0FBQUQsT0FDSyxHQUFBWixJQUFBM0csVUFBQVcsaUJBQUEsQ0FDTCxJQUFBOEcsRUFBQTFTLEVBQUF0USxLQUFBc1EsRUFBQXRRLE1BQUEsRUFBQXNRLEVBQUF0USxNQUFBLEdBQUFzUSxFQUFBdFEsTUFBQSxHQUNBaWpCLEVBQUFELEVBQ0F6SixFQUFBakosRUFBQXRRLEtBRUEsR0FBQWdqQixFQUFBLFlBQUEvNkIsTUFBQSwyQ0FFQSxHQUFBKzZCLEVBQUFsQyxTQUFBTyxXQUFBL1EsR0FBQSxVQUFBcm9CLE1BQUEsOENBRUEsU0FBQXFvQixFQUFBLE9BRUEsR0FBQWlKLElBQUErQixPQUFBTCxtQkFBQSxDQUVBLElBREErSCxFQUFBMVMsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLElBQ0EsWUFBQS9YLE1BQUEsNERBQ0EsR0FBQSs2QixFQUFBQyxFQUFBLFlBQUFoN0IsTUFBQSw4REFDQSxHQUFBKzZCLEVBQUFDLEVBQUEsWUFBQWg3QixNQUFBLCtEQUlBL0MsRUFBQW5CLEdBREErOUIsR0FBQUUsRUFDQTFSLEVBQUF2ZSxNQUFBaU8sSUFBQWdqQixHQUVBLElBQUExSCxPQUFBaEwsRUFBQXZlLE1BQUFpTyxJQUFBZ2pCLEdBQUF6SixPQUVPLENBQ1AsSUFBQVUsRUFBQSxvQkFBQW4wQixXQUFBLElBQUFBLFdBQUEsSUFBQSt6QixZQUFBbUosSUFBQSxJQUFBNW9CLE1BQUE0b0IsR0FHQSxHQUFBekosSUFBQStCLE9BQUFMLG1CQUFBLENBRUEsSUFEQStILEVBQUExUyxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsSUFDQSxZQUFBL1gsTUFBQSw0REFDQSxHQUFBKzZCLEVBQUFDLEVBQUEsWUFBQWg3QixNQUFBLDhEQUNBLEdBQUErNkIsRUFBQUMsRUFBQSxZQUFBaDdCLE1BQUEsK0RBSUEsSUFBQXpFLEVBQUEsRUFBbUJBLEVBQUF3L0IsRUFBZ0J4L0IsSUFDbkN5MkIsRUFBQXoyQixHQUFBOHNCLEVBQUF0USxFQUFBeGMsR0FJQTBCLEVBQUFuQixHQURBKzlCLEdBQUFFLEVBQ0EvSCxFQUVBLElBQUFxQixPQUFBckIsRUFBQVYsR0FLQXZaLEdBQUFnakIsT0FDSyxHQUFBZCxJQUFBM0csVUFBQWlCLG1CQUFBLElBQUFxRixFQUFBLENBSUwsSUFGQXIrQixFQUFBd2MsRUFFQSxJQUFBc1EsRUFBQTlzQixNQUFBOHNCLEVBQUF0b0IsUUFDQXhFLElBSUEsR0FBQUEsR0FBQThzQixFQUFBdG9CLE9BQUEsVUFBQUMsTUFBQSxzQ0FFQSxJQUFBazNCLEVBQUE3TyxFQUFBL21CLFNBQUEsT0FBQXlXLEVBQUF4YyxHQU1BLElBRkFBLEVBRkF3YyxFQUFBeGMsRUFBQSxFQUlBLElBQUE4c0IsRUFBQTlzQixNQUFBOHNCLEVBQUF0b0IsUUFDQXhFLElBSUEsR0FBQUEsR0FBQThzQixFQUFBdG9CLE9BQUEsVUFBQUMsTUFBQSxzQ0FFQSxJQUFBaTdCLEVBQUE1UyxFQUFBL21CLFNBQUEsT0FBQXlXLEVBQUF4YyxHQUNBd2MsRUFBQXhjLEVBQUEsRUFFQSxJQUFBMi9CLEVBQUEsSUFBQS9vQixNQUFBOG9CLEVBQUFsN0IsUUFFQSxJQUFBeEUsRUFBQSxFQUFpQkEsRUFBQTAvQixFQUFBbDdCLE9BQTBCeEUsSUFDM0MsT0FBQTAvQixFQUFBMS9CLElBQ0EsUUFDQTIvQixFQUFBMy9CLEdBQUEsSUFDQSxNQUVBLFFBQ0EyL0IsRUFBQTMvQixHQUFBLElBQ0EsTUFFQSxRQUNBMi9CLEVBQUEzL0IsR0FBQSxJQUtBMEIsRUFBQW5CLEdBQUEsSUFBQW9ULE9BQUFnb0IsRUFBQWdFLEVBQUFuekIsS0FBQSxVQUNLLEdBQUFreUIsSUFBQTNHLFVBQUFpQixtQkFBQSxJQUFBcUYsRUFBQSxDQUlMLElBRkFyK0IsRUFBQXdjLEVBRUEsSUFBQXNRLEVBQUE5c0IsTUFBQThzQixFQUFBdG9CLFFBQ0F4RSxJQUlBLEdBQUFBLEdBQUE4c0IsRUFBQXRvQixPQUFBLFVBQUFDLE1BQUEsc0NBRUEsSUFBQW03QixFQUFBOVMsRUFBQS9tQixTQUFBLE9BQUF5VyxFQUFBeGMsR0FNQSxJQUZBQSxFQUZBd2MsRUFBQXhjLEVBQUEsRUFJQSxJQUFBOHNCLEVBQUE5c0IsTUFBQThzQixFQUFBdG9CLFFBQ0F4RSxJQUlBLEdBQUFBLEdBQUE4c0IsRUFBQXRvQixPQUFBLFVBQUFDLE1BQUEsc0NBRUEsSUFBQW83QixFQUFBL1MsRUFBQS9tQixTQUFBLE9BQUF5VyxFQUFBeGMsR0FFQXdjLEVBQUF4YyxFQUFBLEVBRUEwQixFQUFBbkIsR0FBQSxJQUFBeXBCLE9BQUE0VixFQUFBQyxRQUNLLEdBQUFuQixJQUFBM0csVUFBQW9CLGlCQUFBLENBQ0wsSUFBQTJHLEVBQUFoVCxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FFQSxHQUFBc2pCLEdBQUEsR0FBQUEsRUFBQWhULEVBQUF0b0IsT0FBQWdZLEdBQUEsSUFBQXNRLEVBQUF0USxFQUFBc2pCLEVBQUEsYUFBQXI3QixNQUFBLDZCQUVBL0MsRUFBQW5CLEdBQUF1c0IsRUFBQS9tQixTQUFBLE9BQUF5VyxJQUFBc2pCLEVBQUEsR0FDQXRqQixHQUFBc2pCLE9BQ0ssR0FBQXBCLElBQUEzRyxVQUFBdUIsb0JBQUEsQ0FDTCxJQUFBeUcsRUFBQWpULEVBQUF0USxLQUFBc1EsRUFBQXRRLE1BQUEsRUFBQXNRLEVBQUF0USxNQUFBLEdBQUFzUSxFQUFBdFEsTUFBQSxHQUVBd2pCLEVBQUFsVCxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FFQTlhLEVBQUFuQixHQUFBLElBQUF1ZixVQUFBaWdCLEVBQUFDLFFBQ0ssR0FBQXRCLElBQUEzRyxVQUFBMEIsa0JBQ0wvM0IsRUFBQW5CLEdBQUEsSUFBQSt6QixhQUNLLEdBQUFvSyxJQUFBM0csVUFBQTJCLGtCQUNMaDRCLEVBQUFuQixHQUFBLElBQUFxMEIsYUFDSyxHQUFBOEosSUFBQTNHLFVBQUFtQixlQUFBLENBQ0wsSUFBQStHLEVBQUFuVCxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FFQSxHQUFBeWpCLEdBQUEsR0FBQUEsRUFBQW5ULEVBQUF0b0IsT0FBQWdZLEdBQUEsSUFBQXNRLEVBQUF0USxFQUFBeWpCLEVBQUEsYUFBQXg3QixNQUFBLDZCQUNBLElBQUF5N0IsRUFBQXBULEVBQUEvbUIsU0FBQSxPQUFBeVcsSUFBQXlqQixFQUFBLEdBRUEsR0FBQWxDLEVBRUEsR0FBQUMsRUFBQSxDQUNBLElBQUF4WCxFQUFBeVgsRUFBQUMsRUFBQWdDLEtBRUF4K0IsRUFBQW5CLEdBQUE0L0Isb0JBQUF6QyxjQUFBbFgsRUFBQTBaLEVBQUF4K0IsUUFFQUEsRUFBQW5CLEdBQUE2L0IsWUFBQUYsUUFHQXgrQixFQUFBbkIsR0FBQSxJQUFBMk0sS0FBQWd6QixHQUlBMWpCLEdBQUF5akIsT0FDSyxHQUFBdkIsSUFBQTNHLFVBQUFxQix1QkFBQSxDQUNMLElBQUFpSCxFQUFBdlQsRUFBQXRRLEtBQUFzUSxFQUFBdFEsTUFBQSxFQUFBc1EsRUFBQXRRLE1BQUEsR0FBQXNRLEVBQUF0USxNQUFBLEdBRUEsR0FBQTZqQixFQUFBLEdBQ0EsVUFBQTU3QixNQUFBLDJEQUlBLElBQUE2N0IsR0FBQXhULEVBQUF0USxLQUFBc1EsRUFBQXRRLE1BQUEsRUFBQXNRLEVBQUF0USxNQUFBLEdBQUFzUSxFQUFBdFEsTUFBQSxHQUdBLEdBQUE4akIsSUFBQSxHQUFBQSxHQUFBeFQsRUFBQXRvQixPQUFBZ1ksR0FBQSxJQUFBc1EsRUFBQXRRLEVBQUE4akIsR0FBQSxhQUFBNzdCLE1BQUEsNkJBRUEsSUFBQTg3QixHQUFBelQsRUFBQS9tQixTQUFBLE9BQUF5VyxJQUFBOGpCLEdBQUEsR0FLQUUsR0FGQWhrQixHQUFBOGpCLEdBSUFHLEdBQUEzVCxFQUFBdFEsR0FBQXNRLEVBQUF0USxFQUFBLE1BQUFzUSxFQUFBdFEsRUFBQSxPQUFBc1EsRUFBQXRRLEVBQUEsT0FHQWtrQixHQUFBNUMsa0JBQUFoUixFQUFBMFQsR0FBQTd6QixHQUFBLEdBSUEsR0FGQTZQLEdBQUFpa0IsR0FFQUosRUFBQSxFQUFBSSxHQUFBSCxHQUNBLFVBQUE3N0IsTUFBQSx5REFJQSxHQUFBNDdCLEVBQUEsRUFBQUksR0FBQUgsR0FDQSxVQUFBNzdCLE1BQUEsNERBSUEsR0FBQXM1QixFQUFBLENBRUEsR0FBQUMsRUFBQSxDQUNBLElBQUEyQyxHQUFBMUMsRUFBQUMsRUFBQXFDLE9BR0E3K0IsRUFBQW5CLEdBQUE0L0Isb0JBQUF6QyxjQUFBaUQsR0FBQUosR0FBQTcrQixRQUVBQSxFQUFBbkIsR0FBQTYvQixZQUFBRyxJQUdBNytCLEVBQUFuQixHQUFBb3VCLE1BQUErUixRQUVBaC9CLEVBQUFuQixHQUFBLElBQUEyTSxLQUFBcXpCLEdBQUFHLFFBRUssSUFBQWhDLElBQUEzRyxVQUFBa0Isb0JBeUJMLFVBQUF4MEIsTUFBQSw4QkFBQWk2QixFQUFBMzRCLFNBQUEsdUJBQUF4RixFQUFBLDRDQXZCQSxJQUFBcWdDLEdBQUE5VCxFQUFBdFEsS0FBQXNRLEVBQUF0USxNQUFBLEVBQUFzUSxFQUFBdFEsTUFBQSxHQUFBc1EsRUFBQXRRLE1BQUEsR0FHQSxHQUFBb2tCLElBQUEsR0FBQUEsR0FBQTlULEVBQUF0b0IsT0FBQWdZLEdBQUEsSUFBQXNRLEVBQUF0USxFQUFBb2tCLEdBQUEsYUFBQW44QixNQUFBLDZCQUVBLElBQUE4NEIsZUFBQXpRLEVBQUF0USxJQUFBb2tCLEdBQUEsR0FDQSxVQUFBbjhCLE1BQUEseUNBR0EsSUFBQTJTLEdBQUEwVixFQUFBL21CLFNBQUEsT0FBQXlXLElBQUFva0IsR0FBQSxHQUVBcGtCLEdBQUFva0IsR0FFQSxJQUFBQyxHQUFBdkQsU0FBQXZRLE1BQUEsSUFDQUQsRUFBQVAsS0FBQXNVLEdBQUEsRUFBQXJrQixJQUFBLElBRUEsSUFBQXNrQixHQUFBLElBQUE1VCxTQUFBMlQsSUFHQXJrQixHQUFBLEdBRUE5YSxFQUFBbkIsR0FBQSxJQUFBazFCLE9BQUFyZSxHQUFBMHBCLEtBT0EsR0FBQS83QixJQUFBeVgsRUFBQTRhLEVBQUEsQ0FDQSxHQUFBdmYsRUFBQSxVQUFBcFQsTUFBQSxzQkFDQSxVQUFBQSxNQUFBLHVCQUlBLElBQUErMUIsR0FBQTk1QixPQUFBbWMsS0FBQW5iLEdBQUEwNEIsT0FBQSxTQUFBNW1CLEdBQ0EsT0FBQUEsRUFBQTZtQixXQUFBLE9BRUFyTyxJQUFBLEVBS0EsR0FKQXdPLEdBQUE1c0IsUUFBQSxTQUFBNEYsSUFDQSx5QkFBQTdPLFFBQUE2TyxLQUFBd1ksSUFBQSxNQUdBQSxHQUFBLE9BQUF0cUIsRUFFQSxTQUFBQSxFQUFBLFdBQUFBLEVBQUEsTUFDQSxJQUFBNnFCLEdBQUE3ckIsT0FBQW1NLE9BQUEsR0FBK0JuTCxHQUkvQixjQUhBNnFCLEdBQUErSSxZQUNBL0ksR0FBQWdKLFdBQ0FoSixHQUFBaUosSUFDQSxJQUFBQyxPQUFBL3pCLEVBQUE0ekIsS0FBQTV6QixFQUFBNnpCLElBQUE3ekIsRUFBQTh6QixLQUFBLEtBQUFqSixJQUdBLE9BQUE3cUIsRUFVQSxTQUFBeStCLG9CQUFBekMsY0FBQWxYLEtBQUEwWixlQUFBeCtCLFFBRUEsSUFBQVQsTUFBQSxLQVFBLE9BTkEsTUFBQXk4QixjQUFBbFgsUUFDQXVhLEtBQUEsV0FBQWIsZ0JBQ0F4QyxjQUFBbFgsTUFBQXZsQixPQUlBeThCLGNBQUFsWCxNQUFBaGxCLEtBQUFFLFFBVUEsU0FBQTArQixZQUFBRixnQkFFQSxJQUFBai9CLE1BQUEsS0FHQSxPQURBOC9CLEtBQUEsV0FBQWIsZ0JBQ0FqL0IsTUFHQSxJQUFBKy9CLGFBQUFyRCxjQWlDQSxTQUFBc0QsWUFBQW5VLEVBQUExYixFQUFBOHZCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTcrQixFQUNBbkMsRUFDQWloQyxFQUFBLFFBQUFILEVBQ0FJLEVBQUEsRUFBQUYsRUFBQUQsRUFBQSxFQUNBSSxHQUFBLEdBQUFELEdBQUEsRUFDQUUsRUFBQUQsR0FBQSxFQUNBRSxHQUFBLEVBQ0F6aEMsRUFBQXFoQyxFQUFBLEVBQUFELEVBQUEsRUFDQTlnQyxFQUFBK2dDLEVBQUEsS0FDQXQvQixFQUFBK3FCLEVBQUExYixFQUFBcFIsR0FNQSxJQUxBQSxHQUFBTSxFQUNBaUMsRUFBQVIsR0FBQSxJQUFBMC9CLEdBQUEsRUFDQTEvQixLQUFBMC9CLEVBQ0FBLEdBQUFILEVBRVFHLEVBQUEsRUFBV2wvQixFQUFBLElBQUFBLEVBQUF1cUIsRUFBQTFiLEVBQUFwUixNQUFBTSxFQUFBbWhDLEdBQUEsR0FPbkIsSUFKQXJoQyxFQUFBbUMsR0FBQSxJQUFBay9CLEdBQUEsRUFDQWwvQixLQUFBay9CLEVBQ0FBLEdBQUFOLEVBRVFNLEVBQUEsRUFBV3JoQyxFQUFBLElBQUFBLEVBQUEwc0IsRUFBQTFiLEVBQUFwUixNQUFBTSxFQUFBbWhDLEdBQUEsR0FHbkIsT0FBQWwvQixFQUNBQSxFQUFBLEVBQUFpL0IsTUFDRyxJQUFBai9CLElBQUFnL0IsRUFDSCxPQUFBbmhDLEVBQUFzaEMsSUFBQUMsS0FBQTUvQixHQUFBLEtBRUEzQixHQUFBK0QsS0FBQUMsSUFBQSxFQUFBKzhCLEdBQ0E1K0IsR0FBQWkvQixFQUdBLE9BQUF6L0IsR0FBQSxLQUFBM0IsRUFBQStELEtBQUFDLElBQUEsRUFBQTdCLEVBQUE0K0IsR0FHQSxTQUFBUyxhQUFBOVUsRUFBQTdyQixFQUFBbVEsRUFBQTh2QixFQUFBQyxFQUFBQyxHQUNBLElBQUE3K0IsRUFDQW5DLEVBQ0FDLEVBQ0FnaEMsRUFBQSxRQUFBSCxFQUNBSSxFQUFBLEVBQUFGLEVBQUFELEVBQUEsRUFDQUksR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQU0sRUFBQSxLQUFBVixFQUFBaDlCLEtBQUFDLElBQUEsT0FBQUQsS0FBQUMsSUFBQSxTQUNBcEUsRUFBQXFoQyxFQUFBRCxFQUFBLElBQ0E5Z0MsRUFBQStnQyxHQUFBLElBQ0F0L0IsRUFBQWQsRUFBQSxPQUFBQSxHQUFBLEVBQUFBLEVBQUEsTUF1Q0EsSUF0Q0FBLEVBQUFrRCxLQUFBMjlCLElBQUE3Z0MsR0FFQXFDLE1BQUFyQyxRQUFBMGdDLEtBQ0F2aEMsRUFBQWtELE1BQUFyQyxHQUFBLElBQ0FzQixFQUFBZy9CLElBRUFoL0IsRUFBQTRCLEtBQUFtRyxNQUFBbkcsS0FBQXNHLElBQUF4SixHQUFBa0QsS0FBQXVHLEtBRUF6SixHQUFBWixFQUFBOEQsS0FBQUMsSUFBQSxHQUFBN0IsSUFBQSxJQUNBQSxJQUNBbEMsR0FBQSxJQUlBWSxHQURBc0IsRUFBQWkvQixHQUFBLEVBQ0FLLEVBQUF4aEMsRUFFQXdoQyxFQUFBMTlCLEtBQUFDLElBQUEsSUFBQW85QixJQUdBbmhDLEdBQUEsSUFDQWtDLElBQ0FsQyxHQUFBLEdBR0FrQyxFQUFBaS9CLEdBQUFELEdBQ0FuaEMsRUFBQSxFQUNBbUMsRUFBQWcvQixHQUNLaC9CLEVBQUFpL0IsR0FBQSxHQUNMcGhDLEdBQUFhLEVBQUFaLEVBQUEsR0FBQThELEtBQUFDLElBQUEsRUFBQSs4QixHQUNBNStCLEdBQUFpL0IsSUFFQXBoQyxFQUFBYSxFQUFBa0QsS0FBQUMsSUFBQSxFQUFBbzlCLEVBQUEsR0FBQXI5QixLQUFBQyxJQUFBLEVBQUErOEIsR0FDQTUrQixFQUFBLElBSUFlLE1BQUFyQyxLQUFBYixFQUFBLEdBRUErZ0MsR0FBQSxHQUNBclUsRUFBQTFiLEVBQUFwUixHQUFBLElBQUFJLEVBQ0FKLEdBQUFNLEVBQ0FGLEdBQUEsSUFDQStnQyxHQUFBLEVBT0EsSUFKQTUrQixLQUFBNCtCLEVBQUEvZ0MsRUFDQWtELE1BQUFyQyxLQUFBc0IsR0FBQSxHQUNBKytCLEdBQUFILEVBRUFHLEVBQUEsR0FDQXhVLEVBQUExYixFQUFBcFIsR0FBQSxJQUFBdUMsRUFDQXZDLEdBQUFNLEVBQ0FpQyxHQUFBLElBQ0ErK0IsR0FBQSxFQUdBeFUsRUFBQTFiLEVBQUFwUixFQUFBTSxJQUFBLElBQUF5QixFQUdBLElBQUFnZ0MsYUFBQSxDQUNBZCx3QkFDQVcsMkJBR0EsU0FBQUksVUFBQW4vQixHQUE4VSxPQUExT20vQixVQUEzRSxtQkFBQWpoQyxRQUFBLGlCQUFBQSxPQUFBMGQsU0FBMkUsU0FBQTViLEdBQW9DLGNBQUFBLEdBQStCLFNBQUFBLEdBQW9DLE9BQUFBLEdBQUEsbUJBQUE5QixRQUFBOEIsRUFBQTZiLGNBQUEzZCxRQUFBOEIsSUFBQTlCLE9BQUFhLFVBQUEsZ0JBQUFpQixJQUFtSUEsR0FFOVUsSUFBQW8vQixTQUFldG1CLDRDQUFBckksRUFBTTlGLE9BQ3JCMDBCLGVBQUFILGFBQUFILGFBQ0FPLDJCQUFBaGlCLE1BQUFILHlCQUNBb2lCLFNBQUEsT0FFQUMsV0FBQSxJQUFBQyxJQUFBLHFDQUVBQyxTQUFBLFNBQUFqaUMsR0FDQSxpQkFBQTBoQyxVQUFBMWhDLElBQUEsa0JBQUFJLE9BQUFrQixVQUFBbUUsU0FBQTVGLEtBQUFHLElBR0FraUMsV0FBQSxTQUFBbGlDLEdBQ0EsMEJBQUFJLE9BQUFrQixVQUFBbUUsU0FBQTVGLEtBQUFHLElBR0EsU0FBQW1pQyxnQkFBQTNWLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUEzRSxHQUVBaVYsRUFBQXRRLEtBQUF1YixVQUFBUSxpQkFFQSxJQUFBbUssRUFBQTdxQixFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxHQURBdFEsSUFBQWttQixFQUFBLEdBQ0EsS0FFQSxJQUFBMzlCLEVBQUErbkIsRUFBQTZKLE1BQUExMUIsRUFBQXViLEVBQUEsVUFVQSxPQVJBc1EsRUFBQXRRLEVBQUEsR0FBQXpYLEVBQUEsVUFDQStuQixFQUFBdFEsRUFBQSxHQUFBelgsRUFBQSxVQUNBK25CLEVBQUF0USxFQUFBLEdBQUF6WCxFQUFBLFNBQ0ErbkIsRUFBQXRRLEdBQUF6WCxFQUFBLE1BRUF5WCxJQUFBLEVBQUF6WCxFQUVBK25CLEVBQUF0USxLQUFBLEVBQ0FBLEVBR0EsU0FBQW1tQixnQkFBQTdWLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUEzRSxHQUVBLEdBQUExVCxLQUFBbUcsTUFBQXJKLFdBQUE4MkIsVUFBQU0sWUFBQXAzQixHQUFBODJCLFVBQUFLLFdBR0EsR0FBQW4zQixHQUFBODJCLFVBQUFFLGdCQUFBaDNCLEdBQUE4MkIsVUFBQUMsZUFFQWxMLEVBQUF0USxLQUFBdWIsVUFBQXNCLGNBSUE3YyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQXNRLEVBQUF0USxLQUFBLElBQUF2YixFQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxNQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxPQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxZQUNLLEdBQUFBLEdBQUE4MkIsVUFBQU0sWUFBQXAzQixHQUFBODJCLFVBQUFLLFdBQUEsQ0FFTHRMLEVBQUF0USxLQUFBdWIsVUFBQU8saUJBS0E5YixHQUhBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUlBc1EsRUFBQXRRLEtBQUEsRUFFQTBsQixlQUFBcFYsRUFBQTdyQixFQUFBdWIsRUFBQSxlQUVBQSxHQUFBLE1BQ0ssQ0FFTHNRLEVBQUF0USxLQUFBdWIsVUFBQXdCLGVBS0EvYyxHQUhBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUlBc1EsRUFBQXRRLEtBQUEsRUFDQSxJQUFBb21CLEVBQUF0bEIsT0FBQWphLFdBQUFwQyxHQUNBK0MsRUFBQTQrQixFQUFBaDhCLGFBQ0EzQyxFQUFBMitCLEVBQUFsOEIsY0FFQW9tQixFQUFBdFEsS0FBQSxJQUFBeFksRUFDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsTUFDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsT0FDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsT0FFQThvQixFQUFBdFEsS0FBQSxJQUFBdlksRUFDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsTUFDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsT0FDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsWUFJQTZvQixFQUFBdFEsS0FBQXViLFVBQUFPLGlCQUtBOWIsR0FIQTNFLEVBQUFpVixFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxTQUFBc1EsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsUUFJQXNRLEVBQUF0USxLQUFBLEVBRUEwbEIsZUFBQXBWLEVBQUE3ckIsRUFBQXViLEVBQUEsZUFFQUEsR0FBQSxFQUdBLE9BQUFBLEVBR0EsU0FBQXFtQixjQUFBL1YsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBUUEsT0FOQWlWLEVBQUF0USxLQUFBdWIsVUFBQWdCLGVBSUF2YyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFDQUEsRUFHQSxTQUFBc21CLGlCQUFBaFcsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBVUEsT0FSQWlWLEVBQUF0USxLQUFBdWIsVUFBQWMsa0JBSUFyYyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQXNRLEVBQUF0USxLQUFBdmIsRUFBQSxJQUNBdWIsRUFHQSxTQUFBdW1CLGNBQUFqVyxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FFQWlWLEVBQUF0USxLQUFBdWIsVUFBQWUsZUFJQXRjLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUVBLElBQUF3bUIsRUFBQTFsQixPQUFBamEsV0FBQXBDLEVBQUFrTyxXQUNBbkwsRUFBQWcvQixFQUFBcDhCLGFBQ0EzQyxFQUFBKytCLEVBQUF0OEIsY0FXQSxPQVRBb21CLEVBQUF0USxLQUFBLElBQUF4WSxFQUNBOG9CLEVBQUF0USxLQUFBeFksR0FBQSxNQUNBOG9CLEVBQUF0USxLQUFBeFksR0FBQSxPQUNBOG9CLEVBQUF0USxLQUFBeFksR0FBQSxPQUVBOG9CLEVBQUF0USxLQUFBLElBQUF2WSxFQUNBNm9CLEVBQUF0USxLQUFBdlksR0FBQSxNQUNBNm9CLEVBQUF0USxLQUFBdlksR0FBQSxPQUNBNm9CLEVBQUF0USxLQUFBdlksR0FBQSxPQUNBdVksRUFHQSxTQUFBeW1CLGdCQUFBblcsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBU0EsR0FQQWlWLEVBQUF0USxLQUFBdWIsVUFBQWlCLGlCQUlBeGMsR0FGQTNFLEVBQUFpVixFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxTQUFBc1EsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsUUFHQXNRLEVBQUF0USxLQUFBLEVBRUF2YixFQUFBMDZCLFFBQUEsTUFBQTE2QixFQUFBMDZCLE9BQUE3VCxNQUFBc2EsVUFDQSxNQUFBMzlCLE1BQUEsU0FBQXhELEVBQUEwNkIsT0FBQSxnQ0FnQkEsT0FaQW5mLEdBQUFzUSxFQUFBNkosTUFBQTExQixFQUFBMDZCLE9BQUFuZixFQUFBLFFBRUFzUSxFQUFBdFEsS0FBQSxFQUVBdmIsRUFBQWlpQyxhQUFBcFcsRUFBQXRRLEtBQUEsS0FFQXZiLEVBQUE2YSxTQUFBZ1IsRUFBQXRRLEtBQUEsS0FFQXZiLEVBQUFraUMsWUFBQXJXLEVBQUF0USxLQUFBLEtBR0FzUSxFQUFBdFEsS0FBQSxFQUNBQSxFQUdBLFNBQUE0bUIsb0JBQUF0VyxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FTQSxHQVBBaVYsRUFBQXRRLEtBQUF1YixVQUFBaUIsaUJBSUF4YyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQSxNQUFBdmIsRUFBQXdzQixRQUFBM0YsTUFBQXNhLFVBR0EsTUFBQTM5QixNQUFBLFdBQUF4RCxFQUFBd3NCLFFBQUEsZ0NBV0EsT0FQQWpSLEdBQUFzUSxFQUFBNkosTUFBQTExQixFQUFBd3NCLFFBQUFqUixFQUFBLFFBRUFzUSxFQUFBdFEsS0FBQSxFQUVBQSxHQUFBc1EsRUFBQTZKLE1BQUExMUIsRUFBQTBMLFFBQUEyQixNQUFBLElBQUFpZixPQUFBL2dCLEtBQUEsSUFBQWdRLEVBQUEsUUFFQXNRLEVBQUF0USxLQUFBLEVBQ0FBLEVBR0EsU0FBQTZtQixnQkFBQXZXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUEzRSxHQWVBLE9BYkEsT0FBQTVXLEVBQ0E2ckIsRUFBQXRRLEtBQUF1YixVQUFBZ0IsZUFDRyxXQUFBOTNCLEVBQUFpN0IsVUFDSHBQLEVBQUF0USxLQUFBdWIsVUFBQTBCLGtCQUVBM00sRUFBQXRRLEtBQUF1YixVQUFBMkIsa0JBTUFsZCxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFDQUEsRUFHQSxTQUFBOG1CLGtCQUFBeFcsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBU0EsR0FQQWlWLEVBQUF0USxLQUFBdWIsVUFBQWEsY0FJQXBjLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUVBLGlCQUFBdmIsRUFBQThTLEdBQ0ErWSxFQUFBNkosTUFBQTExQixFQUFBOFMsR0FBQXlJLEVBQUEsY0FDRyxLQUFBdmIsRUFBQThTLEtBQUE5UyxFQUFBOFMsR0FBQXdZLEtBR0gsVUFBQXpVLFVBQUEsV0FBQWpHLEtBQUErUyxVQUFBM2pCLEdBQUEsNkJBRkFBLEVBQUE4UyxHQUFBd1ksS0FBQU8sRUFBQXRRLEVBQUEsTUFNQSxPQUFBQSxFQUFBLEdBR0EsU0FBQSttQixnQkFBQXpXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUEzRSxHQUVBaVYsRUFBQXRRLEtBQUF1YixVQUFBVyxpQkFJQWxjLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUVBLElBQUF6WCxFQUFBOUQsRUFBQXVELE9BWUEsT0FWQXNvQixFQUFBdFEsS0FBQSxJQUFBelgsRUFDQStuQixFQUFBdFEsS0FBQXpYLEdBQUEsTUFDQStuQixFQUFBdFEsS0FBQXpYLEdBQUEsT0FDQStuQixFQUFBdFEsS0FBQXpYLEdBQUEsT0FFQStuQixFQUFBdFEsS0FBQXViLFVBQUE5Qiw0QkFFQWgxQixFQUFBc3JCLEtBQUFPLEVBQUF0USxFQUFBLEVBQUF6WCxHQUVBeVgsR0FBQXpYLEVBSUEsU0FBQXkrQixnQkFBQTFXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxFQUFBQyxFQUFBOXJCLEVBQUErckIsR0FDQSxRQUFBNWpDLEVBQUEsRUFBaUJBLEVBQUE0akMsRUFBQXAvQixPQUFpQnhFLElBQ2xDLEdBQUE0akMsRUFBQTVqQyxLQUFBaUIsRUFBQSxVQUFBd0QsTUFBQSw4QkFJQW0vQixFQUFBbDJCLEtBQUF6TSxHQUVBNnJCLEVBQUF0USxLQUFBNUYsTUFBQWlCLFFBQUE1VyxHQUFBODJCLFVBQUFVLGdCQUFBVixVQUFBUyxpQkFJQWhjLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUNBLElBQUE2YSxFQUFBd00sY0FBQS9XLEVBQUE3ckIsRUFBQXdpQyxFQUFBam5CLEVBQUFvSixFQUFBLEVBQUE4ZCxFQUFBQyxFQUFBQyxHQUdBLE9BREFBLEVBQUFsYyxNQUNBMlAsRUFHQSxTQUFBeU0sb0JBQUFoWCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FTQSxPQVJBaVYsRUFBQXRRLEtBQUF1YixVQUFBeUIscUJBSUFoZCxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQXZiLEVBQUFnTCxNQUFBc2dCLEtBQUFPLEVBQUF0USxFQUFBLE1BQ0FBLEVBQUEsR0FHQSxTQUFBdW5CLGNBQUFqWCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FFQWlWLEVBQUF0USxLQUFBLFNBQUF2YixFQUFBaTdCLFVBQUFuRSxVQUFBd0IsZUFBQXhCLFVBQUF1QixvQkFJQTljLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUVBLElBQUF4WSxFQUFBL0MsRUFBQTJGLGFBQ0EzQyxFQUFBaEQsRUFBQXlGLGNBV0EsT0FUQW9tQixFQUFBdFEsS0FBQSxJQUFBeFksRUFDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsTUFDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsT0FDQThvQixFQUFBdFEsS0FBQXhZLEdBQUEsT0FFQThvQixFQUFBdFEsS0FBQSxJQUFBdlksRUFDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsTUFDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsT0FDQTZvQixFQUFBdFEsS0FBQXZZLEdBQUEsT0FDQXVZLEVBR0EsU0FBQXduQixlQUFBbFgsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBYUEsT0FYQWlWLEVBQUF0USxLQUFBdWIsVUFBQXNCLGNBSUE3YyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQXNRLEVBQUF0USxLQUFBLElBQUF2YixFQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxNQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxPQUNBNnJCLEVBQUF0USxLQUFBdmIsR0FBQSxPQUNBdWIsRUFHQSxTQUFBeW5CLGdCQUFBblgsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQTNFLEdBWUEsT0FWQWlWLEVBQUF0USxLQUFBdWIsVUFBQU8saUJBSUE5YixHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQTBsQixlQUFBcFYsRUFBQTdyQixRQUFBdWIsRUFBQSxlQUVBQSxHQUFBLEVBSUEsU0FBQTBuQixrQkFBQXBYLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUFpbkIsRUFBQTdkLEVBQUEvTixHQUNBaVYsRUFBQXRRLEtBQUF1YixVQUFBbUIsZUFJQTFjLEdBRkEzRSxFQUFBaVYsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsU0FBQXNRLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFFBR0FzUSxFQUFBdFEsS0FBQSxFQUVBLElBQUEwakIsRUFBQWlDLDJCQUFBbGhDLEdBRUE4RCxFQUFBK25CLEVBQUE2SixNQUFBdUosRUFBQTFqQixFQUFBLFlBVUEsT0FSQXNRLEVBQUF0USxHQUFBLElBQUF6WCxFQUNBK25CLEVBQUF0USxFQUFBLEdBQUF6WCxHQUFBLE1BQ0ErbkIsRUFBQXRRLEVBQUEsR0FBQXpYLEdBQUEsT0FDQStuQixFQUFBdFEsRUFBQSxHQUFBelgsR0FBQSxPQUVBeVgsSUFBQSxFQUFBelgsRUFBQSxFQUVBK25CLEVBQUF0USxLQUFBLEVBQ0FBLEVBR0EsU0FBQTJuQixjQUFBclgsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQWluQixFQUFBN2QsRUFBQThkLEVBQUFDLEVBQUE5ckIsR0FDQSxHQUFBNVcsRUFBQTB0QixPQUFBLFdBQUFxVCxVQUFBL2dDLEVBQUEwdEIsT0FBQSxDQUVBN0IsRUFBQXRRLEtBQUF1YixVQUFBcUIsdUJBSUE1YyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQSxJQUFBNGEsRUFBQTVhLEVBR0EwakIsRUFBQSxpQkFBQWovQixFQUFBaU0sS0FBQWpNLEVBQUFpTSxLQUFBak0sRUFBQWlNLEtBQUFuSCxXQUVBeVcsR0FBQSxFQUVBLElBQUE0bkIsRUFBQXRYLEVBQUE2SixNQUFBdUosRUFBQTFqQixFQUFBLFlBRUFzUSxFQUFBdFEsR0FBQSxJQUFBNG5CLEVBQ0F0WCxFQUFBdFEsRUFBQSxHQUFBNG5CLEdBQUEsTUFDQXRYLEVBQUF0USxFQUFBLEdBQUE0bkIsR0FBQSxPQUNBdFgsRUFBQXRRLEVBQUEsR0FBQTRuQixHQUFBLE9BRUF0WCxFQUFBdFEsRUFBQSxFQUFBNG5CLEVBQUEsS0FFQTVuQixJQUFBNG5CLEVBQUEsRUFHQSxJQUFBL00sRUFBQXdNLGNBQUEvVyxFQUFBN3JCLEVBQUEwdEIsTUFBQThVLEVBQUFqbkIsRUFBQW9KLEVBQUEsRUFBQThkLEVBQUFDLEdBQ0FubkIsRUFBQTZhLEVBQUEsRUFFQSxJQUFBZ0osRUFBQWhKLEVBQUFELEVBRUF0SyxFQUFBc0ssS0FBQSxJQUFBaUosRUFDQXZULEVBQUFzSyxLQUFBaUosR0FBQSxNQUNBdlQsRUFBQXNLLEtBQUFpSixHQUFBLE9BQ0F2VCxFQUFBc0ssS0FBQWlKLEdBQUEsT0FFQXZULEVBQUF0USxLQUFBLE1BQ0csQ0FDSHNRLEVBQUF0USxLQUFBdWIsVUFBQW1CLGVBS0ExYyxHQUhBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUlBc1EsRUFBQXRRLEtBQUEsRUFFQSxJQUFBK2pCLEVBQUF0L0IsRUFBQWlNLEtBQUFuSCxXQUdBaEIsRUFBQStuQixFQUFBNkosTUFBQTRKLEVBQUEvakIsRUFBQSxZQUVBc1EsRUFBQXRRLEdBQUEsSUFBQXpYLEVBQ0ErbkIsRUFBQXRRLEVBQUEsR0FBQXpYLEdBQUEsTUFDQStuQixFQUFBdFEsRUFBQSxHQUFBelgsR0FBQSxPQUNBK25CLEVBQUF0USxFQUFBLEdBQUF6WCxHQUFBLE9BRUF5WCxJQUFBLEVBQUF6WCxFQUFBLEVBRUErbkIsRUFBQXRRLEtBQUEsRUFHQSxPQUFBQSxFQUdBLFNBQUE2bkIsZ0JBQUF2WCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FFQWlWLEVBQUF0USxLQUFBdWIsVUFBQVcsaUJBSUFsYyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFFQSxJQUFBMGEsRUFBQWoyQixTQUFBLEdBRUE4RCxFQUFBOUQsRUFBQWkxQixTQXVCQSxPQXJCQWoxQixFQUFBKzBCLFdBQUE4QixPQUFBTCxxQkFBQTF5QixHQUFBLEdBRUErbkIsRUFBQXRRLEtBQUEsSUFBQXpYLEVBQ0ErbkIsRUFBQXRRLEtBQUF6WCxHQUFBLE1BQ0ErbkIsRUFBQXRRLEtBQUF6WCxHQUFBLE9BQ0ErbkIsRUFBQXRRLEtBQUF6WCxHQUFBLE9BRUErbkIsRUFBQXRRLEtBQUF2YixFQUFBKzBCLFNBRUEvMEIsRUFBQSswQixXQUFBOEIsT0FBQUwscUJBQ0ExeUIsR0FBQSxFQUNBK25CLEVBQUF0USxLQUFBLElBQUF6WCxFQUNBK25CLEVBQUF0USxLQUFBelgsR0FBQSxNQUNBK25CLEVBQUF0USxLQUFBelgsR0FBQSxPQUNBK25CLEVBQUF0USxLQUFBelgsR0FBQSxRQUlBbXlCLEVBQUEzSyxLQUFBTyxFQUFBdFEsRUFBQSxFQUFBdmIsRUFBQWkxQixVQUVBMVosR0FBQXZiLEVBQUFpMUIsU0FJQSxTQUFBb08sZ0JBQUF4WCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBM0UsR0FFQWlWLEVBQUF0USxLQUFBdWIsVUFBQW9CLGlCQUlBM2MsR0FGQTNFLEVBQUFpVixFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxTQUFBc1EsRUFBQTZKLE1BQUFwMUIsRUFBQWliLEVBQUEsUUFHQXNRLEVBQUF0USxLQUFBLEVBRUEsSUFBQXpYLEVBQUErbkIsRUFBQTZKLE1BQUExMUIsUUFBQXViLEVBQUEsWUFVQSxPQVJBc1EsRUFBQXRRLEdBQUEsSUFBQXpYLEVBQ0ErbkIsRUFBQXRRLEVBQUEsR0FBQXpYLEdBQUEsTUFDQStuQixFQUFBdFEsRUFBQSxHQUFBelgsR0FBQSxPQUNBK25CLEVBQUF0USxFQUFBLEdBQUF6WCxHQUFBLE9BRUF5WCxJQUFBLEVBQUF6WCxFQUFBLEVBRUErbkIsRUFBQXRRLEtBQUEsRUFDQUEsRUFHQSxTQUFBK25CLGVBQUF6WCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBb0osRUFBQThkLEVBQUE3ckIsR0FFQWlWLEVBQUF0USxLQUFBdWIsVUFBQVMsaUJBSUFoYyxHQUZBM0UsRUFBQWlWLEVBQUE2SixNQUFBcDFCLEVBQUFpYixFQUFBLFNBQUFzUSxFQUFBNkosTUFBQXAxQixFQUFBaWIsRUFBQSxRQUdBc1EsRUFBQXRRLEtBQUEsRUFDQSxJQUNBNmEsRUFEQUQsRUFBQTVhLEVBRUE0SyxFQUFBLENBQ0FrTyxLQUFBcjBCLEVBQUFnMEIsWUFBQWgwQixFQUFBbVcsVUFFQW1lLElBQUF0MEIsRUFBQWkwQixLQUVBLE1BQUFqMEIsRUFBQWswQixLQUFBL04sRUFBQW9PLElBQUF2MEIsRUFBQWswQixJQUlBLElBQUFwd0IsR0FGQXN5QixFQUFBd00sY0FBQS9XLEVBREExRixFQUFBMW1CLE9BQUFtTSxPQUFBdWEsRUFBQW5tQixFQUFBbTBCLFNBQ0EsRUFBQTVZLEVBQUFvSixFQUFBLEVBQUE4ZCxJQUVBdE0sRUFPQSxPQUxBdEssRUFBQXNLLEtBQUEsSUFBQXJ5QixFQUNBK25CLEVBQUFzSyxLQUFBcnlCLEdBQUEsTUFDQStuQixFQUFBc0ssS0FBQXJ5QixHQUFBLE9BQ0ErbkIsRUFBQXNLLEtBQUFyeUIsR0FBQSxPQUVBc3lCLEVBR0EsU0FBQXdNLGNBQUEvVyxFQUFBcHJCLEVBQUEraEMsRUFBQWUsRUFBQTVlLEVBQUE4ZCxFQUFBQyxFQUFBQyxHQUNBWSxLQUFBLEdBQ0FaLEtBQUEsSUFFQWwyQixLQUFBaE0sR0FFQSxJQUFBOGEsRUFBQWdvQixFQUFBLEVBRUEsR0FBQTV0QixNQUFBaUIsUUFBQW5XLEdBRUEsUUFBQTFCLEVBQUEsRUFBbUJBLEVBQUEwQixFQUFBOEMsT0FBbUJ4RSxJQUFBLENBQ3RDLElBQUF1QixFQUFBLEdBQUF2QixFQUNBaUIsRUFBQVMsRUFBQTFCLEdBRUEsR0FBQWlCLEtBQUF3akMsT0FBQSxDQUNBLHNCQUFBeGpDLEVBQUF3akMsT0FBQSxVQUFBM3NCLFVBQUEsNEJBQ0E3VyxJQUFBd2pDLFNBR0EsSUFBQXYwQixFQUFBOHhCLFVBQUEvZ0MsR0FFQSxjQUFBaVAsRUFDQXNNLEVBQUFpbUIsZ0JBQUEzVixFQUFBdnJCLEVBQUFOLEVBQUF1YixHQUFBLFFBQ08sY0FBQXRNLEVBQ1BzTSxFQUFBbW1CLGdCQUFBN1YsRUFBQXZyQixFQUFBTixFQUFBdWIsR0FBQSxRQUNPLGVBQUF0TSxFQUNQc00sRUFBQXNtQixpQkFBQWhXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxHQUFBdmIsYUFBQWdPLE1BQUFzekIsU0FBQXRoQyxHQUNQdWIsRUFBQXVtQixjQUFBalcsRUFBQXZyQixFQUFBTixFQUFBdWIsR0FBQSxRQUNPLFFBQUFuRyxJQUFBcFYsRUFDUHViLEVBQUFxbUIsY0FBQS9WLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxVQUFBdmIsRUFDUHViLEVBQUFxbUIsY0FBQS9WLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxnQkFBQXZiLEVBQUEsd0JBQUFBLEVBQUEsVUFDUHViLEVBQUE4bUIsa0JBQUF4VyxFQUFBdnJCLEVBQUFOLEVBQUF1YixHQUFBLFFBQ08sR0FBQXlsQixTQUFBdFosU0FBQTFuQixHQUNQdWIsRUFBQSttQixnQkFBQXpXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxHQUFBdmIsYUFBQTBTLFFBQUE2dUIsV0FBQXZoQyxHQUNQdWIsRUFBQXltQixnQkFBQW5XLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxjQUFBdE0sR0FBQSxNQUFBalAsRUFBQSxVQUNQdWIsRUFBQWduQixnQkFBQTFXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxFQUFBQyxHQUFBLEVBQUFDLFFBQ08sY0FBQTF6QixHQUFBLGVBQUFqUCxFQUFBLFVBQ1B1YixFQUFBc25CLG9CQUFBaFgsRUFBQXZyQixFQUFBTixFQUFBdWIsR0FBQSxRQUNPLFlBQUF2YixFQUFBLHlCQUFBQSxFQUFBLFVBQ1B1YixFQUFBdW5CLGNBQUFqWCxFQUFBdnJCLEVBQUFOLEVBQUF1YixHQUFBLFFBQ08sY0FBQXZiLEVBQUEsVUFDUHViLEVBQUF5bkIsZ0JBQUFuWCxFQUFBdnJCLEVBQUFOLEVBQUF1YixHQUFBLFFBQ08sc0JBQUF2YixHQUFBeWlDLEVBQ1BsbkIsRUFBQTBuQixrQkFBQXBYLEVBQUF2ckIsRUFBQU4sRUFBQXViLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxHQUFBLFFBQ08sWUFBQXppQyxFQUFBLFVBQ1B1YixFQUFBMm5CLGNBQUFyWCxFQUFBdnJCLEVBQUFOLEVBQUF1YixFQUFBaW5CLEVBQUE3ZCxFQUFBOGQsRUFBQUMsR0FBQSxRQUNPLGNBQUExaUMsRUFBQSxVQUNQdWIsRUFBQTZuQixnQkFBQXZYLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxjQUFBdmIsRUFBQSxVQUNQdWIsRUFBQThuQixnQkFBQXhYLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxhQUFBdmIsRUFBQSxVQUNQdWIsRUFBQStuQixlQUFBelgsRUFBQXZyQixFQUFBTixFQUFBdWIsRUFBQW9KLEVBQUE4ZCxHQUFBLFFBQ08sa0JBQUF6aUMsRUFBQSxVQUNQdWIsRUFBQTRtQixvQkFBQXRXLEVBQUF2ckIsRUFBQU4sRUFBQXViLEdBQUEsUUFDTyxhQUFBdmIsRUFBQSxVQUNQdWIsRUFBQXduQixlQUFBbFgsRUFBQXZyQixFQUFBTixFQUFBdWIsR0FBQSxRQUNPLGNBQUF2YixFQUFBLHNCQUFBQSxFQUFBLFVBQ1B1YixFQUFBNm1CLGdCQUFBdlcsRUFBQXZyQixFQUFBTixFQUFBdWIsR0FBQSxRQUNPLFlBQUF2YixFQUFBLFVBQ1AsVUFBQTZXLFVBQUEsc0NBQUE3VyxFQUFBLGdCQUdHLEdBQUFTLGFBQUE0SyxJQUlILElBSEEsSUFBQW1TLEVBQUEvYyxFQUFBNlMsVUFDQW1JLEdBQUEsR0FFQUEsR0FBQSxDQUVBLElBQUFMLEVBQUFvQyxFQUFBaEMsT0FHQSxLQUZBQyxFQUFBTCxFQUFBSyxNQUVBLENBRUEsSUFBQWdvQixFQUFBcm9CLEVBQUFwYixNQUFBLEdBQ0EwakMsRUFBQXRvQixFQUFBcGIsTUFBQSxHQUVBMmpDLEVBQUE1QyxVQUFBMkMsR0FHQSxvQkFBQUQsSUFBQXJDLFdBQUF6bEIsSUFBQThuQixHQUFBLENBQ0EsU0FBQUEsRUFBQTVjLE1BQUFzYSxVQUdBLE1BQUEzOUIsTUFBQSxPQUFBaWdDLEVBQUEsZ0NBR0EsR0FBQWpCLEVBQUEsQ0FDQSxTQUFBaUIsRUFBQSxHQUNBLE1BQUFqZ0MsTUFBQSxPQUFBaWdDLEVBQUEsNEJBQ1csSUFBQUEsRUFBQS8vQixRQUFBLEtBQ1gsTUFBQUYsTUFBQSxPQUFBaWdDLEVBQUEsMEJBS0EsY0FBQUUsRUFDQXBvQixFQUFBaW1CLGdCQUFBM1YsRUFBQTRYLEVBQUFDLEVBQUFub0IsUUFDTyxjQUFBb29CLEVBQ1Bwb0IsRUFBQW1tQixnQkFBQTdWLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sZUFBQW9vQixFQUNQcG9CLEVBQUFzbUIsaUJBQUFoVyxFQUFBNFgsRUFBQUMsRUFBQW5vQixRQUNPLEdBQUFtb0IsYUFBQTExQixNQUFBc3pCLFNBQUFvQyxHQUNQbm9CLEVBQUF1bUIsY0FBQWpXLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sVUFBQW1vQixRQUFBdHVCLElBQUFzdUIsSUFBQSxJQUFBaEIsRUFDUG5uQixFQUFBcW1CLGNBQUEvVixFQUFBNFgsRUFBQUMsRUFBQW5vQixRQUNPLGdCQUFBbW9CLEVBQUEsd0JBQUFBLEVBQUEsVUFDUG5vQixFQUFBOG1CLGtCQUFBeFcsRUFBQTRYLEVBQUFDLEVBQUFub0IsUUFDTyxHQUFBeWxCLFNBQUF0WixTQUFBZ2MsR0FDUG5vQixFQUFBK21CLGdCQUFBelcsRUFBQTRYLEVBQUFDLEVBQUFub0IsUUFDTyxHQUFBbW9CLGFBQUFoeEIsUUFBQTZ1QixXQUFBbUMsR0FDUG5vQixFQUFBeW1CLGdCQUFBblcsRUFBQTRYLEVBQUFDLEVBQUFub0IsUUFDTyxjQUFBb29CLEdBQUEsTUFBQUQsRUFBQSxVQUNQbm9CLEVBQUFnbkIsZ0JBQUExVyxFQUFBNFgsRUFBQUMsRUFBQW5vQixFQUFBaW5CLEVBQUE3ZCxFQUFBOGQsRUFBQUMsR0FBQSxFQUFBQyxRQUNPLGNBQUFnQixHQUFBLGVBQUFELEVBQUEsVUFDUG5vQixFQUFBc25CLG9CQUFBaFgsRUFBQTRYLEVBQUFDLEVBQUFub0IsUUFDTyxZQUFBbW9CLEVBQUEseUJBQUFBLEVBQUEsVUFDUG5vQixFQUFBdW5CLGNBQUFqWCxFQUFBNFgsRUFBQUMsRUFBQW5vQixRQUNPLGNBQUFtb0IsRUFBQSxVQUNQbm9CLEVBQUF5bkIsZ0JBQUFuWCxFQUFBNFgsRUFBQUMsRUFBQW5vQixRQUNPLFlBQUFtb0IsRUFBQSxVQUNQbm9CLEVBQUEybkIsY0FBQXJYLEVBQUE0WCxFQUFBQyxFQUFBbm9CLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxFQUFBQyxRQUNPLHNCQUFBZ0IsR0FBQWpCLEVBQ1BsbkIsRUFBQTBuQixrQkFBQXBYLEVBQUE0WCxFQUFBQyxFQUFBbm9CLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxRQUNPLGNBQUFpQixFQUFBLFVBQ1Bub0IsRUFBQTZuQixnQkFBQXZYLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sY0FBQW1vQixFQUFBLFVBQ1Bub0IsRUFBQThuQixnQkFBQXhYLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sYUFBQW1vQixFQUFBLFVBQ1Bub0IsRUFBQStuQixlQUFBelgsRUFBQTRYLEVBQUFDLEVBQUFub0IsRUFBQW9KLEVBQUE4ZCxRQUNPLGtCQUFBaUIsRUFBQSxVQUNQbm9CLEVBQUE0bUIsb0JBQUF0VyxFQUFBNFgsRUFBQUMsRUFBQW5vQixRQUNPLGFBQUFtb0IsRUFBQSxVQUNQbm9CLEVBQUF3bkIsZUFBQWxYLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sY0FBQW1vQixFQUFBLHNCQUFBQSxFQUFBLFVBQ1Bub0IsRUFBQTZtQixnQkFBQXZXLEVBQUE0WCxFQUFBQyxFQUFBbm9CLFFBQ08sWUFBQW1vQixFQUFBLFVBQ1AsVUFBQTdzQixVQUFBLHNDQUFBNnNCLEVBQUEsZ0JBR0csQ0FFSCxHQUFBampDLEVBQUEraUMsT0FBQSxDQUNBLHNCQUFBL2lDLEVBQUEraUMsT0FBQSxVQUFBM3NCLFVBQUEsNEJBRUEsVUFEQXBXLElBQUEraUMsV0FDQSxXQUFBekMsVUFBQXRnQyxHQUFBLFVBQUFvVyxVQUFBLDRDQUlBLFFBQUErc0IsS0FBQW5qQyxFQUFBLENBQ0EsSUFBQW9qQyxFQUFBcGpDLEVBQUFtakMsR0FFQSxHQUFBQyxLQUFBTCxPQUFBLENBQ0Esc0JBQUFLLEVBQUFMLE9BQUEsVUFBQTNzQixVQUFBLDRCQUNBZ3RCLElBQUFMLFNBSUEsSUFBQU0sRUFBQS9DLFVBQUE4QyxHQUdBLG9CQUFBRCxJQUFBeEMsV0FBQXpsQixJQUFBaW9CLEdBQUEsQ0FDQSxTQUFBQSxFQUFBL2MsTUFBQXNhLFVBR0EsTUFBQTM5QixNQUFBLE9BQUFvZ0MsRUFBQSxnQ0FHQSxHQUFBcEIsRUFBQSxDQUNBLFNBQUFvQixFQUFBLEdBQ0EsTUFBQXBnQyxNQUFBLE9BQUFvZ0MsRUFBQSw0QkFDVyxJQUFBQSxFQUFBbGdDLFFBQUEsS0FDWCxNQUFBRixNQUFBLE9BQUFvZ0MsRUFBQSwwQkFLQSxjQUFBRSxFQUNBdm9CLEVBQUFpbUIsZ0JBQUEzVixFQUFBK1gsRUFBQUMsRUFBQXRvQixRQUNPLGNBQUF1b0IsRUFDUHZvQixFQUFBbW1CLGdCQUFBN1YsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxlQUFBdW9CLEVBQ1B2b0IsRUFBQXNtQixpQkFBQWhXLEVBQUErWCxFQUFBQyxFQUFBdG9CLFFBQ08sR0FBQXNvQixhQUFBNzFCLE1BQUFzekIsU0FBQXVDLEdBQ1B0b0IsRUFBQXVtQixjQUFBalcsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxRQUFBbkcsSUFBQXl1QixHQUNQLElBQUFuQixJQUFBbm5CLEVBQUFxbUIsY0FBQS9WLEVBQUErWCxFQUFBQyxFQUFBdG9CLFNBQ08sVUFBQXNvQixFQUNQdG9CLEVBQUFxbUIsY0FBQS9WLEVBQUErWCxFQUFBQyxFQUFBdG9CLFFBQ08sZ0JBQUFzb0IsRUFBQSx3QkFBQUEsRUFBQSxVQUNQdG9CLEVBQUE4bUIsa0JBQUF4VyxFQUFBK1gsRUFBQUMsRUFBQXRvQixRQUNPLEdBQUF5bEIsU0FBQXRaLFNBQUFtYyxHQUNQdG9CLEVBQUErbUIsZ0JBQUF6VyxFQUFBK1gsRUFBQUMsRUFBQXRvQixRQUNPLEdBQUFzb0IsYUFBQW54QixRQUFBNnVCLFdBQUFzQyxHQUNQdG9CLEVBQUF5bUIsZ0JBQUFuVyxFQUFBK1gsRUFBQUMsRUFBQXRvQixRQUNPLGNBQUF1b0IsR0FBQSxNQUFBRCxFQUFBLFVBQ1B0b0IsRUFBQWduQixnQkFBQTFXLEVBQUErWCxFQUFBQyxFQUFBdG9CLEVBQUFpbkIsRUFBQTdkLEVBQUE4ZCxFQUFBQyxHQUFBLEVBQUFDLFFBQ08sY0FBQW1CLEdBQUEsZUFBQUQsRUFBQSxVQUNQdG9CLEVBQUFzbkIsb0JBQUFoWCxFQUFBK1gsRUFBQUMsRUFBQXRvQixRQUNPLFlBQUFzb0IsRUFBQSx5QkFBQUEsRUFBQSxVQUNQdG9CLEVBQUF1bkIsY0FBQWpYLEVBQUErWCxFQUFBQyxFQUFBdG9CLFFBQ08sY0FBQXNvQixFQUFBLFVBQ1B0b0IsRUFBQXluQixnQkFBQW5YLEVBQUErWCxFQUFBQyxFQUFBdG9CLFFBQ08sWUFBQXNvQixFQUFBLFVBQ1B0b0IsRUFBQTJuQixjQUFBclgsRUFBQStYLEVBQUFDLEVBQUF0b0IsRUFBQWluQixFQUFBN2QsRUFBQThkLEVBQUFDLFFBQ08sc0JBQUFtQixHQUFBcEIsRUFDUGxuQixFQUFBMG5CLGtCQUFBcFgsRUFBQStYLEVBQUFDLEVBQUF0b0IsRUFBQWluQixFQUFBN2QsRUFBQThkLFFBQ08sY0FBQW9CLEVBQUEsVUFDUHRvQixFQUFBNm5CLGdCQUFBdlgsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxjQUFBc29CLEVBQUEsVUFDUHRvQixFQUFBOG5CLGdCQUFBeFgsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxhQUFBc29CLEVBQUEsVUFDUHRvQixFQUFBK25CLGVBQUF6WCxFQUFBK1gsRUFBQUMsRUFBQXRvQixFQUFBb0osRUFBQThkLFFBQ08sa0JBQUFvQixFQUFBLFVBQ1B0b0IsRUFBQTRtQixvQkFBQXRXLEVBQUErWCxFQUFBQyxFQUFBdG9CLFFBQ08sYUFBQXNvQixFQUFBLFVBQ1B0b0IsRUFBQXduQixlQUFBbFgsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxjQUFBc29CLEVBQUEsc0JBQUFBLEVBQUEsVUFDUHRvQixFQUFBNm1CLGdCQUFBdlcsRUFBQStYLEVBQUFDLEVBQUF0b0IsUUFDTyxZQUFBc29CLEVBQUEsVUFDUCxVQUFBaHRCLFVBQUEsc0NBQUFndEIsRUFBQSxZQU1BbEIsRUFBQWxjLE1BRUFvRixFQUFBdFEsS0FBQSxFQUVBLElBQUF6WCxFQUFBeVgsRUFBQWdvQixFQU1BLE9BSkExWCxFQUFBMFgsS0FBQSxJQUFBei9CLEVBQ0ErbkIsRUFBQTBYLEtBQUF6L0IsR0FBQSxNQUNBK25CLEVBQUEwWCxLQUFBei9CLEdBQUEsT0FDQStuQixFQUFBMFgsS0FBQXovQixHQUFBLE9BQ0F5WCxFQUdBLElBQUF3b0IsV0FBQW5CLGNBRUEsU0FBQW9CLFVBQUFwaUMsR0FBOFUsT0FBMU9vaUMsVUFBM0UsbUJBQUFsa0MsUUFBQSxpQkFBQUEsT0FBQTBkLFNBQTJFLFNBQUE1YixHQUFvQyxjQUFBQSxHQUErQixTQUFBQSxHQUFvQyxPQUFBQSxHQUFBLG1CQUFBOUIsUUFBQThCLEVBQUE2YixjQUFBM2QsUUFBQThCLElBQUE5QixPQUFBYSxVQUFBLGdCQUFBaUIsSUFBbUlBLEdBRTlVLElBQUFxaUMsU0FBZXZwQiw0Q0FBQXJJLEVBQU05RixPQUNyQjIzQiwyQkFBQWhsQixNQUFBSCx5QkFFQSxTQUFBb2xCLFNBQUE5a0MsR0FDQSxpQkFBQTJrQyxVQUFBM2tDLElBQUEsa0JBQUFJLE9BQUFrQixVQUFBbUUsU0FBQTVGLEtBQUFHLEdBR0EsU0FBQStrQyxvQkFBQTNqQyxFQUFBZ2lDLEVBQUFDLEdBQ0EsSUFBQTJCLEVBQUEsRUFFQSxHQUFBMXVCLE1BQUFpQixRQUFBblcsR0FDQSxRQUFBMUIsRUFBQSxFQUFtQkEsRUFBQTBCLEVBQUE4QyxPQUFtQnhFLElBQ3RDc2xDLEdBQUFDLGlCQUFBdmxDLEVBQUErRixXQUFBckUsRUFBQTFCLEdBQUEwakMsR0FBQSxFQUFBQyxRQVNBLFFBQUFwaUMsS0FMQUcsRUFBQStpQyxTQUNBL2lDLElBQUEraUMsVUFJQS9pQyxFQUNBNGpDLEdBQUFDLGlCQUFBaGtDLEVBQUFHLEVBQUFILEdBQUFtaUMsR0FBQSxFQUFBQyxHQUlBLE9BQUEyQixFQVFBLFNBQUFDLGlCQUFBaGxDLEVBQUFVLEVBQUF5aUMsRUFBQTdyQixFQUFBOHJCLEdBTUEsT0FKQTFpQyxLQUFBd2pDLFNBQ0F4akMsSUFBQXdqQyxVQUdBUSxVQUFBaGtDLElBQ0EsYUFDQSxTQUFBaWtDLFNBQUFySCxXQUFBdDlCLEVBQUEsWUFBQTJrQyxTQUFBckgsV0FBQTU4QixFQUFBLFVBRUEsYUFDQSxPQUFBa0QsS0FBQW1HLE1BQUFySixXQUFBODJCLFVBQUFNLFlBQUFwM0IsR0FBQTgyQixVQUFBSyxZQUNBbjNCLEdBQUE4MkIsVUFBQUUsZ0JBQUFoM0IsR0FBQTgyQixVQUFBQyxnQkFFQSxNQUFBejNCLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxnQkFNQSxNQUFBQSxFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsZUFHQSxnQkFDQSxPQUFBc1gsSUFBQThyQixHQUFBLE1BQUFwakMsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGVBQ0EsRUFFQSxjQUNBLGFBQUFBLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxlQUVBLGFBQ0EsU0FBQVUsR0FBQSxXQUFBQSxFQUFBLHNCQUFBQSxFQUFBLFVBQ0EsYUFBQVYsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGVBQ08sZ0JBQUFVLEVBQUEsd0JBQUFBLEVBQUEsVUFDUCxhQUFBVixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsZ0JBQ08sR0FBQVUsYUFBQWdPLE1BQUFtMkIsU0FBQW5rQyxHQUNQLGFBQUFWLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxlQUNPLFlBQUEya0MsbUJBQUF2YyxTQUFBMW5CLEdBQ1AsYUFBQVYsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGVBQUFVLEVBQUF1RCxPQUNPLFlBQUF2RCxFQUFBLHNCQUFBQSxFQUFBLHlCQUFBQSxFQUFBLFVBQ1AsYUFBQVYsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGVBQ08sa0JBQUFVLEVBQUEsVUFDUCxhQUFBVixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsZ0JBQ08sWUFBQVUsRUFBQSxVQUVQLGFBQUFBLEVBQUEwdEIsT0FBQWp1QixPQUFBbWMsS0FBQTViLEVBQUEwdEIsT0FBQW5xQixPQUFBLEdBQ0EsTUFBQWpFLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxtQkFBQTJrQyxTQUFBckgsV0FBQTU4QixFQUFBaU0sS0FBQW5ILFdBQUEsVUFBQXMvQixvQkFBQXBrQyxFQUFBMHRCLE1BQUErVSxFQUFBQyxJQUVBLE1BQUFwakMsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGlCQUFBMmtDLFNBQUFySCxXQUFBNThCLEVBQUFpTSxLQUFBbkgsV0FBQSxVQUVPLGNBQUE5RSxFQUFBLFVBRVAsT0FBQUEsRUFBQSswQixXQUFBOEIsT0FBQUwsb0JBQ0EsTUFBQWwzQixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsY0FBQVUsRUFBQWkxQixTQUFBLFVBRUEsTUFBQTMxQixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsY0FBQVUsRUFBQWkxQixTQUFBLE9BRU8sY0FBQWoxQixFQUFBLFVBQ1AsYUFBQVYsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGFBQUEya0MsU0FBQXJILFdBQUE1OEIsUUFBQSxjQUNPLGFBQUFBLEVBQUEsV0FFUCxJQUFBdWtDLEVBQUE5a0MsT0FBQW1NLE9BQUEsQ0FDQXlvQixLQUFBcjBCLEVBQUFnMEIsV0FDQU0sSUFBQXQwQixFQUFBaTBCLEtBQ1NqMEIsRUFBQW0wQixRQU1ULE9BSkEsTUFBQW4wQixFQUFBazBCLEtBQ0FxUSxFQUFBLElBQUF2a0MsRUFBQWswQixLQUdBLE1BQUE1MEIsRUFBQTJrQyxTQUFBckgsV0FBQXQ5QixFQUFBLGVBQUE4a0Msb0JBQUFHLEVBQUE5QixFQUFBQyxHQUNPLE9BQUExaUMsYUFBQTBTLFFBQUEsb0JBQUFqVCxPQUFBa0IsVUFBQW1FLFNBQUE1RixLQUFBYyxJQUNQLE1BQUFWLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxlQUFBMmtDLFNBQUFySCxXQUFBNThCLEVBQUEwNkIsT0FBQSxXQUFBMTZCLEVBQUE2YSxPQUFBLE1BQUE3YSxFQUFBaWlDLFdBQUEsTUFBQWppQyxFQUFBa2lDLFVBQUEsT0FDTyxlQUFBbGlDLEVBQUEsV0FDUCxNQUFBVixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsZUFBQTJrQyxTQUFBckgsV0FBQTU4QixFQUFBd3NCLFFBQUEsVUFBQXlYLFNBQUFySCxXQUFBNThCLEVBQUEwTCxRQUFBLFdBRUEsTUFBQXBNLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxhQUFBOGtDLG9CQUFBcGtDLEVBQUF5aUMsRUFBQUMsR0FBQSxFQUdBLGVBRUEsR0FBQTFpQyxhQUFBMFMsUUFBQSxvQkFBQWpULE9BQUFrQixVQUFBbUUsU0FBQTVGLEtBQUFjLElBQUEsb0JBQUF1TyxPQUFBclAsS0FBQWMsR0FDQSxhQUFBVixFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsZUFBQTJrQyxTQUFBckgsV0FBQTU4QixFQUFBMDZCLE9BQUEsV0FBQTE2QixFQUFBNmEsT0FBQSxNQUFBN2EsRUFBQWlpQyxXQUFBLE1BQUFqaUMsRUFBQWtpQyxVQUFBLE9BRUEsR0FBQU8sR0FBQSxNQUFBemlDLEVBQUEwdEIsT0FBQWp1QixPQUFBbWMsS0FBQTViLEVBQUEwdEIsT0FBQW5xQixPQUFBLEVBQ0EsYUFBQWpFLEVBQUEya0MsU0FBQXJILFdBQUF0OUIsRUFBQSxtQkFBQTJrQyxTQUFBckgsV0FBQXNILDJCQUFBbGtDLEdBQUEsVUFBQW9rQyxvQkFBQXBrQyxFQUFBMHRCLE1BQUErVSxFQUFBQyxHQUNTLEdBQUFELEVBQ1QsYUFBQW5qQyxFQUFBMmtDLFNBQUFySCxXQUFBdDlCLEVBQUEsaUJBQUEya0MsU0FBQXJILFdBQUFzSCwyQkFBQWxrQyxHQUFBLFVBTUEsU0FHQSxJQUFBd2tDLGVBQUFKLG9CQUVBSyxTQUFlL3BCLDRDQUFBckksRUFBTTlGLE9BVXJCbTRCLGNBQUEsU0FBQUMsR0FDQSxHQUFBQSxhQUFBRixTQUNBLE9BQUFFLEVBR0EsR0FBQUEsYUFBQXRqQyxXQUNBLE9BQUFvakMsU0FBQWo0QixLQUFBbTRCLEVBQUF6UCxRQUdBLFVBQUFyZSxVQUFBLHlDQUdBK3RCLFNBQWVscUIsNENBQUFySSxFQUFNOUYsT0FPckJzNEIsUUFBQSxTQUVBQyxTQUFBRixTQUFBOVksTUFBQStZLFNBUUEsU0FBQUUsc0JBQUFqaEMsR0FFQWdoQyxTQUFBdmhDLE9BQUFPLElBQ0FnaEMsU0FBQUYsU0FBQTlZLE1BQUFob0IsSUFjQSxTQUFBa2hDLFlBQUF2a0MsRUFBQWlMLEdBR0EsSUFBQTgyQixFQUFBLGtCQUZBOTJCLEtBQUEsSUFFQTgyQixXQUFBOTJCLEVBQUE4MkIsVUFDQUMsRUFBQSxrQkFBQS8yQixFQUFBKzJCLG9CQUFBLzJCLEVBQUErMkIsbUJBQ0FDLEVBQUEsa0JBQUFoM0IsRUFBQWczQixpQkFBQWgzQixFQUFBZzNCLGdCQUNBdUMsRUFBQSxpQkFBQXY1QixFQUFBdTVCLHNCQUFBdjVCLEVBQUF1NUIsc0JBQUFKLFFBRUFDLFNBQUF2aEMsT0FBQTBoQyxJQUNBSCxTQUFBRixTQUFBOVksTUFBQW1aLElBSUEsSUFBQUMsRUFBQW5CLFdBQUFlLFNBQUFya0MsRUFBQStoQyxFQUFBLElBQUFDLEVBQUFDLEVBQUEsSUFFQXlDLEVBQUFQLFNBQUE5WSxNQUFBb1osR0FJQSxPQUZBSixTQUFBeFosS0FBQTZaLEVBQUEsSUFBQUEsRUFBQTVoQyxRQUVBNGhDLEVBZUEsU0FBQUMsNEJBQUEza0MsRUFBQTRrQyxFQUFBMzVCLEdBR0EsSUFBQTgyQixFQUFBLGtCQUZBOTJCLEtBQUEsSUFFQTgyQixXQUFBOTJCLEVBQUE4MkIsVUFDQUMsRUFBQSxrQkFBQS8yQixFQUFBKzJCLG9CQUFBLzJCLEVBQUErMkIsbUJBQ0FDLEVBQUEsa0JBQUFoM0IsRUFBQWczQixpQkFBQWgzQixFQUFBZzNCLGdCQUNBdk0sRUFBQSxpQkFBQXpxQixFQUFBNlAsTUFBQTdQLEVBQUE2UCxNQUFBLEVBRUEycEIsRUFBQW5CLFdBQUFlLFNBQUFya0MsRUFBQStoQyxFQUFBLElBQUFDLEVBQUFDLEdBR0EsT0FGQW9DLFNBQUF4WixLQUFBK1osRUFBQWxQLEVBQUEsRUFBQStPLEdBRUEvTyxFQUFBK08sRUFBQSxFQW1CQSxTQUFBSSxjQUFBelosRUFBQW5nQixHQUVBLE9BREFtZ0IsRUFBQTZZLGNBQUE3WSxHQUNBa1UsYUFBQWxVLEVBQUFuZ0IsR0FZQSxTQUFBNjVCLHNCQUFBOWtDLEVBQUFpTCxHQUVBLElBQUErMkIsRUFBQSxrQkFEQS8yQixLQUFBLElBQ0ErMkIsb0JBQUEvMkIsRUFBQSsyQixtQkFDQUMsRUFBQSxrQkFBQWgzQixFQUFBZzNCLGlCQUFBaDNCLEVBQUFnM0IsZ0JBQ0EsT0FBQThCLGVBQUEvakMsRUFBQWdpQyxFQUFBQyxHQXVCQSxTQUFBOEMsa0JBQUF2UCxFQUFBRSxFQUFBc1AsRUFBQUMsRUFBQUMsRUFBQWo2QixHQUNBQSxFQUFBak0sT0FBQW1NLE9BQUEsQ0FDQSt3QixrQ0FBQSxHQUNHanhCLEdBQ0h1cUIsRUFBQXlPLGNBQUF6TyxHQUdBLElBRkEsSUFBQTFhLEVBQUE0YSxFQUVBcDNCLEVBQUEsRUFBaUJBLEVBQUEwbUMsRUFBdUIxbUMsSUFBQSxDQUV4QyxJQUFBK0UsRUFBQW15QixFQUFBMWEsR0FBQTBhLEVBQUExYSxFQUFBLE1BQUEwYSxFQUFBMWEsRUFBQSxPQUFBMGEsRUFBQTFhLEVBQUEsT0FFQTdQLEVBQUE2UCxRQUVBbXFCLEVBQUFDLEVBQUE1bUMsR0FBQWdoQyxhQUFBOUosRUFBQXZxQixHQUVBNlAsR0FBQXpYLEVBSUEsT0FBQXlYLEVBR0EsSUFBQXVlLEtBQUEsQ0FHQS9DLGVBQUFELFVBQUFDLGVBQ0FDLGVBQUFGLFVBQUFFLGVBQ0FDLGVBQUFILFVBQUFHLGVBQ0FDLGVBQUFKLFVBQUFJLGVBQ0FDLFdBQUFMLFVBQUFLLFdBQ0FDLFdBQUFOLFVBQUFNLFdBQ0FDLGlCQUFBUCxVQUFBTyxpQkFDQUMsaUJBQUFSLFVBQUFRLGlCQUNBQyxpQkFBQVQsVUFBQVMsaUJBQ0FDLGdCQUFBVixVQUFBVSxnQkFDQUMsaUJBQUFYLFVBQUFXLGlCQUNBQyxvQkFBQVosVUFBQVksb0JBQ0FDLGNBQUFiLFVBQUFhLGNBQ0FDLGtCQUFBZCxVQUFBYyxrQkFDQUMsZUFBQWYsVUFBQWUsZUFDQUMsZUFBQWhCLFVBQUFnQixlQUNBQyxpQkFBQWpCLFVBQUFpQixpQkFDQUMsb0JBQUFsQixVQUFBa0Isb0JBQ0FDLGVBQUFuQixVQUFBbUIsZUFDQUMsaUJBQUFwQixVQUFBb0IsaUJBQ0FDLHVCQUFBckIsVUFBQXFCLHVCQUNBQyxjQUFBdEIsVUFBQXNCLGNBQ0FDLG9CQUFBdkIsVUFBQXVCLG9CQUNBQyxlQUFBeEIsVUFBQXdCLGVBQ0FDLHFCQUFBekIsVUFBQXlCLHFCQUNBQyxrQkFBQTFCLFVBQUEwQixrQkFDQUMsa0JBQUEzQixVQUFBMkIsa0JBQ0F6RCw0QkFBQThCLFVBQUE5Qiw0QkFDQTBELDZCQUFBNUIsVUFBQTRCLDZCQUNBQywrQkFBQTdCLFVBQUE2QiwrQkFDQUMseUJBQUE5QixVQUFBOEIseUJBQ0FDLHdCQUFBL0IsVUFBQStCLHdCQUNBQyxpQ0FBQWhDLFVBQUFnQyxpQ0FFQXJMLEtBQUF4aEIsS0FDQStPLElBQUEzUCxJQUNBd2hCLFdBQUFFLE9BQ0FnSCxNQUFBUyxPQUNBSyxPQUFBZ0MsT0FDQWxNLFNBQUFzQixTQUNBanJCLEtBQUFxYixPQUNBbUMsVUFBQUssVUFDQTNCLE9BQUFJLFNBQ0E2UCxNQUFBRSxPQUNBOEYsT0FBQUUsUUFDQUksT0FBQUUsUUFDQXBILFdBQUF4RCxPQUNBK0csV0FBQWlELFdBRUE4RyxVQUFBbUwsWUFDQUksd0RBQ0FyTCxZQUFBdUwsY0FDQWxCLG9CQUFBbUIsc0JBQ0FDLG9DQUNBVCw0Q0FFQTV3QixTQUFBOFgsU0FFQTJaLE1BQUF2SyxlQUVBcGtCLE9BQUE2aUIsS0FBQS9DLGVBQ0E3ZixPQUFBNGlCLEtBQUE5QyxlQUNBN2YsT0FBQTJpQixLQUFBN0MsZUFDQTdmLE9BQUEwaUIsS0FBQTVDLGVBQ0E3ZixPQUFBeWlCLEtBQUEzQyxXQUNBN2YsT0FBQXdpQixLQUFBMUMsV0FDQTdmLE9BQUF1aUIsS0FBQXpDLGlCQUNBN2YsT0FBQXNpQixLQUFBeEMsaUJBQ0E3ZixPQUFBcWlCLEtBQUF2QyxpQkFDQTdmLFFBQUFvaUIsS0FBQXRDLGdCQUNBN2YsUUFBQW1pQixLQUFBckMsaUJBQ0E3ZixRQUFBa2lCLEtBQUFwQyxvQkFDQTdmLFFBQUFpaUIsS0FBQW5DLGNBQ0E3ZixRQUFBZ2lCLEtBQUFsQyxrQkFDQTdmLFFBQUEraEIsS0FBQWpDLGVBQ0E3ZixRQUFBOGhCLEtBQUFoQyxlQUNBN2YsUUFBQTZoQixLQUFBL0IsaUJBQ0E3ZixRQUFBNGhCLEtBQUE5QixvQkFDQTdmLFFBQUEyaEIsS0FBQTdCLGVBQ0E3ZixRQUFBMGhCLEtBQUE1QixpQkFDQTdmLFFBQUF5aEIsS0FBQTNCLHVCQUNBN2YsUUFBQXdoQixLQUFBMUIsY0FDQTdmLFFBQUF1aEIsS0FBQXpCLG9CQUNBN2YsUUFBQXNoQixLQUFBeEIsZUFDQTdmLFFBQUFxaEIsS0FBQXZCLHFCQUNBN2YsUUFBQW9oQixLQUFBdEIsa0JBQ0E3ZixRQUFBbWhCLEtBQUFyQixrQkFDQTdmLFFBQUFraEIsS0FBQTlFLDRCQUNBbmMsUUFBQWloQixLQUFBcEIsNkJBQ0E1ZixRQUFBZ2hCLEtBQUFuQiwrQkFDQTVmLFFBQUErZ0IsS0FBQWxCLHlCQUNBNWYsUUFBQThnQixLQUFBakIsd0JBQ0E1ZixRQUFBNmdCLEtBQUFoQixpQ0FDQTVmLFFBQUE0Z0IsS0FBQXJNLEtBQ0F0VSxRQUFBMmdCLEtBQUFqTixXQUNBelQsUUFBQTBnQixLQUFBL0YsTUFDQTFhLFFBQUF5Z0IsS0FBQWpGLE9BQ0F2YixRQUFBd2dCLEtBQUFuUCxTQUNBcFIsUUFBQXVnQixLQUFBOTRCLEtBQ0F3WSxRQUFBc2dCLEtBQUF0YixVQUNBL0UsUUFBQXFnQixLQUFBNWMsT0FDQXhELFFBQUFvZ0IsS0FBQTNNLE1BQ0F4VCxRQUFBbWdCLEtBQUEzRyxPQUNBdlosUUFBQWtnQixLQUFBckcsT0FDQTVaLFFBQUFpZ0IsS0FBQXZOLFdBQ0F6UyxRQUFBZ2dCLEtBQUFoSyxXQUNBL1YsUUFBQStmLEtBQUFELFVBQ0E3ZixRQUFBOGYsS0FBQXNMLDRCQUNBbnJCLFFBQUE2ZixLQUFBQyxZQUNBN2YsUUFBQTRmLEtBQUFzSyxvQkFDQWpxQixRQUFBMmYsS0FBQTBMLGtCQUNBcHJCLFFBQUEwZixLQUFBaUwsc0JBQ0ExcUIsUUFBQXlmLEtBQUEzbEIsU0FDQW1HLFFBQUF3ZixLQUFBOEwsTUFFZTV1QixvQkFBQSw0QkNucExmblksRUFBQWduQyxNQUFBM2MsR0FBQSxJQUFBNGMsUUFDQUMsR0FBQXRtQixXQUFBLElBQUFzbUIsSUFBQTdjLHFCQ0RBdnFCLEVBQVEsR0FDUixNQUFBcW5DLEVBQW9Ccm5DLEVBQVEsS0FDNUJnUyxVQUFPQSxHQUFlaFMsRUFBUSxJQUM5QjhPLFFBQU9BLEVBQUFDLFdBQXNCL08sRUFBUSxHQW1CckNzbkMsR0FmQXBuQyxFQUFBcW5DLG1CQUFBLFNBQUFDLEVBQUFDLEVBQUExNkIsR0FDQSxNQUFBbUgsRUFBQXBULE9BQUFtTSxPQUFBLENBQ0F5NkIsSUFBQTU0QixFQUNBbEMsS0FBQUgsc0JBQUFHLE1BQ0dHLEdBQ0htVCxFQUFBN1EsS0FBQUcsbUJBQ0E3TixFQUFBZ21DLEdBQUE3NEIsRUFBQW1ELEtBQUErUyxVQUFBeWlCLElBQUEvNEIsTUFBQXdGLEVBQUF0SCxNQUNBTSxFQUFBZ0gsRUFBQXd6QixhQUFrQ0YsU0FBYTdsQyxlQUFpQnVlLEtBQ2hFLE9BQ0EwbkIsV0FBQTk0QixFQUFBbUQsS0FBQStTLFVBQUEsQ0FDQXdpQixRQUFBdDZCLFFBQUFnVCxlQUNLeW5CLG1CQUlMem5DLEVBQUFvbkMsa0JBQUEsU0FBQU0sRUFBQTc2QixHQUNBLG9CQUFBNjZCLEVBQ0EsVUFBQS9pQyxNQUFBLDhCQUVBLE1BQUFxUCxFQUFBcFQsT0FBQW1NLE9BQUEsQ0FDQXFCLE1BQUFTLEVBQ0E4NEIsT0FBQSxJQUNHOTZCLEdBQ0grNkIsRUFBQXo0QixLQUFBRyxrQkFDQSxJQUNBLE1BQUFnNEIsTUFBV0EsRUFBQXQ2QixRQUFBZ1QsYUFBMEJsTyxFQUFBakQsRUFBQTY0QixJQUNyQzk2QixFQUFBdTZCLEVBQUFuMUIsTUFBQWdDLEVBQUE1RixNQUFBcEIsSUFDQSxPQUNBSixFQUFBMDZCLFdBQ0ExNkIsRUFBQW9ULFVBQUEvWixhQUFBK1osRUFBQS9aLFlBQ0EyaEMsRUFBQTVuQixFQUFBaE0sRUFBQTJ6QixPQUVBLEtBRUEvNkIsRUFDRyxNQUFBbkssR0FDSCxlQUlBekMsRUFBQTZuQyxhQUFBLFNBQUFILEVBQUFELEVBQUE1NkIsR0FDQSxNQUFBbUgsRUFBQXBULE9BQUFtTSxPQUFBLENBQ0FxQixNQUFBUyxFQUNBbkMsS0FBQUgsc0JBQUFHLEtBQ0FpN0IsT0FBQSxJQUNHOTZCLEdBQ0hELEVBQUF3NkIsRUFBQU0sRUFBQTF6QixFQUFBNUYsTUFBQTRGLEVBQUEyekIsUUFDQSxHQUFBLzZCLEVBQUEsQ0FDQSxNQUFBMDZCLE1BQVdBLEVBQUE3bEMsTUFBQXVlLGFBQXdCcFQsRUFDbkMsT0FBWTA2QixRQUFBN2xDLE1BQUE4bEMsTUFBQXoxQixFQUFBakQsRUFBQXBOLEVBQUF1UyxFQUFBdEgsS0FBQSs2QixJQUFBem5CLGFBRVosNEJDM0RBL2YsRUFBQUQsUUFBQWtDLFFBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IExvbmc7XHJcblxyXG4vKipcclxuICogd2FzbSBvcHRpbWl6YXRpb25zLCB0byBkbyBuYXRpdmUgaTY0IG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpZGVcclxuICovXHJcbnZhciB3YXNtID0gbnVsbDtcclxuXHJcbnRyeSB7XHJcbiAgd2FzbSA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG5ldyBVaW50OEFycmF5KFtcclxuICAgIDAsIDk3LCAxMTUsIDEwOSwgMSwgMCwgMCwgMCwgMSwgMTMsIDIsIDk2LCAwLCAxLCAxMjcsIDk2LCA0LCAxMjcsIDEyNywgMTI3LCAxMjcsIDEsIDEyNywgMywgNywgNiwgMCwgMSwgMSwgMSwgMSwgMSwgNiwgNiwgMSwgMTI3LCAxLCA2NSwgMCwgMTEsIDcsIDUwLCA2LCAzLCAxMDksIDExNywgMTA4LCAwLCAxLCA1LCAxMDAsIDEwNSwgMTE4LCA5NSwgMTE1LCAwLCAyLCA1LCAxMDAsIDEwNSwgMTE4LCA5NSwgMTE3LCAwLCAzLCA1LCAxMTQsIDEwMSwgMTA5LCA5NSwgMTE1LCAwLCA0LCA1LCAxMTQsIDEwMSwgMTA5LCA5NSwgMTE3LCAwLCA1LCA4LCAxMDMsIDEwMSwgMTE2LCA5NSwgMTA0LCAxMDUsIDEwMywgMTA0LCAwLCAwLCAxMCwgMTkxLCAxLCA2LCA0LCAwLCAzNSwgMCwgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNiwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTI3LCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjgsIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyOSwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTMwLCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExXHJcbiAgXSkpLCB7fSkuZXhwb3J0cztcclxufSBjYXRjaCAoZSkge1xyXG4gIC8vIG5vIHdhc20gc3VwcG9ydCA6KFxyXG59XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIsIGdpdmVuIGl0cyBsb3cgYW5kIGhpZ2ggMzIgYml0IHZhbHVlcyBhcyAqc2lnbmVkKiBpbnRlZ2Vycy5cclxuICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXHJcbiAqIEBleHBvcnRzIExvbmdcclxuICogQGNsYXNzIEEgTG9uZyBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciB2YWx1ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgbG9uZ1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gTG9uZyhsb3csIGhpZ2gsIHVuc2lnbmVkKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbG93IDMyIGJpdHMgYXMgYSBzaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvdyA9IGxvdyB8IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaWdoID0gaGlnaCB8IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLnVuc2lnbmVkID0gISF1bnNpZ25lZDtcclxufVxyXG5cclxuLy8gVGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGEgbG9uZyBpcyB0aGUgdHdvIGdpdmVuIHNpZ25lZCwgMzItYml0IHZhbHVlcy5cclxuLy8gV2UgdXNlIDMyLWJpdCBwaWVjZXMgYmVjYXVzZSB0aGVzZSBhcmUgdGhlIHNpemUgb2YgaW50ZWdlcnMgb24gd2hpY2hcclxuLy8gSmF2YXNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvciBvcGVyYXRpb25zIGxpa2UgYWRkaXRpb24gYW5kXHJcbi8vIG11bHRpcGxpY2F0aW9uLCB3ZSBzcGxpdCBlYWNoIG51bWJlciBpbnRvIDE2IGJpdCBwaWVjZXMsIHdoaWNoIGNhbiBlYXNpbHkgYmVcclxuLy8gbXVsdGlwbGllZCB3aXRoaW4gSmF2YXNjcmlwdCdzIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgb3ZlcmZsb3dcclxuLy8gb3IgY2hhbmdlIGluIHNpZ24uXHJcbi8vXHJcbi8vIEluIHRoZSBhbGdvcml0aG1zIGJlbG93LCB3ZSBmcmVxdWVudGx5IHJlZHVjZSB0aGUgbmVnYXRpdmUgY2FzZSB0byB0aGVcclxuLy8gcG9zaXRpdmUgY2FzZSBieSBuZWdhdGluZyB0aGUgaW5wdXQocykgYW5kIHRoZW4gcG9zdC1wcm9jZXNzaW5nIHRoZSByZXN1bHQuXHJcbi8vIE5vdGUgdGhhdCB3ZSBtdXN0IEFMV0FZUyBjaGVjayBzcGVjaWFsbHkgd2hldGhlciB0aG9zZSB2YWx1ZXMgYXJlIE1JTl9WQUxVRVxyXG4vLyAoLTJeNjMpIGJlY2F1c2UgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUUgKHNpbmNlIDJeNjMgY2Fubm90IGJlIHJlcHJlc2VudGVkIGFzXHJcbi8vIGEgcG9zaXRpdmUgbnVtYmVyLCBpdCBvdmVyZmxvd3MgYmFjayBpbnRvIGEgbmVnYXRpdmUpLiAgTm90IGhhbmRsaW5nIHRoaXNcclxuLy8gY2FzZSB3b3VsZCBvZnRlbiByZXN1bHQgaW4gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4vL1xyXG4vLyBDb21tb24gY29uc3RhbnQgdmFsdWVzIFpFUk8sIE9ORSwgTkVHX09ORSwgZXRjLiBhcmUgZGVmaW5lZCBiZWxvdyB0aGUgZnJvbSpcclxuLy8gbWV0aG9kcyBvbiB3aGljaCB0aGV5IGRlcGVuZC5cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmRpY2F0b3IgdXNlZCB0byByZWxpYWJseSBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgTG9uZyBvciBub3QuXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKiBAY29uc3RcclxuICogQHByaXZhdGVcclxuICovXHJcbkxvbmcucHJvdG90eXBlLl9faXNMb25nX187XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTG9uZy5wcm90b3R5cGUsIFwiX19pc0xvbmdfX1wiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gaXNMb25nKG9iaikge1xyXG4gICAgcmV0dXJuIChvYmogJiYgb2JqW1wiX19pc0xvbmdfX1wiXSkgPT09IHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIExvbmcuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nLmlzTG9uZyA9IGlzTG9uZztcclxuXHJcbi8qKlxyXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCBpbnRlZ2VyIHZhbHVlcy5cclxuICogQHR5cGUgeyFPYmplY3R9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIElOVF9DQUNIRSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLlxyXG4gKiBAdHlwZSB7IU9iamVjdH1cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVUlOVF9DQUNIRSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbUludCh2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgIHZhciBvYmosIGNhY2hlZE9iaiwgY2FjaGU7XHJcbiAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICB2YWx1ZSA+Pj49IDA7XHJcbiAgICAgICAgaWYgKGNhY2hlID0gKDAgPD0gdmFsdWUgJiYgdmFsdWUgPCAyNTYpKSB7XHJcbiAgICAgICAgICAgIGNhY2hlZE9iaiA9IFVJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsICh2YWx1ZSB8IDApIDwgMCA/IC0xIDogMCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKGNhY2hlKVxyXG4gICAgICAgICAgICBVSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YWx1ZSB8PSAwO1xyXG4gICAgICAgIGlmIChjYWNoZSA9ICgtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSkge1xyXG4gICAgICAgICAgICBjYWNoZWRPYmogPSBJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsIHZhbHVlIDwgMCA/IC0xIDogMCwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiAzMiBiaXQgaW50ZWdlciB2YWx1ZS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgMzIgYml0IGludGVnZXIgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUludCA9IGZyb21JbnQ7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlLCB1bnNpZ25lZCkge1xyXG4gICAgaWYgKGlzTmFOKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgaWYgKHZhbHVlID49IFRXT19QV1JfNjRfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUFYX1VOU0lHTkVEX1ZBTFVFO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodmFsdWUgPD0gLVRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgICAgIGlmICh2YWx1ZSArIDEgPj0gVFdPX1BXUl82M19EQkwpXHJcbiAgICAgICAgICAgIHJldHVybiBNQVhfVkFMVUU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZygpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKCh2YWx1ZSAlIFRXT19QV1JfMzJfREJMKSB8IDAsICh2YWx1ZSAvIFRXT19QV1JfMzJfREJMKSB8IDAsIHVuc2lnbmVkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gdmFsdWUsIHByb3ZpZGVkIHRoYXQgaXQgaXMgYSBmaW5pdGUgbnVtYmVyLiBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tTnVtYmVyID0gZnJvbU51bWJlcjtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0c1xyXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaEJpdHNcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21CaXRzKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIDY0IGJpdCBpbnRlZ2VyIHRoYXQgY29tZXMgYnkgY29uY2F0ZW5hdGluZyB0aGUgZ2l2ZW4gbG93IGFuZCBoaWdoIGJpdHMuIEVhY2ggaXNcclxuICogIGFzc3VtZWQgdG8gdXNlIDMyIGJpdHMuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0cyBUaGUgbG93IDMyIGJpdHNcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIFRoZSBoaWdoIDMyIGJpdHNcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJpdHMgPSBmcm9tQml0cztcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGJhc2VcclxuICogQHBhcmFtIHtudW1iZXJ9IGV4cG9uZW50XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIHBvd19kYmwgPSBNYXRoLnBvdzsgLy8gVXNlZCA0IHRpbWVzICg0KjggdG8gMTUrNClcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7KGJvb2xlYW58bnVtYmVyKT19IHVuc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXhcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyLCB1bnNpZ25lZCwgcmFkaXgpIHtcclxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIHRocm93IEVycm9yKCdlbXB0eSBzdHJpbmcnKTtcclxuICAgIGlmIChzdHIgPT09IFwiTmFOXCIgfHwgc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIitJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCItSW5maW5pdHlcIilcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICh0eXBlb2YgdW5zaWduZWQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcclxuICAgICAgICByYWRpeCA9IHVuc2lnbmVkLFxyXG4gICAgICAgIHVuc2lnbmVkID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVuc2lnbmVkID0gISEgdW5zaWduZWQ7XHJcbiAgICB9XHJcbiAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcblxyXG4gICAgdmFyIHA7XHJcbiAgICBpZiAoKHAgPSBzdHIuaW5kZXhPZignLScpKSA+IDApXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludGVyaW9yIGh5cGhlbicpO1xyXG4gICAgZWxzZSBpZiAocCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHN0ci5zdWJzdHJpbmcoMSksIHVuc2lnbmVkLCByYWRpeCkubmVnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG8gc2V2ZXJhbCAoOCkgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA4KSk7XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IFpFUk87XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gOCkge1xyXG4gICAgICAgIHZhciBzaXplID0gTWF0aC5taW4oOCwgc3RyLmxlbmd0aCAtIGkpLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XHJcbiAgICAgICAgaWYgKHNpemUgPCA4KSB7XHJcbiAgICAgICAgICAgIHZhciBwb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgc2l6ZSkpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHBvd2VyKS5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWwocmFkaXhUb1Bvd2VyKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzdWx0LnVuc2lnbmVkID0gdW5zaWduZWQ7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHN0cmluZywgd3JpdHRlbiB1c2luZyB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xyXG4gKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXggVGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4gKDItMzYpLCBkZWZhdWx0cyB0byAxMFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVmFsdWUodmFsLCB1bnNpZ25lZCkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHZhbCwgdW5zaWduZWQpO1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbCwgdW5zaWduZWQpO1xyXG4gICAgLy8gVGhyb3dzIGZvciBub24tb2JqZWN0cywgY29udmVydHMgbm9uLWluc3RhbmNlb2YgTG9uZzpcclxuICAgIHJldHVybiBmcm9tQml0cyh2YWwubG93LCB2YWwuaGlnaCwgdHlwZW9mIHVuc2lnbmVkID09PSAnYm9vbGVhbicgPyB1bnNpZ25lZCA6IHZhbC51bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHZhbHVlIHRvIGEgTG9uZyB1c2luZyB0aGUgYXBwcm9wcmlhdGUgZnJvbSogZnVuY3Rpb24gZm9yIGl0cyB0eXBlLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfCF7bG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciwgdW5zaWduZWQ6IGJvb2xlYW59fSB2YWwgVmFsdWVcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLmZyb21WYWx1ZSA9IGZyb21WYWx1ZTtcclxuXHJcbi8vIE5PVEU6IHRoZSBjb21waWxlciBzaG91bGQgaW5saW5lIHRoZXNlIGNvbnN0YW50IHZhbHVlcyBiZWxvdyBhbmQgdGhlbiByZW1vdmUgdGhlc2UgdmFyaWFibGVzLCBzbyB0aGVyZSBzaG91bGQgYmVcclxuLy8gbm8gcnVudGltZSBwZW5hbHR5IGZvciB0aGVzZS5cclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8xNl9EQkwgPSAxIDw8IDE2O1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzI0X0RCTCA9IDEgPDwgMjQ7XHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl82NF9EQkwgPSBUV09fUFdSXzMyX0RCTCAqIFRXT19QV1JfMzJfREJMO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzYzX0RCTCA9IFRXT19QV1JfNjRfREJMIC8gMjtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzI0ID0gZnJvbUludChUV09fUFdSXzI0X0RCTCk7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBaRVJPID0gZnJvbUludCgwKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgemVyby5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5aRVJPID0gWkVSTztcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVaRVJPID0gZnJvbUludCgwLCB0cnVlKTtcclxuXHJcbi8qKlxyXG4gKiBVbnNpZ25lZCB6ZXJvLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLlVaRVJPID0gVVpFUk87XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBPTkUgPSBmcm9tSW50KDEpO1xyXG5cclxuLyoqXHJcbiAqIFNpZ25lZCBvbmUuXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuT05FID0gT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVU9ORSA9IGZyb21JbnQoMSwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogVW5zaWduZWQgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLlVPTkUgPSBVT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTkVHX09ORSA9IGZyb21JbnQoLTEpO1xyXG5cclxuLyoqXHJcbiAqIFNpZ25lZCBuZWdhdGl2ZSBvbmUuXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuTkVHX09ORSA9IE5FR19PTkU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNQVhfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4N0ZGRkZGRkZ8MCwgZmFsc2UpO1xyXG5cclxuLyoqXHJcbiAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1BWF9WQUxVRSA9IE1BWF9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE1BWF9VTlNJR05FRF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkZ8MCwgMHhGRkZGRkZGRnwwLCB0cnVlKTtcclxuXHJcbi8qKlxyXG4gKiBNYXhpbXVtIHVuc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1BWF9VTlNJR05FRF9WQUxVRSA9IE1BWF9VTlNJR05FRF9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE1JTl9WQUxVRSA9IGZyb21CaXRzKDAsIDB4ODAwMDAwMDB8MCwgZmFsc2UpO1xyXG5cclxuLyoqXHJcbiAqIE1pbmltdW0gc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1JTl9WQUxVRSA9IE1JTl9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAYWxpYXMgTG9uZy5wcm90b3R5cGVcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTG9uZ1Byb3RvdHlwZSA9IExvbmcucHJvdG90eXBlO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgMzIgYml0IGludGVnZXIsIGFzc3VtaW5nIGl0IGlzIGEgMzIgYml0IGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24gdG9JbnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IHRoaXMubG93ID4+PiAwIDogdGhpcy5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSB0aGUgbmVhcmVzdCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlIChkb3VibGUsIDUzIGJpdCBtYW50aXNzYSkuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7XHJcbiAgICBpZiAodGhpcy51bnNpZ25lZClcclxuICAgICAgICByZXR1cm4gKCh0aGlzLmhpZ2ggPj4+IDApICogVFdPX1BXUl8zMl9EQkwpICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggKiBUV09fUFdSXzMyX0RCTCArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFJhZGl4ICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICogQG92ZXJyaWRlXHJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGByYWRpeGAgaXMgb3V0IG9mIHJhbmdlXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcocmFkaXgpIHtcclxuICAgIHJhZGl4ID0gcmFkaXggfHwgMTA7XHJcbiAgICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpXHJcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXgnKTtcclxuICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiAnMCc7XHJcbiAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHsgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoYW5nZSB0aGUgTG9uZyB2YWx1ZSBiZWZvcmUgaXQgY2FuIGJlIG5lZ2F0ZWQsIHNvIHdlIHJlbW92ZVxyXG4gICAgICAgICAgICAvLyB0aGUgYm90dG9tLW1vc3QgZGlnaXQgaW4gdGhpcyBiYXNlIGFuZCB0aGVuIHJlY3Vyc2UgdG8gZG8gdGhlIHJlc3QuXHJcbiAgICAgICAgICAgIHZhciByYWRpeExvbmcgPSBmcm9tTnVtYmVyKHJhZGl4KSxcclxuICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuZGl2KHJhZGl4TG9uZyksXHJcbiAgICAgICAgICAgICAgICByZW0xID0gZGl2Lm11bChyYWRpeExvbmcpLnN1Yih0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0xLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gJy0nICsgdGhpcy5uZWcoKS50b1N0cmluZyhyYWRpeCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA2KSwgdGhpcy51bnNpZ25lZCksXHJcbiAgICAgICAgcmVtID0gdGhpcztcclxuICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdmFyIHJlbURpdiA9IHJlbS5kaXYocmFkaXhUb1Bvd2VyKSxcclxuICAgICAgICAgICAgaW50dmFsID0gcmVtLnN1YihyZW1EaXYubXVsKHJhZGl4VG9Qb3dlcikpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgIGRpZ2l0cyA9IGludHZhbC50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgcmVtID0gcmVtRGl2O1xyXG4gICAgICAgIGlmIChyZW0uaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoIDwgNilcclxuICAgICAgICAgICAgICAgIGRpZ2l0cyA9ICcwJyArIGRpZ2l0cztcclxuICAgICAgICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgaGlnaCBiaXRzXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBoaWdoIGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzVW5zaWduZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoID4+PiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCBsb3cgYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzID0gZnVuY3Rpb24gZ2V0TG93Qml0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmxvdztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBsb3cgYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRMb3dCaXRzVW5zaWduZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb3cgPj4+IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBMb25nLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24gZ2V0TnVtQml0c0FicygpIHtcclxuICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXEoTUlOX1ZBTFVFKSA/IDY0IDogdGhpcy5uZWcoKS5nZXROdW1CaXRzQWJzKCk7XHJcbiAgICB2YXIgdmFsID0gdGhpcy5oaWdoICE9IDAgPyB0aGlzLmhpZ2ggOiB0aGlzLmxvdztcclxuICAgIGZvciAodmFyIGJpdCA9IDMxOyBiaXQgPiAwOyBiaXQtLSlcclxuICAgICAgICBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCAhPSAwID8gYml0ICsgMzMgOiBiaXQgKyAxO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB6ZXJvLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gMCAmJiB0aGlzLmxvdyA9PT0gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNpc1plcm99LlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXF6ID0gTG9uZ1Byb3RvdHlwZS5pc1plcm87XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbmVnYXRpdmUuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24gaXNOZWdhdGl2ZSgpIHtcclxuICAgIHJldHVybiAhdGhpcy51bnNpZ25lZCAmJiB0aGlzLmhpZ2ggPCAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIHBvc2l0aXZlLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uIGlzUG9zaXRpdmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bnNpZ25lZCB8fCB0aGlzLmhpZ2ggPj0gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBvZGQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAxO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGV2ZW4uXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4oKSB7XHJcbiAgICByZXR1cm4gKHRoaXMubG93ICYgMSkgPT09IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQgIT09IG90aGVyLnVuc2lnbmVkICYmICh0aGlzLmhpZ2ggPj4+IDMxKSA9PT0gMSAmJiAob3RoZXIuaGlnaCA+Pj4gMzEpID09PSAxKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2VxdWFsc30uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5lcSA9IExvbmdQcm90b3R5cGUuZXF1YWxzO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIG5vdEVxdWFscyhvdGhlcikge1xyXG4gICAgcmV0dXJuICF0aGlzLmVxKC8qIHZhbGlkYXRlcyAqLyBvdGhlcik7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVxID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubmUgPSBMb25nUHJvdG90eXBlLm5vdEVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbiA9IGZ1bmN0aW9uIGxlc3NUaGFuKG90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPCAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW59LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubHQgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGxlc3NUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDw9IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubHRlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubGUgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbDtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW59LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3QgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID49IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3RlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2UgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbDtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXHJcbiAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICBpZiAodGhpcy5lcShvdGhlcikpXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB2YXIgdGhpc05lZyA9IHRoaXMuaXNOZWdhdGl2ZSgpLFxyXG4gICAgICAgIG90aGVyTmVnID0gb3RoZXIuaXNOZWdhdGl2ZSgpO1xyXG4gICAgaWYgKHRoaXNOZWcgJiYgIW90aGVyTmVnKVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIGlmICghdGhpc05lZyAmJiBvdGhlck5lZylcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHNpZ24gYml0cyBhcmUgdGhlIHNhbWVcclxuICAgIGlmICghdGhpcy51bnNpZ25lZClcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWIob3RoZXIpLmlzTmVnYXRpdmUoKSA/IC0xIDogMTtcclxuICAgIC8vIEJvdGggYXJlIHBvc2l0aXZlIGlmIGF0IGxlYXN0IG9uZSBpcyB1bnNpZ25lZFxyXG4gICAgcmV0dXJuIChvdGhlci5oaWdoID4+PiAwKSA+ICh0aGlzLmhpZ2ggPj4+IDApIHx8IChvdGhlci5oaWdoID09PSB0aGlzLmhpZ2ggJiYgKG90aGVyLmxvdyA+Pj4gMCkgPiAodGhpcy5sb3cgPj4+IDApKSA/IC0xIDogMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNjb21wYXJlfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmNvbXAgPSBMb25nUHJvdG90eXBlLmNvbXBhcmU7XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS5cclxuICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24gbmVnYXRlKCkge1xyXG4gICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmIHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgcmV0dXJuIHRoaXMubm90KCkuYWRkKE9ORSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNuZWdhdGV9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVnID0gTG9uZ1Byb3RvdHlwZS5uZWdhdGU7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc3VtIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBhZGRlbmQgQWRkZW5kXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU3VtXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhZGRlbmQpIHtcclxuICAgIGlmICghaXNMb25nKGFkZGVuZCkpXHJcbiAgICAgICAgYWRkZW5kID0gZnJvbVZhbHVlKGFkZGVuZCk7XHJcblxyXG4gICAgLy8gRGl2aWRlIGVhY2ggbnVtYmVyIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gc3VtIHRoZSBjaHVua3MuXHJcblxyXG4gICAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XHJcbiAgICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGExNiA9IHRoaXMubG93ID4+PiAxNjtcclxuICAgIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICB2YXIgYjQ4ID0gYWRkZW5kLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGIzMiA9IGFkZGVuZC5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGIxNiA9IGFkZGVuZC5sb3cgPj4+IDE2O1xyXG4gICAgdmFyIGIwMCA9IGFkZGVuZC5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICBjMDAgKz0gYTAwICsgYjAwO1xyXG4gICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGExNiArIGIxNjtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMzIgKyBiMzI7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjNDggKz0gYTQ4ICsgYjQ4O1xyXG4gICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChzdWJ0cmFoZW5kKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhzdWJ0cmFoZW5kKSlcclxuICAgICAgICBzdWJ0cmFoZW5kID0gZnJvbVZhbHVlKHN1YnRyYWhlbmQpO1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkKHN1YnRyYWhlbmQubmVnKCkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3N1YnRyYWN0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gc3VidHJhaGVuZCBTdWJ0cmFoZW5kXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zdWIgPSBMb25nUHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFByb2R1Y3RcclxuICovXHJcbkxvbmdQcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiBtdWx0aXBseShtdWx0aXBsaWVyKSB7XHJcbiAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICghaXNMb25nKG11bHRpcGxpZXIpKVxyXG4gICAgICAgIG11bHRpcGxpZXIgPSBmcm9tVmFsdWUobXVsdGlwbGllcik7XHJcblxyXG4gICAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XHJcbiAgICBpZiAod2FzbSkge1xyXG4gICAgICAgIHZhciBsb3cgPSB3YXNtLm11bCh0aGlzLmxvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyLmxvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllci5oaWdoKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtdWx0aXBsaWVyLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiBaRVJPO1xyXG4gICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICByZXR1cm4gbXVsdGlwbGllci5pc09kZCgpID8gTUlOX1ZBTFVFIDogWkVSTztcclxuICAgIGlmIChtdWx0aXBsaWVyLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcblxyXG4gICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllci5uZWcoKSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllcikubmVnKCk7XHJcbiAgICB9IGVsc2UgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLm11bChtdWx0aXBsaWVyLm5lZygpKS5uZWcoKTtcclxuXHJcbiAgICAvLyBJZiBib3RoIGxvbmdzIGFyZSBzbWFsbCwgdXNlIGZsb2F0IG11bHRpcGxpY2F0aW9uXHJcbiAgICBpZiAodGhpcy5sdChUV09fUFdSXzI0KSAmJiBtdWx0aXBsaWVyLmx0KFRXT19QV1JfMjQpKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHRoaXMudG9OdW1iZXIoKSAqIG11bHRpcGxpZXIudG9OdW1iZXIoKSwgdGhpcy51bnNpZ25lZCk7XHJcblxyXG4gICAgLy8gRGl2aWRlIGVhY2ggbG9uZyBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXHJcbiAgICAvLyBXZSBjYW4gc2tpcCBwcm9kdWN0cyB0aGF0IHdvdWxkIG92ZXJmbG93LlxyXG5cclxuICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGI0OCA9IG11bHRpcGxpZXIuaGlnaCA+Pj4gMTY7XHJcbiAgICB2YXIgYjMyID0gbXVsdGlwbGllci5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGIxNiA9IG11bHRpcGxpZXIubG93ID4+PiAxNjtcclxuICAgIHZhciBiMDAgPSBtdWx0aXBsaWVyLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICB2YXIgYzQ4ID0gMCwgYzMyID0gMCwgYzE2ID0gMCwgYzAwID0gMDtcclxuICAgIGMwMCArPSBhMDAgKiBiMDA7XHJcbiAgICBjMTYgKz0gYzAwID4+PiAxNjtcclxuICAgIGMwMCAmPSAweEZGRkY7XHJcbiAgICBjMTYgKz0gYTE2ICogYjAwO1xyXG4gICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICBjMTYgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGEwMCAqIGIxNjtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMzIgKiBiMDA7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTE2ICogYjE2O1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzMyICs9IGEwMCAqIGIzMjtcclxuICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgYzMyICY9IDB4RkZGRjtcclxuICAgIGM0OCArPSBhNDggKiBiMDAgKyBhMzIgKiBiMTYgKyBhMTYgKiBiMzIgKyBhMDAgKiBiNDg7XHJcbiAgICBjNDggJj0gMHhGRkZGO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMiwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbXVsdGlwbHl9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm11bCA9IExvbmdQcm90b3R5cGUubXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGUgcmVzdWx0IGlzIHNpZ25lZCBpZiB0aGlzIExvbmcgaXMgc2lnbmVkIG9yXHJcbiAqICB1bnNpZ25lZCBpZiB0aGlzIExvbmcgaXMgdW5zaWduZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gZGl2aWRlKGRpdmlzb3IpIHtcclxuICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcbiAgICBpZiAoZGl2aXNvci5pc1plcm8oKSlcclxuICAgICAgICB0aHJvdyBFcnJvcignZGl2aXNpb24gYnkgemVybycpO1xyXG5cclxuICAgIC8vIHVzZSB3YXNtIHN1cHBvcnQgaWYgcHJlc2VudFxyXG4gICAgaWYgKHdhc20pIHtcclxuICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IHNpZ25lZCBkaXZpc2lvbiBvdmVyZmxvdzogdGhlIGxhcmdlc3RcclxuICAgICAgICAvLyBuZWdhdGl2ZSBudW1iZXIgLyAtMSB3b3VsZCBiZSAxIGxhcmdlciB0aGFuIHRoZSBsYXJnZXN0XHJcbiAgICAgICAgLy8gcG9zaXRpdmUgbnVtYmVyLCBkdWUgdG8gdHdvJ3MgY29tcGxlbWVudC5cclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQgJiZcclxuICAgICAgICAgICAgdGhpcy5oaWdoID09PSAtMHg4MDAwMDAwMCAmJlxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyA9PT0gLTEgJiYgZGl2aXNvci5oaWdoID09PSAtMSkge1xyXG4gICAgICAgICAgICAvLyBiZSBjb25zaXN0ZW50IHdpdGggbm9uLXdhc20gY29kZSBwYXRoXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbG93ID0gKHRoaXMudW5zaWduZWQgPyB3YXNtLmRpdl91IDogd2FzbS5kaXZfcykoXHJcbiAgICAgICAgICAgIHRoaXMubG93LFxyXG4gICAgICAgICAgICB0aGlzLmhpZ2gsXHJcbiAgICAgICAgICAgIGRpdmlzb3IubG93LFxyXG4gICAgICAgICAgICBkaXZpc29yLmhpZ2hcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyhsb3csIHdhc20uZ2V0X2hpZ2goKSwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICB2YXIgYXBwcm94LCByZW0sIHJlcztcclxuICAgIGlmICghdGhpcy51bnNpZ25lZCkge1xyXG4gICAgICAgIC8vIFRoaXMgc2VjdGlvbiBpcyBvbmx5IHJlbGV2YW50IGZvciBzaWduZWQgbG9uZ3MgYW5kIGlzIGRlcml2ZWQgZnJvbSB0aGVcclxuICAgICAgICAvLyBjbG9zdXJlIGxpYnJhcnkgYXMgYSB3aG9sZS5cclxuICAgICAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmVxKE9ORSkgfHwgZGl2aXNvci5lcShORUdfT05FKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBNSU5fVkFMVUU7ICAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT05FO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cclxuICAgICAgICAgICAgICAgIHZhciBoYWxmVGhpcyA9IHRoaXMuc2hyKDEpO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94ID0gaGFsZlRoaXMuZGl2KGRpdmlzb3IpLnNobCgxKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcHByb3guZXEoWkVSTykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBPTkUgOiBORUdfT05FO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW0gPSB0aGlzLnN1YihkaXZpc29yLm11bChhcHByb3gpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBhcHByb3guYWRkKHJlbS5kaXYoZGl2aXNvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yLm5lZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IpLm5lZygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpdihkaXZpc29yLm5lZygpKS5uZWcoKTtcclxuICAgICAgICByZXMgPSBaRVJPO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaGUgYWxnb3JpdGhtIGJlbG93IGhhcyBub3QgYmVlbiBtYWRlIGZvciB1bnNpZ25lZCBsb25ncy4gSXQncyB0aGVyZWZvcmVcclxuICAgICAgICAvLyByZXF1aXJlZCB0byB0YWtlIHNwZWNpYWwgY2FyZSBvZiB0aGUgTVNCIHByaW9yIHRvIHJ1bm5pbmcgaXQuXHJcbiAgICAgICAgaWYgKCFkaXZpc29yLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICBkaXZpc29yID0gZGl2aXNvci50b1Vuc2lnbmVkKCk7XHJcbiAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcykpXHJcbiAgICAgICAgICAgIHJldHVybiBVWkVSTztcclxuICAgICAgICBpZiAoZGl2aXNvci5ndCh0aGlzLnNocnUoMSkpKSAvLyAxNSA+Pj4gMSA9IDcgOyB3aXRoIGRpdmlzb3IgPSA4IDsgdHJ1ZVxyXG4gICAgICAgICAgICByZXR1cm4gVU9ORTtcclxuICAgICAgICByZXMgPSBVWkVSTztcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxyXG4gICAgLy8gZmxvYXRpbmctcG9pbnQgdGhhdCBhcHByb3hpbWF0ZXMgcmVtYWluZGVyIC8gb3RoZXIgKmZyb20gYmVsb3cqLCBhZGQgdGhpc1xyXG4gICAgLy8gaW50byB0aGUgcmVzdWx0LCBhbmQgc3VidHJhY3QgaXQgZnJvbSB0aGUgcmVtYWluZGVyLiAgSXQgaXMgY3JpdGljYWwgdGhhdFxyXG4gICAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxyXG4gICAgLy8gcmVtYWluZGVyIG5ldmVyIGJlY29tZXMgbmVnYXRpdmUuXHJcbiAgICByZW0gPSB0aGlzO1xyXG4gICAgd2hpbGUgKHJlbS5ndGUoZGl2aXNvcikpIHtcclxuICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXHJcbiAgICAgICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXHJcbiAgICAgICAgYXBwcm94ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihyZW0udG9OdW1iZXIoKSAvIGRpdmlzb3IudG9OdW1iZXIoKSkpO1xyXG5cclxuICAgICAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXHJcbiAgICAgICAgLy8gdGhlIHNtYWxsZXN0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0LCB3aGljaGV2ZXIgaXMgbGFyZ2VyLlxyXG4gICAgICAgIHZhciBsb2cyID0gTWF0aC5jZWlsKE1hdGgubG9nKGFwcHJveCkgLyBNYXRoLkxOMiksXHJcbiAgICAgICAgICAgIGRlbHRhID0gKGxvZzIgPD0gNDgpID8gMSA6IHBvd19kYmwoMiwgbG9nMiAtIDQ4KSxcclxuXHJcbiAgICAgICAgLy8gRGVjcmVhc2UgdGhlIGFwcHJveGltYXRpb24gdW50aWwgaXQgaXMgc21hbGxlciB0aGFuIHRoZSByZW1haW5kZXIuICBOb3RlXHJcbiAgICAgICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94KSxcclxuICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICB3aGlsZSAoYXBwcm94UmVtLmlzTmVnYXRpdmUoKSB8fCBhcHByb3hSZW0uZ3QocmVtKSkge1xyXG4gICAgICAgICAgICBhcHByb3ggLT0gZGVsdGE7XHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94LCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxyXG4gICAgICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxyXG4gICAgICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IE9ORTtcclxuXHJcbiAgICAgICAgcmVzID0gcmVzLmFkZChhcHByb3hSZXMpO1xyXG4gICAgICAgIHJlbSA9IHJlbS5zdWIoYXBwcm94UmVtKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2RpdmlkZX0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmRpdiA9IExvbmdQcm90b3R5cGUuZGl2aWRlO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tb2R1bG8gPSBmdW5jdGlvbiBtb2R1bG8oZGl2aXNvcikge1xyXG4gICAgaWYgKCFpc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgZGl2aXNvciA9IGZyb21WYWx1ZShkaXZpc29yKTtcclxuXHJcbiAgICAvLyB1c2Ugd2FzbSBzdXBwb3J0IGlmIHByZXNlbnRcclxuICAgIGlmICh3YXNtKSB7XHJcbiAgICAgICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbS5yZW1fdSA6IHdhc20ucmVtX3MpKFxyXG4gICAgICAgICAgICB0aGlzLmxvdyxcclxuICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyxcclxuICAgICAgICAgICAgZGl2aXNvci5oaWdoXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnN1Yih0aGlzLmRpdihkaXZpc29yKS5tdWwoZGl2aXNvcikpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI21vZHVsb30uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tb2QgPSBMb25nUHJvdG90eXBlLm1vZHVsbztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUucmVtID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBOT1Qgb2YgdGhpcyBMb25nLlxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uIG5vdCgpIHtcclxuICAgIHJldHVybiBmcm9tQml0cyh+dGhpcy5sb3csIH50aGlzLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgQU5EIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93ICYgb3RoZXIubG93LCB0aGlzLmhpZ2ggJiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyB8IG90aGVyLmxvdywgdGhpcy5oaWdoIHwgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBYT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgZ2l2ZW4gb25lLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3Iob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgXiBvdGhlci5sb3csIHRoaXMuaGlnaCBeIG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0TGVmdCA9IGZ1bmN0aW9uIHNoaWZ0TGVmdChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyA8PCBudW1CaXRzLCAodGhpcy5oaWdoIDw8IG51bUJpdHMpIHwgKHRoaXMubG93ID4+PiAoMzIgLSBudW1CaXRzKSksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygwLCB0aGlzLmxvdyA8PCAobnVtQml0cyAtIDMyKSwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdExlZnR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hsID0gTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQ7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0KG51bUJpdHMpIHtcclxuICAgIGlmIChpc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKCh0aGlzLmxvdyA+Pj4gbnVtQml0cykgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgdGhpcy5oaWdoID4+IG51bUJpdHMsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2ggPj4gKG51bUJpdHMgLSAzMiksIHRoaXMuaGlnaCA+PSAwID8gMCA6IC0xLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgYXJpdGhtZXRpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNociA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHRVbnNpZ25lZChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBudW1CaXRzICY9IDYzO1xyXG4gICAgaWYgKG51bUJpdHMgPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgaGlnaCA9IHRoaXMuaGlnaDtcclxuICAgICAgICBpZiAobnVtQml0cyA8IDMyKSB7XHJcbiAgICAgICAgICAgIHZhciBsb3cgPSB0aGlzLmxvdztcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKChsb3cgPj4+IG51bUJpdHMpIHwgKGhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCBoaWdoID4+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG51bUJpdHMgPT09IDMyKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCwgMCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCA+Pj4gKG51bUJpdHMgLSAzMiksIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hydSA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hyX3UgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gc2lnbmVkLlxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNpZ25lZCBsb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvU2lnbmVkID0gZnVuY3Rpb24gdG9TaWduZWQoKSB7XHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgZmFsc2UpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byB1bnNpZ25lZC5cclxuICogQHJldHVybnMgeyFMb25nfSBVbnNpZ25lZCBsb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvVW5zaWduZWQgPSBmdW5jdGlvbiB0b1Vuc2lnbmVkKCkge1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgdHJ1ZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBsZSBXaGV0aGVyIGxpdHRsZSBvciBiaWcgZW5kaWFuLCBkZWZhdWx0cyB0byBiaWcgZW5kaWFuXHJcbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMobGUpIHtcclxuICAgIHJldHVybiBsZSA/IHRoaXMudG9CeXRlc0xFKCkgOiB0aGlzLnRvQnl0ZXNCRSgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgbGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlc0xFID0gZnVuY3Rpb24gdG9CeXRlc0xFKCkge1xyXG4gICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGxvICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgaGkgICAgICAgICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGhpID4+PiAxNiAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+IDI0XHJcbiAgICBdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlc0JFID0gZnVuY3Rpb24gdG9CeXRlc0JFKCkge1xyXG4gICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGhpID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgaGkgPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGhpICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+IDI0ICAgICAgICxcclxuICAgICAgICBsbyA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAgOCAmIDB4ZmYsXHJcbiAgICAgICAgbG8gICAgICAgICYgMHhmZlxyXG4gICAgXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgQnl0ZSByZXByZXNlbnRhdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGxlIFdoZXRoZXIgbGl0dGxlIG9yIGJpZyBlbmRpYW4sIGRlZmF1bHRzIHRvIGJpZyBlbmRpYW5cclxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJ5dGVzID0gZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzLCB1bnNpZ25lZCwgbGUpIHtcclxuICAgIHJldHVybiBsZSA/IExvbmcuZnJvbUJ5dGVzTEUoYnl0ZXMsIHVuc2lnbmVkKSA6IExvbmcuZnJvbUJ5dGVzQkUoYnl0ZXMsIHVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tQnl0ZXNMRSA9IGZ1bmN0aW9uIGZyb21CeXRlc0xFKGJ5dGVzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKFxyXG4gICAgICAgIGJ5dGVzWzBdICAgICAgIHxcclxuICAgICAgICBieXRlc1sxXSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbMl0gPDwgMTYgfFxyXG4gICAgICAgIGJ5dGVzWzNdIDw8IDI0LFxyXG4gICAgICAgIGJ5dGVzWzRdICAgICAgIHxcclxuICAgICAgICBieXRlc1s1XSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbNl0gPDwgMTYgfFxyXG4gICAgICAgIGJ5dGVzWzddIDw8IDI0LFxyXG4gICAgICAgIHVuc2lnbmVkXHJcbiAgICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHshQXJyYXkuPG51bWJlcj59IGJ5dGVzIEJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CeXRlc0JFID0gZnVuY3Rpb24gZnJvbUJ5dGVzQkUoYnl0ZXMsIHVuc2lnbmVkKSB7XHJcbiAgICByZXR1cm4gbmV3IExvbmcoXHJcbiAgICAgICAgYnl0ZXNbNF0gPDwgMjQgfFxyXG4gICAgICAgIGJ5dGVzWzVdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1s2XSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbN10sXHJcbiAgICAgICAgYnl0ZXNbMF0gPDwgMjQgfFxyXG4gICAgICAgIGJ5dGVzWzFdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1syXSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbM10sXHJcbiAgICAgICAgdW5zaWduZWRcclxuICAgICk7XHJcbn07XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbnJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbmNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmNvbnN0IGRlZmF1bHRFbmNyeXB0T3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdEVuY3J5cHRPcHRpb25zID0ge1xuICBiaXQ6IDYsXG4gIG1hcDogJ1E0S21YLUVEQ1JvcEJUR1M3YXMycldWdHVpWW5IeHo4TE9QQTB5WmszajZfcXdlaE45SWxVSjUxRk1idmdmY2QnLFxuICBjaXBoZXI6ICdtb2VyYWVfYXBwX2NpcGhlcicsXG4gIGpvaW46ICc9LkAnXG59O1xuXG4vKipcbiog5Yqg5a+G5a2X56ym5Liy6YCa55So5pa55rOVXG4qIEBhdXRob3IgbGVubm9uXG4qIEBwYXJhbSBvcmlnaW4gU3RyaW5n77yM6KaB5Yqg5a+G55qE5a2X56ym5LiyXG4qIEBwYXJhbSBvcHRpb25zLmJpdCBOdW1iZXLvvIznu5PmnpzkuK3mr4/kuKrlrZfnrKbnmoQy6L+b5Yi25L2N5pWwXG4qIEBwYXJhbSBvcHRpb25zLm1hcCBTdHJpbmfvvIzmr4/kuKrlrZfnrKblr7nlupTnmoTmlbDkvY3ooahcbiogQHBhcmFtIG9wdGlvbnMuY2lwaGVyIFN0cmluZ++8jGNpcGhlcuWAvOS4ulN0cmluZ++8jOWImeWPr+S7peS9v+eUqOeUn+aIkOeahGtleeeUqGRlY29kZUJ5TWFw5pa55rOV6Kej56CB77yM5ZCm5YiZ5peg5rOV6Kej56CBXG4qIEBwYXJhbSBvcHRpb25zLm1peGVkIEZ1bmN0aW9u77yM5pyA57uIMui/m+WItuS4sueahOa3t+a3huaWueazlVxuKiBAcGFyYW0gb3B0aW9ucy5qb2luIFN0cmluZ++8jOS9nOS4uui/nuaOpeWtl+espuS4suWwhmtleeWSjGNvZGXov57lnKjkuIDotbfovpPlh7rmiJDkuIDkuKrlrZfnrKbkuLLvvIxudWxs5YiZ5LiN6L+e5o6lXG4qIEByZXR1cm4gU3RyaW5nL09iamVjdCBvcHRpb25zLmpvaW7kuLrnqbrvvIzov5Tlm557a2V5LCBjb2Rlfe+8jOWQpuWImei/lOWbnmtleStqb2luK2NvZGXvvIxvcHRpb25zLmNpcGhlcuS4uuepuu+8jOi/lOWbnmNvZGVcbioqL1xuY29uc3QgZW5jb2RlQnlNYXAgPSBleHBvcnRzLmVuY29kZUJ5TWFwID0gZnVuY3Rpb24gZW5jb2RlQnlNYXAob3JpZ2luLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9vcHRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgYml0OiA1LFxuICAgIG1hcDogJ2p0enlfN3Fma2Jsb3Zld2FuZ3h1bTVkc3JoODZlM3A5JyxcbiAgICBjaXBoZXI6ICdtb2VyYWVfY3J5cHRvJyxcbiAgICBtaXhlZDogcyA9PiBzLFxuICAgIGpvaW46ICcuJyxcbiAgICBpc0hleDogZmFsc2VcbiAgfSwgb3B0aW9ucyk7XG4gIGlmIChfb3B0cy5tYXAubGVuZ3RoIDwgTWF0aC5wb3coMiwgX29wdHMuYml0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgbm90IGVub3VnaCBjaGFyYWN0ZXJzIGluIG9wdGlvbnMubWFwLCBnb3QgJHtfb3B0cy5tYXAubGVuZ3RofSwgZXhwZWN0ZWQgJHtNYXRoLnBvdygyLCBfb3B0cy5iaXQpfS5gKTtcbiAgfVxuICBpZiAodHlwZW9mIF9vcHRzLm1peGVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBvcHRpb25zLm1peGVkIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0IGdvdCAke3R5cGVvZiBfb3B0cy5taXhlZH0uYCk7XG4gIH1cbiAgbGV0IF9oZXggPSBvcmlnaW47XG4gIGxldCBfc3RyMiA9ICcnO1xuICBsZXQga2V5ID0gbnVsbDtcbiAgbGV0IGNvZGUgPSBudWxsO1xuICBsZXQgX2xhc3Q4TGVuZ3RoID0gMDtcbiAgbGV0IF9sYXN0Mkxlbmd0aCA9IDA7XG4gIGxldCBfa2V5T3JpZ2luID0gX29wdHMuY2lwaGVyO1xuICBjb25zdCBfaGV4ZXNfc3BsaXQ4ID0gW107XG4gIGNvbnN0IF9hcnJCaXQgPSBbXTtcbiAgLy8g6Iul5pys6Lqr5LiN5pivMTbov5vliLbkuLLvvIzpgJrov4dCdWZmZXLovazkuLoxNui/m+WItuS4slxuICBpZiAoIV9vcHRzLmlzSGV4KSB7XG4gICAgX2hleCA9IEJ1ZmZlci5mcm9tKG9yaWdpbikudG9TdHJpbmcoJ2hleCcpO1xuICB9XG4gIC8vIOaLhuaIkG7nu4Tplb/luqbkuLo455qEMTbov5vliLbkuLLvvIzovawy6L+b5Yi25LiyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgX2hleC5sZW5ndGg7IGkgKz0gOCkge1xuICAgIF9oZXhlc19zcGxpdDgucHVzaChfaGV4LnN1YnN0cihpLCA4KSk7XG4gIH1cbiAgX2xhc3Q4TGVuZ3RoID0gX2hleGVzX3NwbGl0OFtfaGV4ZXNfc3BsaXQ4Lmxlbmd0aCAtIDFdLmxlbmd0aDtcbiAgX2hleGVzX3NwbGl0OC5mb3JFYWNoKChoKSA9PiB7XG4gICAgLy8g6L2sMui/m+WItuS4su+8jOihpei2szMy5L2NXG4gICAgbGV0IF9pbnQyID0gcGFyc2VJbnQoaCwgMTYpLnRvU3RyaW5nKDIpO1xuICAgIHdoaWxlIChfaW50Mi5sZW5ndGggPCAzMikge1xuICAgICAgX2ludDIgPSAnMCcgKyBfaW50MjtcbiAgICB9XG4gICAgX3N0cjIgKz0gX2ludDI7XG4gIH0pO1xuXG4gIC8vIOiLpeaciea3t+a3huaWueazle+8jOa3t+a3hjLov5vliLbkuLJcbiAgX3N0cjIgPSBfb3B0cy5taXhlZChfc3RyMik7XG4gIC8vIOaMieeFp29wdGlvbnMuYml05L2N5pWw5ouG5YiG77yM5p+l5om+b3B0aW9uLm1hcOa3u+WKoFxuICBmb3IgKGxldCBqID0gMDsgaiA8IF9zdHIyLmxlbmd0aDsgaiArPSBfb3B0cy5iaXQpIHtcbiAgICBjb25zdCBfYml0MiA9IF9zdHIyLnN1YnN0cihqLCBfb3B0cy5iaXQpO1xuICAgIF9hcnJCaXQucHVzaChfb3B0cy5tYXBbcGFyc2VJbnQoX2JpdDIsIDIpXSk7XG4gICAgX2xhc3QyTGVuZ3RoID0gX2JpdDIubGVuZ3RoO1xuICB9XG4gIGNvZGUgPSBfYXJyQml0LmpvaW4oJycpO1xuICBpZiAodHlwZW9mIF9rZXlPcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgX2tleU9yaWdpbiA9IEJ1ZmZlci5mcm9tKGAjIyR7X2xhc3Q4TGVuZ3RofSMjJHtfbGFzdDJMZW5ndGh9IyMke19vcHRzLmNpcGhlcn1gKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAga2V5ID0gX2tleU9yaWdpbltfa2V5T3JpZ2luLmxlbmd0aCAtIDFdICsgX2tleU9yaWdpbi5zdWJzdHIoMSwgX2tleU9yaWdpbi5sZW5ndGggLSAyKSArIF9rZXlPcmlnaW5bMF07XG4gICAgcmV0dXJuIF9vcHRzLmpvaW4gPyAoa2V5ICsgX29wdHMuam9pbiArIGNvZGUpIDogeyBrZXksIGNvZGUgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29kZTtcbiAgfVxufTtcblxuLyoqXG4qIOino+WvhuWtl+espuS4sumAmueUqOaWueazlVxuKiBAYXV0aG9yIGxlbm5vblxuKiBAcGFyYW0gY29kZSBTdHJpbmcvT2JqZWN077yM6KaB6Kej5a+G55qE5a2X56ym5LiyXG4qIEBwYXJhbSBvcHRpb25zLmJpdCBOdW1iZXLvvIznu5PmnpzkuK3mr4/kuKrlrZfnrKbnmoQy6L+b5Yi25L2N5pWwXG4qIEBwYXJhbSBvcHRpb25zLm1hcCBTdHJpbmfvvIzmr4/kuKrlrZfnrKblr7nlupTnmoTmlbDkvY3ooahcbiogQHBhcmFtIG9wdGlvbnMucmVtaXggRnVuY3Rpb27vvIzpkojlr7llbmNvZGXmlrnms5XkuK3mt7fmt4bmlrnms5XnmoTlj43mt7fmt4bmlrnms5VcbiogQHBhcmFtIG9wdGlvbnMuam9pbiBTdHJpbmfvvIzkvZzkuLrov57mjqXlrZfnrKbkuLLlsIZrZXnlkoxjb2Rl6L+e5Zyo5LiA6LW36L6T5Ye65oiQ5LiA5Liq5a2X56ym5Liy77yMbnVsbOWImeS4jei/nuaOpVxuKiBAcGFyYW0gb3B0aW9ucy5pc0hleCBTdHJpbmfvvIzop6PnoIHlkI7mmK/lkKbkv53mjIExNui/m+WItu+8jOS4jeeUqEJ1ZmZlcui/mOWOn1xuKiBAcmV0dXJuIFN0cmluZyDov5Tlm57op6Plr4blkI7nmoTlrZfnrKbkuLJcbioqL1xuY29uc3QgZGVjb2RlQnlNYXAgPSBleHBvcnRzLmRlY29kZUJ5TWFwID0gZnVuY3Rpb24oY29kZSwgb3B0aW9ucykge1xuICBjb25zdCBfb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGJpdDogNSxcbiAgICBtYXA6ICdqdHp5XzdxZmtibG92ZXdhbmd4dW01ZHNyaDg2ZTNwOScsXG4gICAgcmVtaXg6IHMgPT4gcyxcbiAgICBqb2luOiAnLicsXG4gICAgaXNIZXg6IGZhbHNlXG4gIH0sIG9wdGlvbnMpO1xuICBpZiAoX29wdHMubWFwLmxlbmd0aCA8IE1hdGgucG93KDIsIF9vcHRzLmJpdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBlbm91Z2ggY2hhcmFjdGVycyBpbiBvcHRpb25zLm1hcCwgZ290ICR7X29wdHMubWFwLmxlbmd0aH0sIGV4cGVjdGVkICR7TWF0aC5wb3coMiwgX29wdHMuYml0KX0uYCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBfb3B0cy5yZW1peCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgb3B0aW9ucy5yZW1peCBtdXN0IGJlIGEgZnVuY3Rpb24sIGJ1dCBnb3QgJHt0eXBlb2YgX29wdHMucmVtaXh9LmApO1xuICB9XG4gIGNvbnN0IHsgYml0LCBtYXAsIHJlbWl4LCBqb2luLCBpc0hleCB9ID0gX29wdHM7XG4gIGxldCBfa2V5T3JpZ2luID0gbnVsbDtcbiAgbGV0IF9jb2RlT3JpZ2luID0gbnVsbDtcbiAgbGV0IF9sYXN0OExlbmd0aCA9IG51bGw7XG4gIGxldCBfbGFzdDJMZW5ndGggPSBudWxsO1xuICBsZXQgX3NwYXJyID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBjb2RlID09PSAnb2JqZWN0JyAmJiBjb2RlLmtleSAmJiBjb2RlLmNvZGUpIHtcbiAgICBfa2V5T3JpZ2luID0gY29kZS5rZXk7XG4gICAgX2NvZGVPcmlnaW4gPSBjb2RlLmNvZGU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBqb2luID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGppID0gY29kZS5pbmRleE9mKGpvaW4pO1xuICAgIF9rZXlPcmlnaW4gPSBjb2RlLnN1YnN0cigwLCBqaSk7XG4gICAgX2NvZGVPcmlnaW4gPSBjb2RlLnN1YnN0cihqaSArIGpvaW4ubGVuZ3RoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvZGUgbXVzdCBiZSBhIG9iamVjdCB3aXRoIFtrZXldICYgW2NvZGVdIG9yIGEgc3RyaW5nIGpvaW4ga2V5ICYgY29kZSB3aXRoIG9wdGlvbnMuam9pbiEnKTtcbiAgfVxuICBfa2V5T3JpZ2luID0gQnVmZmVyLmZyb20oX2tleU9yaWdpbltfa2V5T3JpZ2luLmxlbmd0aCAtIDFdICsgX2tleU9yaWdpbi5zdWJzdHIoMSwgX2tleU9yaWdpbi5sZW5ndGggLSAyKSArIF9rZXlPcmlnaW5bMF0sXG4gICAgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG4gIF9zcGFyciA9IF9rZXlPcmlnaW4uc3BsaXQoJyMjJyk7XG4gIF9sYXN0OExlbmd0aCA9IHBhcnNlSW50KF9zcGFyclsxXSk7XG4gIF9sYXN0Mkxlbmd0aCA9IHBhcnNlSW50KF9zcGFyclsyXSk7XG4gIF9rZXlPcmlnaW4gPSBfc3BhcnIuc2xpY2UoMykuam9pbignJyk7XG5cbiAgbGV0IF9zdHIyID0gJyc7IGxldCBfc3RyMTYgPSAnJztcbiAgLy8g5oyJ54Wnb3B0aW9ucy5tYXDovazkuLoy6L+b5Yi25LiyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgX2NvZGVPcmlnaW4ubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgX2ludDIgPSBwYXJzZUludChtYXAuaW5kZXhPZihfY29kZU9yaWdpbltpXSkpLnRvU3RyaW5nKDIpO1xuICAgIHdoaWxlIChfaW50Mi5sZW5ndGggPCAoKGkgPT09IF9jb2RlT3JpZ2luLmxlbmd0aCAtIDEpID8gX2xhc3QyTGVuZ3RoIDogYml0KSkge1xuICAgICAgX2ludDIgPSAnMCcgKyBfaW50MjtcbiAgICB9XG4gICAgX3N0cjIgKz0gX2ludDI7XG4gIH1cbiAgLy8g6Iul5pyJ5Y+N5re35reG5pa55rOV77yM6L+b6KGM5Y+N5re35reGXG4gIF9zdHIyID0gcmVtaXgoX3N0cjIpO1xuICAvLyDlsIYy6L+b5Yi25Liy5oyJMzLkvY3liIbnu4TvvIzlubbliIbliKvovazmiJA45L2N55qEMTbov5vliLbkuLLnu4RcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBfc3RyMi5sZW5ndGg7IGogKz0gMzIpIHtcbiAgICBsZXQgX2ludDE2ID0gcGFyc2VJbnQoX3N0cjIuc3Vic3RyKGosIDMyKSwgMikudG9TdHJpbmcoMTYpO1xuICAgIHdoaWxlIChfaW50MTYubGVuZ3RoIDwgKChfc3RyMi5sZW5ndGggPD0gaiArIDMyKSA/IF9sYXN0OExlbmd0aCA6IDgpKSB7XG4gICAgICBfaW50MTYgPSAnMCcgKyBfaW50MTY7XG4gICAgfVxuICAgIF9zdHIxNiArPSBfaW50MTY7XG4gIH1cbiAgcmV0dXJuIGlzSGV4ID8gX3N0cjE2IDogQnVmZmVyLmZyb20oX3N0cjE2LCAnaGV4JykudG9TdHJpbmcoKTtcbn07XG5cbmNvbnN0IGVuY3J5cHQgPSBleHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAob3JpZ2luKSB7XG4gIHJldHVybiBlbmNvZGVCeU1hcChvcmlnaW4sIGRlZmF1bHRFbmNyeXB0T3B0aW9ucyk7XG59O1xuY29uc3QgZGVjcnlwdCA9IGV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gIHJldHVybiBkZWNvZGVCeU1hcChjb2RlLCBkZWZhdWx0RW5jcnlwdE9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5tZDUgPSBmdW5jdGlvbiAob3JpZ2luKSB7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdtZDUnKVxuICAgIC51cGRhdGUob3JpZ2luKVxuICAgIC5kaWdlc3QoJ2hleCcpO1xufTtcblxuIiwiXG5jb25zdCBfX2xvZ2dlcl9fID0gbnVsbDtcblxuY29uc3QgcG9seWZpbGxzID0gKGZ1bmN0aW9uICgpIHtcblxuICBpZiAoIURhdGUucHJvdG90eXBlLmdldFN0YW1wKSB7XG4gICAgLyoqXG4gICAgKiDku6Xnp5LkuLrljZXkvY3nmoTml7bpl7TmiLPvvIzljbNNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMClcbiAgICAqIEBhdXRob3IgbGVubm9uXG4gICAgKiBAcmV0dXJuIE51bWJlciDml7bpl7TmiLNcbiAgICAqKi9cbiAgICBEYXRlLnByb3RvdHlwZS5nZXRTdGFtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfTtcbiAgfVxuICBpZiAoIURhdGUuZ2V0Q3VycmVudFN0YW1wKSB7XG4gICAgLyoqXG4gICAgKiDku6Xnp5LkuLrljZXkvY3nmoTml7bpl7TmiLPvvIzljbNNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMClcbiAgICAqIEBhdXRob3IgbGVubm9uXG4gICAgKiBAcmV0dXJuIE51bWJlciDml7bpl7TmiLNcbiAgICAqKi9cbiAgICBEYXRlLmdldEN1cnJlbnRTdGFtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFN0YW1wKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYXJyRXhwID0gWzcsIDksIDEwLCA1LCA4LCA0LCAyLCAxLCA2LCAzLCA3LCA5LCAxMCwgNSwgOCwgNCwgMl07IC8vIOWKoOadg+WboOWtkFxuICBjb25zdCBhcnJWYWxpZCA9IFsxLCAwLCAnWCcsIDksIDgsIDcsIDYsIDUsIDQsIDMsIDJdOy8vIOagoemqjOeggVxuICBjb25zdCBjbk5ld0lEUmVnRXhwID0gL15bMS05XVswLTddXFxkezR9KCgxOVxcZHsyfSgwWzEzLTldfDFbMDEyXSkoMFsxLTldfFsxMl1cXGR8MzApKXwoMTlcXGR7Mn0oMFsxMzU3OF18MVswMl0pMzEpfCgxOVxcZHsyfTAyKDBbMS05XXwxXFxkfDJbMC04XSkpfCgxOShbMTM1NzldWzI2XXxbMjQ2OF1bMDQ4XXwwWzQ4XSkwMjI5KSlcXGR7M30oXFxkfFh8eCk/JC9pO1xuICBpZiAoIVN0cmluZy5wcm90b3R5cGUuaXNDbk5ld0lEKSB7XG4gICAgLyoqXG4gICAgKiDmo4DpqowxOOS9jei6q+S7veivgeWPt+egge+8iDE15L2N5Y+356CB5Y+v5Lul5Y+q5qOA5rWL55Sf5pel5piv5ZCm5q2j56Gu5Y2z5Y+v77yJXG4gICAgKiBAYXV0aG9yIGxlbm5vblxuICAgICogQHJldHVybiBCb29sZWFuIOaYr+WQpuWQiOazlVxuICAgICoqL1xuICAgIFN0cmluZy5wcm90b3R5cGUuaXNDbk5ld0lEID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNuTmV3SURSZWdFeHAudGVzdCh0aGlzKSkge1xuICAgICAgICBsZXQgc3VtID0gMCwgaWR4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIC8vIOWvueWJjTE35L2N5pWw5a2X5LiO5p2D5YC85LmY56ev5rGC5ZKMXG4gICAgICAgICAgc3VtICs9IHBhcnNlSW50KHRoaXMuc3Vic3RyKGksIDEpLCAxMCkgKiBhcnJFeHBbaV07XG4gICAgICAgIH1cbiAgICAgICAgLy8g6K6h566X5qih77yI5Zu65a6a566X5rOV77yJXG4gICAgICAgIGlkeCA9IHN1bSAlIDExO1xuICAgICAgICAvLyDmo4DpqoznrKwxOOS4uuaYr+WQpuS4juagoemqjOeggeebuOetiVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgIHJldHVybiBhcnJWYWxpZFtpZHhdID09IHRoaXMuc3Vic3RyKDE3LCAxKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGF0ZV9nZXRTdGFtcDogRGF0ZS5wcm90b3R5cGUuZ2V0U3RhbXAsXG4gICAgZ2V0Q3VycmVudFN0YW1wOiBEYXRlLmdldEN1cnJlbnRTdGFtcCxcbiAgICBzdHJpbmdfaXNDbk5ld0lEOiBTdHJpbmcucHJvdG90eXBlLmlzQ25OZXdJRFxuICB9XG5cbn0pKCk7XG5cblxuZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy50eXBlID0gJ2N1c3RvbWVyJztcbiAgdGhpcy5uYW1lID0gJ0N1c3RvbWVyRXJyb3InO1xuICB0aGlzLmNvZGUgPSA5OTk5O1xuICB0aGlzLmlubmVyRXJyb3IgPSB0aGlzO1xufVxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuRXhjZXB0aW9uLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobG9nZ2VyKSB7XG4gIGxvZ2dlciA9IGxvZ2dlciB8fCB0aGlzLmxvZ2dlciB8fCBjb25zb2xlO1xuICBsb2dnZXIuZXJyb3IoYFshRVhDRVBUSU9OXSAtIFske3RoaXMudHlwZX1dIC0+ICR7dGhpcy5uYW1lIHx8IHRoaXMubWVzc2FnZX0gKENvZGU6JHt0aGlzLmNvZGV9KTwtLS0tYCk7XG4gIHRoaXMuZmlsZU5hbWUgJiYgbG9nZ2VyLmVycm9yKGBcXHQgW2xpbmUgJHt0aGlzLmxpbmVOdW1iZXJ9LCBjb2wgJHt0aGlzLmNvbHVtbk51bWJlcn1dIC0gJHt0aGlzLmZpbGVOYW1lfWApO1xuICB0aGlzLm5hbWUgJiYgbG9nZ2VyLmVycm9yKGBcXHQgW21lc3NhZ2VdIC0gJHt0aGlzLm1lc3NhZ2V9YCk7XG4gIGxvZ2dlci5lcnJvcihgXFx0ICR7dGhpcy5zdGFjayB8fCB0aGlzLmlubmVyRXJyb3Iuc3RhY2t9YCk7XG4gIGxvZ2dlci5lcnJvcihgXFx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG59XG5cbmZ1bmN0aW9uIF9jYXVnaHQoZXJyKSB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFeGNlcHRpb24pIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIGNvbnN0IHdyYXBwZXIgPSBuZXcgRXhjZXB0aW9uKCk7XG4gIGlmICghZXJyIHx8IHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnKSB7XG4gICAgd3JhcHBlci5tZXNzYWdlID0gZXJyIHx8ICd1bmRlZmluZWQgZXJyb3IhJztcbiAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgY29kZSwgdHlwZSwgbmFtZSwgc3RhY2ssIG51bWJlciB9ID0gZXJyO1xuICAgIHdyYXBwZXIuY29kZSA9IHR5cGVvZiBjb2RlID09PSAnbnVtYmVyJyA/IGNvZGUgOiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicgPyBudW1iZXIgOiB3cmFwcGVyLmNvZGUpO1xuICAgIHdyYXBwZXIubWVzc2FnZSA9IGAoQ29kZToke3dyYXBwZXIuY29kZX0pJHttZXNzYWdlfWA7XG4gICAgd3JhcHBlci50eXBlID0gdHlwZSB8fCB3cmFwcGVyLnR5cGU7XG4gICAgd3JhcHBlci5uYW1lID0gbmFtZSB8fCB3cmFwcGVyLm5hbWU7XG4gICAgd3JhcHBlci5zdGFjayA9IHN0YWNrO1xuICB9XG4gIHdyYXBwZXIuaW5uZXJFcnJvciA9IGVycjtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmV4cG9ydHMucG9seWZpbGxzID0gcG9seWZpbGxzO1xuXG5leHBvcnRzLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbmV4cG9ydHMuY2F1Z2h0ID0gX2NhdWdodDtcbmV4cG9ydHMuZXJybG9nID0gZnVuY3Rpb24gKGVyciwgbG9nZ2VyKSB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFeGNlcHRpb24pIHtcbiAgICBlcnIubG9nKGxvZ2dlciB8fCBfX2xvZ2dlcl9fKTtcbiAgfSBlbHNlIHtcbiAgICBfY2F1Z2h0KGVycikubG9nKGxvZ2dlciB8fCBfX2xvZ2dlcl9fKTtcbiAgfVxufTtcbmV4cG9ydHMuc2V0TG9nZ2VyID0gZnVuY3Rpb24gKGxvZ2dlcikgeyBcbiAgX19sb2dnZXJfXyA9IGxvZ2dlcjtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7IiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG4gIHJldHVybiAoW2J0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1dKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsIi8qKlxuKiDop6PmnpBKU09O5pa55rOV77yM6Ziy5q2iRXJyb3Lmipvlh7rvvIzml6DmlYjliJnov5Tlm55udWxsXG4qIEBhdXRob3IgbGVubm9uXG4qIEBwYXJhbSBzdHIgU3RyaW5n77yM6ZyA6KaB6Kej5p6Q55qESlNPTuWtl+espuS4slxuKiBAcmV0dXJuIE9iamVjdCDop6PmnpDlkI7nmoTlr7nosaFcbioqL1xuZXhwb3J0cy5wYXJzZUpTT04gPSAoc3RyKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8qKlxuKiDpqbzls7DlvI/lkb3lkI3ms5XovazmjaLkuLrov57lrZfnrKblkb3lkI3ms5VcbiogQGF1dGhvciBsZW5ub25cbiogQHBhcmFtIG5hbWUgU3RyaW5n77yM6ZyA6KaB6L2s5o2i55qE5Y+Y6YeP5ZCNXG4qIEByZXR1cm4gU3RyaW5nIOi9rOaNouWQjueahOWPmOmHj+WQjVxuKiovXG5leHBvcnRzLmNhbWVsVG9IeXBoZW5hdGUgPSAobmFtZSkgPT4ge1xuICByZXR1cm4gcGFyc2VDYW1lbChuYW1lKS5qb2luKCctJyk7XG59O1xuXG4vKipcbiog6L+e5a2X56ym5ZG95ZCN5rOV6L2s5o2i5Li66am85bOw5byP5ZG95ZCN5rOVXG4qIEBhdXRob3IgbGVubm9uXG4qIEBwYXJhbSBuYW1lIFN0cmluZ++8jOmcgOimgei9rOaNoueahOWPmOmHj+WQjVxuKiBAcmV0dXJuIFN0cmluZyDovazmjaLlkI7nmoTlj5jph4/lkI1cbioqL1xuZXhwb3J0cy5oeXBoZW5hdGVUb0NhbWVsID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIHBhcnNlQ29ubmVjdG9yKG5hbWUsICctJyk7XG59O1xuXG4vKipcbiog5LiL5YiS57q/5ZG95ZCN5rOV6L2s5o2i5Li66am85bOw5byP5ZG95ZCN5rOVXG4qIEBhdXRob3IgbGVubm9uXG4qIEBwYXJhbSBuYW1lIFN0cmluZ++8jOmcgOimgei9rOaNoueahOWPmOmHj+WQjVxuKiBAcmV0dXJuIFN0cmluZyDovazmjaLlkI7nmoTlj5jph4/lkI1cbioqL1xuZXhwb3J0cy51bmRlcnNjb3JlVG9DYW1lbCA9IChuYW1lKSA9PiB7XG4gIHJldHVybiBwYXJzZUNvbm5lY3RvcihuYW1lLCAnXycpO1xufTtcblxuLyoqXG4qIOmpvOWzsOW8j+WRveWQjeazlei9rOaNouS4uuS4i+WIkue6v+WRveWQjeazlVxuKiBAYXV0aG9yIGxlbm5vblxuKiBAcGFyYW0gbmFtZSBTdHJpbmfvvIzpnIDopoHovazmjaLnmoTlj5jph4/lkI1cbiogQHJldHVybiBTdHJpbmcg6L2s5o2i5ZCO55qE5Y+Y6YeP5ZCNXG4qKi9cbmV4cG9ydHMuY2FtZWxUb1VuZGVyc2NvcmUgPSAobmFtZSkgPT4ge1xuICByZXR1cm4gcGFyc2VDYW1lbChuYW1lKS5qb2luKCdfJyk7XG59O1xuXG4vKipcbiog6L+e5a2X56ym5ZG95ZCN5rOV6L2s5o2i5Li65LiL5YiS57q/5ZG95ZCN5rOVXG4qIEBhdXRob3IgbGVubm9uXG4qIEBwYXJhbSBuYW1lIFN0cmluZ++8jOmcgOimgei9rOaNoueahOWPmOmHj+WQjVxuKiBAcmV0dXJuIFN0cmluZyDovazmjaLlkI7nmoTlj5jph4/lkI1cbioqL1xuZXhwb3J0cy5oeXBoZW5hdGVUb1VuZGVyc2NvcmUgPSAobmFtZSkgPT4ge1xuICByZXR1cm4gbmFtZS5zcGxpdCgnLScpLmpvaW4oJ18nKTtcbn07XG5cbi8qKlxuKiDkuIvliJLnur/lkb3lkI3ms5XovazmjaLkuLrov57lrZfnrKblkb3lkI3ms5VcbiogQGF1dGhvciBsZW5ub25cbiogQHBhcmFtIG5hbWUgU3RyaW5n77yM6ZyA6KaB6L2s5o2i55qE5Y+Y6YeP5ZCNXG4qIEByZXR1cm4gU3RyaW5nIOi9rOaNouWQjueahOWPmOmHj+WQjVxuKiovXG5leHBvcnRzLnVuZGVyc2NvcmVUb0h5cGhlbmF0ZSA9IChuYW1lKSA9PiB7XG4gIHJldHVybiBuYW1lLnNwbGl0KCdfJykuam9pbignLScpO1xufTtcblxuZnVuY3Rpb24gcGFyc2VDYW1lbChuYW1lKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdOyBsZXQgc3RhcnQgPSAwO1xuICBuYW1lICs9ICdBJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5hbWVbaV0udG9Mb3dlckNhc2UoKSAhPT0gbmFtZVtpXSB8fCBpID09PSBuYW1lLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5hbWUuc3Vic3RyaW5nKHN0YXJ0LCBpKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25uZWN0b3IobmFtZSwgY29ubmVjdG9yKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5hbWUuc3BsaXQoY29ubmVjdG9yKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgY29uc3QgdiA9IHJlc3VsdFtpXTtcbiAgICAgIHJlc3VsdFtpXSA9IHZbMF0udG9VcHBlckNhc2UoKSArIHYuc2xpY2UoMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQuam9pbignJyk7XG59XG5cblxuY29uc3QgQSA9ICgnemVyb15vbmVedHdvXnRocmVlXmZvdXJeZml2ZV5zaXhec2V2ZW5eZWlnaHRebmluZV50ZW4nICtcbiAgJ15lbGV2ZW5edHdlbHZlXnRoaXJ0ZWVuXmZvdXJ0ZWVuXmZpZnRlZW5ec2l4dGVlbl5zZXZlbnRlZW5eZWlnaHRlZW5ebmluZXRlZW5eJyArXG4gICdedHdlbnR5XnRoaXJ0eV5mb3J0eV5maWZ0eV5zaXh0eV5zZXZlbnR5XmVpZ2h0eV5uaW5ldHleaHVuZHJlZF4nICtcbiAgJ150aG91c2FuZF5taWxsaW9uXmJpbGxpb25edHJpbGxpb25ecXVhZHJpbGxpb25ecXVpbnRpbGxpb24nKS5zcGxpdCgnXicpLFxuICBCID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDEwMDA7IGkrKykge1xuICBCW2ldID0gaSA8IDIwID8gQVtpXSA6XG4gICAgaSA8IDEwMCA/XG4gICAgICBBWzE5ICsgTWF0aC5mbG9vcihpIC8gMTApXSArIChpICUgMTAgPT0gMCA/IFwiXCIgOiBcIi1cIiArIEJbaSAlIDEwXSlcbiAgICAgIDpcbiAgICAgIEFbTWF0aC5mbG9vcihpIC8gMTAwKV0gKyBcIiBcIiArIEFbMjldICsgKGkgJSAxMDAgPT0gMCA/IFwiXCIgOiBcIiBhbmQgXCIgKyBCW2kgJSAxMDBdKTtcbn1cbmNvbnN0IFMgPSBbJycsICfljYEnLCAn55m+JywgJ+WNgycsICfkuIcnLCAn5Lq/JywgJ+eCuScsICcnXSxcbiAgUiA9IFsnJywgJ+aLvicsICfkvbAnLCAn5LufJywgJ+S4hycsICfkur8nLCAn54K5JywgJyddLFxuICBYID0gWyfpm7YnLCAn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nLCAn5LiDJywgJ+WFqycsICfkuZ0nXSxcbiAgWSA9IFsn6Zu2JywgJ+WjuScsICfotLAnLCAn5Y+BJywgJ+iChicsICfkvI0nLCAn6ZmGJywgJ+afkicsICfmjYwnLCAn546WJ107XG5cbi8qKlxuKiDmlbDlrZfovazmjaLkuLroi7Hmlofooajov7BcbiogQGF1dGhvciBsZW5ub25cbiogQHBhcmFtIG51bSBudW1iZXLvvIzmlbDlrZfnmoTlgLxcbiogQHJldHVybiBTdHJpbmcg6L2s5o2i5ZCO55qE6Iux5paH6KGo6L+wXG4qKi9cbmV4cG9ydHMubnVtMmVuID0gKG51bSkgPT4ge1xuICBpZiAoIS9eXFxkKihcXC5cXGQqKT8kLy50ZXN0KG51bSkpIHtcbiAgICByZXR1cm4gJ051bWJlciBpcyB3cm9uZyEnO1xuICB9XG4gIGNvbnN0IG51bUludCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMF0uc3BsaXQoJywnKS5qb2luKCcnKTtcbiAgbGV0IHNlYywgdGV4dCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguY2VpbChudW1JbnQubGVuZ3RoIC8gMyk7IGkrKykge1xuICAgIHNlYyA9IHBhcnNlSW50KFxuICAgICAgbnVtSW50LnN1YnN0cmluZyhcbiAgICAgICAgbnVtSW50Lmxlbmd0aCAtIDMgKiBpIC0gMyxcbiAgICAgICAgbnVtSW50Lmxlbmd0aCAtIDMgKiBpXG4gICAgICApLFxuICAgICAgMTBcbiAgICApO1xuICAgIHRleHQgPSAoaSA9PSAwICYmIHNlYyA+IDAgJiYgc2VjIDwgMTAwICYmIHBhcnNlSW50KG51bUludC5zdWJzdHJpbmcoMCwgbGVuZ3RoIC0gMyksIDEwKSA+IDAgPyAnIGFuZCAnIDogJycpICtcbiAgICAgIChzZWMgPT0gMCAmJiAoaSA+IDAgfHwgbnVtSW50LnRvU3RyaW5nKDEwKSAhPSAwKSA/ICcnIDogQltzZWNdKSArXG4gICAgICAoc2VjID09IDAgPyAnJyA6ICcgJyArICh0eXBlb2YgQVszMCArIGldID09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBBWzMwICsgaV0pKSArXG4gICAgICAoaSA9PSAwIHx8IHNlYyA9PSAwIHx8IChzZWMgPiAwICYmIHRleHQgPT0gJycpID8gJycgOiAnLCAnKSArIHRleHQ7XG4gIH1cbiAgaWYgKG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV0pIHtcbiAgICBsZXQgbnVtRmxvYXQgPSBudW0udG9TdHJpbmcoKS5zcGxpdCgnLicpWzFdLnNwbGl0KCcsJykuam9pbignJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1GbG9hdC5sZW5ndGg7IGkrKykge1xuICAgICAgc2VjID0gcGFyc2VJbnQobnVtRmxvYXQuc3Vic3RyaW5nKGksIGkgKyAxKSwgMTApO1xuICAgICAgdGV4dCArPSAoaSA9PSAwID8gKHRleHQgPT0gJycgPyBBWzBdIDogJycpICsgJ3BvaW50ICcgOiAnJykgK1xuICAgICAgICAoc2VjID09IDAgJiYgaSAhPSAwICYmICFwYXJzZUludChudW1GbG9hdC5zdWJzdHJpbmcoaSArIDEpLCAxMCkgPiAwID8gJycgOiBCW3NlY10gKyAnICcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dC50cmltKCk7XG59O1xuLyoqXG4qIOaVsOWtl+i9rOaNouS4uuS4reaWh+aWh+ihqOi/sFxuKiBAYXV0aG9yIGxlbm5vblxuKiBAcGFyYW0gbnVtIG51bWJlcu+8jOaVsOWtl+eahOWAvFxuKiBAcGFyYW0gZiBib29sZWFuP++8jOaYr+WQpuS4uumHkemineWkp+WGmeS4reaWh++8jOS4jeS8oOmAkuWImeS4uuS4gOOAgeS6jOOAgeS4iS4uLlxuKiBAcmV0dXJuIFN0cmluZyDovazmjaLlkI7nmoTkuK3mlofooajov7BcbioqL1xuZXhwb3J0cy5udW0yY24gPSAobnVtLCBmKSA9PiB7XG4gIGlmICghL15cXGQqKFxcLlxcZCopPyQvLnRlc3QobnVtKSkge1xuICAgIHJldHVybiAnTnVtYmVyIGlzIHdyb25nISc7XG4gIH1cbiAgY29uc3QgQUEgPSBmID8gWSA6IFgsXG4gICAgQkIgPSBmID8gWy4uLlJdIDogWy4uLlNdO1xuICBjb25zdCBhID0gbnVtLnRvU3RyaW5nKCkucmVwbGFjZSgvKF4wKikvZywgJycpLnNwbGl0KCcuJyk7XG4gIGxldCBrID0gMCwgcmUgPSAnJywgc3MgPSBhWzBdO1xuICBmb3IgKGxldCBpID0gc3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBzd2l0Y2ggKGspIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmUgPSBCQls3XSArIHJlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaWYgKCFuZXcgUmVnRXhwKCcwezR9XFxcXGR7JyArIChzcy5sZW5ndGggLSBpIC0gMSkgKyAnfSQnKS50ZXN0KHNzKSkge1xuICAgICAgICAgIHJlID0gQkJbNF0gKyByZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgcmUgPSBCQls1XSArIHJlO1xuICAgICAgICBCQls3XSA9IEJCWzVdO1xuICAgICAgICBrID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChrICUgNCA9PSAyICYmIHNzW2kgKyAyXSAhPSAwICYmIHNzW2kgKyAxXSA9PSAwKSB7XG4gICAgICByZSA9IEFBWzBdICsgcmU7XG4gICAgfVxuICAgIGlmIChzc1tpXSAhPSAwKSB7XG4gICAgICByZSA9IEFBW3NzW2ldXSArIEJCW2sgJSA0XSArIHJlO1xuICAgIH1cbiAgICBrKys7XG4gIH1cbiAgaWYgKGEubGVuZ3RoID4gMSkge1xuICAgIHJlICs9IEJCWzZdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYVsxXS5sZW5ndGg7IGorKykge1xuICAgICAgcmUgKz0gQUFbYVsxXVtqXV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZTtcbn07XG5cbi8qKlxuKiDooajlvI/mlbDmja7nlJ/miJDmoJHnirbmlbDmja7mlrnms5XnlJ/miJDnmoTlp5TmiZjmlrnms5VcbiogQGF1dGhvciBsZW5ub25cbiogQHBhcmFtIG9wdGlvbnMuaWQgU3RyaW5n77yMaWTlrZfmrrXnmoTlrZfmrrXlkI1cbiogQHBhcmFtIG9wdGlvbnMucGFyZW50IFN0cmluZ++8jHBhcmVudOWtl+auteeahOWtl+auteWQjVxuKiBAcGFyYW0gb3B0aW9ucy5jaGlsZHJlbiBTdHJpbmfvvIxjaGlsZHJlbuWtl+auteeahOWtl+auteWQjVxuKiBAcmV0dXJuIEFycmF577yM6L+U5ZueIHRyZWVcbioqL1xuZXhwb3J0cy5saXN0MlRyZWUgPSAobGlzdCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBvcHRzID0ge1xuICAgIGlkOiAnaWQnLFxuICAgIHBhcmVudDogJ3BhcmVudF9pZCcsXG4gICAgY2hpbGRyZW46ICdjaGlsZHJlbicsXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBjb25zdCB0cmVlID0gW107XG4gIGNvbnN0IHdhbGsgPSAoZnVuY3Rpb24gdHJlZVdhbGtlcihvcCkge1xuICAgIGNvbnN0IG8gPSB7IC4uLm9wIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdhbGsodHIsIGZuKSB7XG4gICAgICBsZXQgbiA9IG51bGw7XG4gICAgICBpZiAodHIgJiYgdHIubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoY29uc3QgWywgdF0gb2YgdHIuZW50cmllcygpKSB7XG4gICAgICAgICAgaWYgKGZuKHQpKSB7XG4gICAgICAgICAgICBuID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuID0gd2Fsayh0W28uY2hpbGRyZW5dLCBmbik7XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH07XG4gIH0pKG9wdHMpO1xuICBjb25zdCB0YWJsZSA9IFsuLi5saXN0XTtcbiAgd2hpbGUgKHRhYmxlLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGlkeCA9IHRhYmxlLmxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgY29uc3Qgcm93ID0gdGFibGVbaWR4XTtcbiAgICAgIGlmIChyb3dbb3B0cy5wYXJlbnRdID09IG51bGwgfHwgcm93W29wdHMucGFyZW50XSA9PT0gJycgfHwgcm93W29wdHMucGFyZW50XSA9PSAwIHx8IHJvd1tvcHRzLnBhcmVudF0gPT0gZmFsc2UpIHtcbiAgICAgICAgdHJlZS5wdXNoKHsgLi4ucm93LCBbb3B0cy5jaGlsZHJlbl06IFtdIH0pO1xuICAgICAgICB0YWJsZS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHBzID0gd2Fsayh0cmVlLCAobm9kZSkgPT4ge1xuICAgICAgICAgIHJldHVybiByb3dbb3B0cy5wYXJlbnRdID09PSBub2RlW29wdHMuaWRdO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgcHNbb3B0cy5jaGlsZHJlbl0gPSBwc1tvcHRzLmNoaWxkcmVuXSB8fCBbXTtcbiAgICAgICAgICBwc1tvcHRzLmNoaWxkcmVuXS5wdXNoKHsgLi4ucm93IH0pO1xuICAgICAgICAgIHRhYmxlLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmVlO1xufTtcblxuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIG5vZGUuanNcbi8vIHRoaXMgaXMgcHJldHR5IHN0cmFpZ2h0LWZvcndhcmQgLSB3ZSB1c2UgdGhlIGNyeXB0byBBUEkuXG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub2RlUk5HKCkge1xuICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcbn07XG4iLCJcbmV4cG9ydCAqIGZyb20gJy4uL2xpYi91dGlsaXRpZXMvY29udmVyc2lvbic7XG5leHBvcnQgKiBmcm9tICcuLi9saWIvdXRpbGl0aWVzL2NyeXB0byc7XG5leHBvcnQgKiBmcm9tICcuLi9saWIvdXRpbGl0aWVzL2ZhY3RvcnknO1xuZXhwb3J0ICogZnJvbSAnLi4vbGliL3V0aWxpdGllcy9wb2x5ZmlsbCc7XG5leHBvcnQgKiBmcm9tICcuLi9saWIvdXRpbGl0aWVzL3N5c3RlbSc7XG5leHBvcnQgKiBmcm9tICcuLi9saWIvdXRpbGl0aWVzL2F1dGhvcml6YXRpb24nO1xuXG4iLCJcbmNvbnN0IHV1aWR2MSA9IHJlcXVpcmUoJ3V1aWQvdjEnKTtcbmNvbnN0IHV1aWR2NCA9IHJlcXVpcmUoJ3V1aWQvdjQnKTtcbmNvbnN0IHV1aWR2NSA9IHJlcXVpcmUoJ3V1aWQvdjUnKTtcbmNvbnN0IHsgT2JqZWN0SUQgfSA9IHJlcXVpcmUoJ2Jzb24nKTtcbmNvbnN0IHsgZW5jb2RlQnlNYXAgfSA9IHJlcXVpcmUoJy4vY3J5cHRvJyk7XG5cbi8qKlxuKiDluo/liJfnoIHjgIHmtYHmsLTlj7fnlJ/miJDmlrnms5VcbiogQGF1dGhvciBsZW5ub25cbiogQHBhcmFtIHByZSBTdHJpbmcg55So5LqO5Yy65YiG57G75Yir55qE5YmN57yAXG4qIEByZXR1cm4gU3RyaW5nIOeUn+aIkOeahOW6j+WIl+eggVxuKiovXG5leHBvcnRzLmdlblNlcmlhbCA9IChwcmUpID0+IHtcbiAgcHJlID0gcHJlIHx8ICcnO1xuICBsZXQgZCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkudG9TdHJpbmcoKSxcbiAgICBpID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApLFxuICAgIGwgPSBkLmxlbmd0aDtcbiAgaWYgKGwgPCAxNSkge1xuICAgIGxldCB4ID0gMTUgLSBsO1xuICAgIHdoaWxlICh4LS0gPiAwKSBkICs9ICcwJztcbiAgfVxuICByZXR1cm4gcHJlICtcbiAgICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc2xpY2UoMiwgOCkgK1xuICAgIGQuc2xpY2UoMCwgaSkgK1xuICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSg1LCAxMCkgK1xuICAgIGQuc2xpY2UoaSkgK1xuICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSg5LCAxNCkgKyBpO1xufTtcblxuZXhwb3J0cy5nZW5VVUlEID0gKHR5cGUsIHBhcmFtKSA9PiB7XG4gIHR5cGUgPSB0eXBlIHx8ICd0aW1lc3RhbXAnO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd0aW1lc3RhbXAnOlxuICAgICAgcmV0dXJuIHV1aWR2MSgpO1xuICAgIGNhc2UgJ25hbWVzcGFjZSc6XG4gICAgICBwYXJhbSA9IHBhcmFtIHx8ICdodHRwOi8vcGh1c2lzLmltcXguY29tJztcbiAgICAgIHJldHVybiB1dWlkdjUocGFyYW0sIHV1aWR2NS5VUkwpO1xuICAgIGNhc2UgJ3JhbmRvbSc6XG4gICAgICByZXR1cm4gdXVpZHY0KCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1dWlkdjEoKTtcbiAgfVxufVxuXG4vKiogXG4qIOeUn+aIkOWUr+S4gElE77yMYnNvbuS4rU9iamVjdElE55qE566A5YyW54mI77yMMTnkvY0gXG4qIEBhdXRob3IgbGVubm9uIFxuKiBAcmV0dXJuIFN0cmluZyBJROeggSBcbioqL1xuZXhwb3J0cy5nZW5JZCA9ICgpID0+IGVuY29kZUJ5TWFwKG5ldyBPYmplY3RJRCgpLnRvU3RyaW5nKCksIHtcbiAgY2lwaGVyOiBudWxsLFxuICBtaXhlZDogcyA9PiBzLnN1YnN0cigxKVxufSk7XG5cbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icm9vZmEvbm9kZS11dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuXG4gIC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtcbiAgICAgICAgc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgICAgICAgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1cbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICB2YXIgZHQgPSAobXNlY3MgLSBfbGFzdE1TZWNzKSArIChuc2VjcyAtIF9sYXN0TlNlY3MpLzEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXVpZC52MSgpOiBDYW5cXCd0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlYycpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICB2YXIgdG1oID0gKG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHYxO1xuIiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsInZhciB2MzUgPSByZXF1aXJlKCcuL2xpYi92MzUuanMnKTtcbnZhciBzaGExID0gcmVxdWlyZSgnLi9saWIvc2hhMScpO1xubW9kdWxlLmV4cG9ydHMgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG4iLCJ2YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHV1aWRUb0J5dGVzKHV1aWQpIHtcbiAgLy8gTm90ZTogV2UgYXNzdW1lIHdlJ3JlIGJlaW5nIHBhc3NlZCBhIHZhbGlkIHV1aWQgc3RyaW5nXG4gIHZhciBieXRlcyA9IFtdO1xuICB1dWlkLnJlcGxhY2UoL1thLWZBLUYwLTldezJ9L2csIGZ1bmN0aW9uKGhleCkge1xuICAgIGJ5dGVzLnB1c2gocGFyc2VJbnQoaGV4LCAxNikpO1xuICB9KTtcblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcbiAgdmFyIGJ5dGVzID0gbmV3IEFycmF5KHN0ci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIHZhciBnZW5lcmF0ZVVVSUQgPSBmdW5jdGlvbih2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHZhciBvZmYgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PSAnc3RyaW5nJykgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICBpZiAodHlwZW9mKG5hbWVzcGFjZSkgPT0gJ3N0cmluZycpIG5hbWVzcGFjZSA9IHV1aWRUb0J5dGVzKG5hbWVzcGFjZSk7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB0aHJvdyBUeXBlRXJyb3IoJ3ZhbHVlIG11c3QgYmUgYW4gYXJyYXkgb2YgYnl0ZXMnKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobmFtZXNwYWNlKSB8fCBuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikgdGhyb3cgVHlwZUVycm9yKCduYW1lc3BhY2UgbXVzdCBiZSB1dWlkIHN0cmluZyBvciBhbiBBcnJheSBvZiAxNiBieXRlIHZhbHVlcycpO1xuXG4gICAgLy8gUGVyIDQuM1xuICAgIHZhciBieXRlcyA9IGhhc2hmdW5jKG5hbWVzcGFjZS5jb25jYXQodmFsdWUpKTtcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IDE2OyArK2lkeCkge1xuICAgICAgICBidWZbb2ZmK2lkeF0gPSBieXRlc1tpZHhdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQoYnl0ZXMpO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uI25hbWUgaXMgbm90IHNldHRhYmxlIG9uIHNvbWUgcGxhdGZvcm1zICgjMjcwKVxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gIH1cblxuICAvLyBQcmUtZGVmaW5lZCBuYW1lc3BhY2VzLCBwZXIgQXBwZW5kaXggQ1xuICBnZW5lcmF0ZVVVSUQuRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcblxuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIGlmICh0eXBlb2YgQnVmZmVyLmZyb20gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBNb2Rlcm4gQnVmZmVyIEFQSVxuICAgIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBQcmUtdjQgQnVmZmVyIEFQSVxuICAgIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgICAgYnl0ZXMgPSBuZXcgQnVmZmVyKGJ5dGVzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ5dGVzID0gbmV3IEJ1ZmZlcihieXRlcywgJ3V0ZjgnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYTE7XG4iLCJpbXBvcnQgbG9uZyBmcm9tICdsb25nJztcbmltcG9ydCBidWZmZXIgZnJvbSAnYnVmZmVyJztcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBtYXAgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cbiAgaWYgKHR5cGVvZiBjb21tb25qc0dsb2JhbC5NYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBjb21tb25qc0dsb2JhbC5NYXA7XG4gICAgbW9kdWxlLmV4cG9ydHMuTWFwID0gY29tbW9uanNHbG9iYWwuTWFwO1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIHdpbGwgcmV0dXJuIGEgcG9seWZpbGxcbiAgICB2YXIgTWFwID0gZnVuY3Rpb24gTWFwKGFycmF5KSB7XG4gICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICB0aGlzLl92YWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyYXlbaV0gPT0gbnVsbCkgY29udGludWU7IC8vIHNraXAgbnVsbCBhbmQgdW5kZWZpbmVkXG5cbiAgICAgICAgdmFyIGVudHJ5ID0gYXJyYXlbaV07XG4gICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07IC8vIEFkZCB0aGUga2V5IHRvIHRoZSBsaXN0IG9mIGtleXMgaW4gb3JkZXJcblxuICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTsgLy8gQWRkIHRoZSBrZXkgYW5kIHZhbHVlIHRvIHRoZSB2YWx1ZXMgZGljdGlvbmFyeSB3aXRoIGEgcG9pbnRcbiAgICAgICAgLy8gdG8gdGhlIGxvY2F0aW9uIGluIHRoZSBvcmRlcmVkIGtleXMgbGlzdFxuXG5cbiAgICAgICAgdGhpcy5fdmFsdWVzW2tleV0gPSB7XG4gICAgICAgICAgdjogdmFsdWUsXG4gICAgICAgICAgaTogdGhpcy5fa2V5cy5sZW5ndGggLSAxXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICB0aGlzLl92YWx1ZXMgPSB7fTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl92YWx1ZXNba2V5XTtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7IC8vIERlbGV0ZSBlbnRyeVxuXG4gICAgICBkZWxldGUgdGhpcy5fdmFsdWVzW2tleV07IC8vIFJlbW92ZSB0aGUga2V5IGZyb20gdGhlIG9yZGVyZWQga2V5cyBsaXN0XG5cbiAgICAgIHRoaXMuX2tleXMuc3BsaWNlKHZhbHVlLmksIDEpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHNlbGYuX2tleXNbaW5kZXgrK107XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IFtrZXksIHNlbGYuX3ZhbHVlc1trZXldLnZdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZToga2V5ICE9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNlbGYpIHtcbiAgICAgIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c1tpXTsgLy8gQ2FsbCB0aGUgZm9yRWFjaCBjYWxsYmFja1xuXG4gICAgICAgIGNhbGxiYWNrLmNhbGwoc2VsZiwgdGhpcy5fdmFsdWVzW2tleV0udiwga2V5LCBzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW2tleV0gPyB0aGlzLl92YWx1ZXNba2V5XS52IDogdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNba2V5XSAhPSBudWxsO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gc2VsZi5fa2V5c1tpbmRleCsrXTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGtleSAhPT0gdW5kZWZpbmVkID8ga2V5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9uZToga2V5ICE9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5fdmFsdWVzW2tleV0pIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzW2tleV0udiA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gQWRkIHRoZSBrZXkgdG8gdGhlIGxpc3Qgb2Yga2V5cyBpbiBvcmRlclxuXG5cbiAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpOyAvLyBBZGQgdGhlIGtleSBhbmQgdmFsdWUgdG8gdGhlIHZhbHVlcyBkaWN0aW9uYXJ5IHdpdGggYSBwb2ludFxuICAgICAgLy8gdG8gdGhlIGxvY2F0aW9uIGluIHRoZSBvcmRlcmVkIGtleXMgbGlzdFxuXG5cbiAgICAgIHRoaXMuX3ZhbHVlc1trZXldID0ge1xuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgaTogdGhpcy5fa2V5cy5sZW5ndGggLSAxXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHNlbGYuX2tleXNbaW5kZXgrK107XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IHNlbGYuX3ZhbHVlc1trZXldLnYgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkb25lOiBrZXkgIT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTsgLy8gTGFzdCBpc21hc3RlclxuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiAgfVxufSk7XG52YXIgbWFwXzEgPSBtYXAuTWFwO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuXG5cbmxvbmcucHJvdG90eXBlLnRvRXh0ZW5kZWRKU09OID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWxheGVkKSByZXR1cm4gdGhpcy50b051bWJlcigpO1xuICByZXR1cm4ge1xuICAgICRudW1iZXJMb25nOiB0aGlzLnRvU3RyaW5nKClcbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuXG5cbmxvbmcuZnJvbUV4dGVuZGVkSlNPTiA9IGZ1bmN0aW9uIChkb2MsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IGxvbmcuZnJvbVN0cmluZyhkb2MuJG51bWJlckxvbmcpO1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnJlbGF4ZWQgPyByZXN1bHQudG9OdW1iZXIoKSA6IHJlc3VsdDtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShsb25nLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdMb25nJ1xufSk7XG52YXIgbG9uZ18xID0gbG9uZztcblxuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIERvdWJsZSB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIERvdWJsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEb3VibGUgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIG51bWJlciB3ZSB3YW50IHRvIHJlcHJlc2VudCBhcyBhIGRvdWJsZS5cbiAgICogQHJldHVybiB7RG91YmxlfVxuICAgKi9cbiAgZnVuY3Rpb24gRG91YmxlKHZhbHVlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvdWJsZSk7XG5cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgbnVtYmVyIHZhbHVlLlxuICAgKlxuICAgKiBAbWV0aG9kXG4gICAqIEByZXR1cm4ge251bWJlcn0gcmV0dXJucyB0aGUgd3JhcHBlZCBkb3VibGUgbnVtYmVyLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhEb3VibGUsIFt7XG4gICAga2V5OiBcInZhbHVlT2ZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvRXh0ZW5kZWRKU09OKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCAmJiBpc0Zpbml0ZSh0aGlzLnZhbHVlKSkgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkbnVtYmVyRG91YmxlOiB0aGlzLnZhbHVlLnRvU3RyaW5nKClcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKGRvYywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5yZWxheGVkID8gcGFyc2VGbG9hdChkb2MuJG51bWJlckRvdWJsZSkgOiBuZXcgRG91YmxlKHBhcnNlRmxvYXQoZG9jLiRudW1iZXJEb3VibGUpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRG91YmxlO1xufSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRG91YmxlLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdEb3VibGUnXG59KTtcbnZhciBkb3VibGVfMSA9IERvdWJsZTtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDEoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQxKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDEoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQxKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkMShDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgIHRoZSBsb3cgKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgVGltZXN0YW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggdGhlIGhpZ2ggKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgVGltZXN0YW1wLlxuICogQHJldHVybiB7VGltZXN0YW1wfVxuICovXG5cblxudmFyIFRpbWVzdGFtcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0xvbmcpIHtcbiAgX2luaGVyaXRzKFRpbWVzdGFtcCwgX0xvbmcpO1xuXG4gIGZ1bmN0aW9uIFRpbWVzdGFtcChsb3csIGhpZ2gpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2skMSh0aGlzLCBUaW1lc3RhbXApO1xuXG4gICAgaWYgKGxvbmdfMS5pc0xvbmcobG93KSkge1xuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGltZXN0YW1wKS5jYWxsKHRoaXMsIGxvdy5sb3csIGxvdy5oaWdoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVzdGFtcCkuY2FsbCh0aGlzLCBsb3csIGhpZ2gpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEpTT04gdmFsdWUuXG4gICAqXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MkMShUaW1lc3RhbXAsIFt7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkdGltZXN0YW1wOiB0aGlzLnRvU3RyaW5nKClcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuICgzMi1iaXQpIGludGVnZXIgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSAzMi1iaXQgaW50ZWdlciBpbiBxdWVzdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSB0aW1lc3RhbXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICR0aW1lc3RhbXA6IHtcbiAgICAgICAgICB0OiB0aGlzLmhpZ2gsXG4gICAgICAgICAgaTogdGhpcy5sb3dcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH1dLCBbe1xuICAgIGtleTogXCJmcm9tSW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21JbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKGxvbmdfMS5mcm9tSW50KHZhbHVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBudW1iZXIgdmFsdWUsIHByb3ZpZGVkIHRoYXQgaXQgaXMgYSBmaW5pdGUgbnVtYmVyLiBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSBudW1iZXIgaW4gcXVlc3Rpb24uXG4gICAgICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgdGltZXN0YW1wLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbU51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChsb25nXzEuZnJvbU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgVGltZXN0YW1wIGZvciB0aGUgZ2l2ZW4gaGlnaCBhbmQgbG93IGJpdHMuIEVhY2ggaXMgYXNzdW1lZCB0byB1c2UgMzIgYml0cy5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93Qml0cyB0aGUgbG93IDMyLWJpdHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIHRoZSBoaWdoIDMyLWJpdHMuXG4gICAgICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgdGltZXN0YW1wLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbUJpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUJpdHMobG93Qml0cywgaGlnaEJpdHMpIHtcbiAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKGxvd0JpdHMsIGhpZ2hCaXRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFRpbWVzdGFtcCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcsIG9wdGlvbmFsbHkgdXNpbmcgdGhlIGdpdmVuIHJhZGl4LlxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIFRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdF9yYWRpeF0gdGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4uXG4gICAgICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgdGltZXN0YW1wLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0ciwgb3B0X3JhZGl4KSB7XG4gICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChsb25nXzEuZnJvbVN0cmluZyhzdHIsIG9wdF9yYWRpeCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jKSB7XG4gICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChkb2MuJHRpbWVzdGFtcC5pLCBkb2MuJHRpbWVzdGFtcC50KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGltZXN0YW1wO1xufShsb25nXzEpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVGltZXN0YW1wLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdUaW1lc3RhbXAnXG59KTtcbnZhciB0aW1lc3RhbXAgPSBUaW1lc3RhbXA7XG5cbnZhciByZXF1aXJlJCQwID0ge307XG5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cblxuLyoqXG4gKiBOb3JtYWxpemVzIG91ciBleHBlY3RlZCBzdHJpbmdpZmllZCBmb3JtIG9mIGEgZnVuY3Rpb24gYWNyb3NzIHZlcnNpb25zIG9mIG5vZGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBzdHJpbmdpZnlcbiAqL1xuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyhmbikge1xuICByZXR1cm4gZm4udG9TdHJpbmcoKS5yZXBsYWNlKCdmdW5jdGlvbignLCAnZnVuY3Rpb24gKCcpO1xufVxuXG5mdW5jdGlvbiBpbnNlY3VyZVJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciByYW5kb21CeXRlcyA9IGluc2VjdXJlUmFuZG9tQnl0ZXM7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIHJhbmRvbUJ5dGVzID0gZnVuY3Rpb24gcmFuZG9tQnl0ZXMoc2l6ZSkge1xuICAgIHJldHVybiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG4gIH07XG59IGVsc2Uge1xuICB0cnkge1xuICAgIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSQkMC5yYW5kb21CeXRlcztcbiAgfSBjYXRjaCAoZSkge30gLy8ga2VlcCB0aGUgZmFsbGJhY2tcbiAgLy8gTk9URTogaW4gdHJhbnNwaWxlZCBjYXNlcyB0aGUgYWJvdmUgcmVxdWlyZSBtaWdodCByZXR1cm4gbnVsbC91bmRlZmluZWRcblxuXG4gIGlmIChyYW5kb21CeXRlcyA9PSBudWxsKSB7XG4gICAgcmFuZG9tQnl0ZXMgPSBpbnNlY3VyZVJhbmRvbUJ5dGVzO1xuICB9XG59XG5cbnZhciB1dGlscyA9IHtcbiAgbm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nOiBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmcsXG4gIHJhbmRvbUJ5dGVzOiByYW5kb21CeXRlc1xufTtcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG4vLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanNcbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuXG52YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcblxuaWYgKHR5cGVvZiBnbG9iYWwuc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbn1cblxuaWYgKHR5cGVvZiBnbG9iYWwuY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbn1cblxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICB9IC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cblxuICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgfSAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cblxuICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgfVxuICB9XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBkcmFpbmluZyA9IGZhbHNlO1xuXG4gIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZUluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgZHJhaW5RdWV1ZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gIGlmIChkcmFpbmluZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICBkcmFpbmluZyA9IHRydWU7XG4gIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbikge1xuICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG5cbiAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICB9XG5cbiAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmdW4pIHtcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gIH1cblxuICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuXG4gIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgfVxufSAvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5cbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICB0aGlzLmZ1biA9IGZ1bjtcbiAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuXG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcblxudmFyIHRpdGxlID0gJ2Jyb3dzZXInO1xudmFyIHBsYXRmb3JtID0gJ2Jyb3dzZXInO1xudmFyIGJyb3dzZXIgPSB0cnVlO1xudmFyIGVudiA9IHt9O1xudmFyIGFyZ3YgPSBbXTtcbnZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5cbnZhciB2ZXJzaW9ucyA9IHt9O1xudmFyIHJlbGVhc2UgPSB7fTtcbnZhciBjb25maWcgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBvbiA9IG5vb3A7XG52YXIgYWRkTGlzdGVuZXIgPSBub29wO1xudmFyIG9uY2UgPSBub29wO1xudmFyIG9mZiA9IG5vb3A7XG52YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wO1xudmFyIHJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG52YXIgZW1pdCA9IG5vb3A7XG5mdW5jdGlvbiBiaW5kaW5nKG5hbWUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuZnVuY3Rpb24gY3dkKCkge1xuICByZXR1cm4gJy8nO1xufVxuZnVuY3Rpb24gY2hkaXIoZGlyKSB7XG4gIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59XG5mdW5jdGlvbiB1bWFzaygpIHtcbiAgcmV0dXJuIDA7XG59IC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2t1bWF2aXMvYnJvd3Nlci1wcm9jZXNzLWhydGltZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuXG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge307XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdyB8fCBwZXJmb3JtYW5jZS5tb3pOb3cgfHwgcGVyZm9ybWFuY2UubXNOb3cgfHwgcGVyZm9ybWFuY2Uub05vdyB8fCBwZXJmb3JtYW5jZS53ZWJraXROb3cgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59OyAvLyBnZW5lcmF0ZSB0aW1lc3RhbXAgb3IgZGVsdGFcbi8vIHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfcHJvY2Vzc19ocnRpbWVcblxuXG5mdW5jdGlvbiBocnRpbWUocHJldmlvdXNUaW1lc3RhbXApIHtcbiAgdmFyIGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlTm93LmNhbGwocGVyZm9ybWFuY2UpICogMWUtMztcbiAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSk7XG4gIHZhciBuYW5vc2Vjb25kcyA9IE1hdGguZmxvb3IoY2xvY2t0aW1lICUgMSAqIDFlOSk7XG5cbiAgaWYgKHByZXZpb3VzVGltZXN0YW1wKSB7XG4gICAgc2Vjb25kcyA9IHNlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFswXTtcbiAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV07XG5cbiAgICBpZiAobmFub3NlY29uZHMgPCAwKSB7XG4gICAgICBzZWNvbmRzLS07XG4gICAgICBuYW5vc2Vjb25kcyArPSAxZTk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtzZWNvbmRzLCBuYW5vc2Vjb25kc107XG59XG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbmZ1bmN0aW9uIHVwdGltZSgpIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcbiAgdmFyIGRpZiA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuICByZXR1cm4gZGlmIC8gMTAwMDtcbn1cbnZhciBwcm9jZXNzID0ge1xuICBuZXh0VGljazogbmV4dFRpY2ssXG4gIHRpdGxlOiB0aXRsZSxcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgZW52OiBlbnYsXG4gIGFyZ3Y6IGFyZ3YsXG4gIHZlcnNpb246IHZlcnNpb24sXG4gIHZlcnNpb25zOiB2ZXJzaW9ucyxcbiAgb246IG9uLFxuICBhZGRMaXN0ZW5lcjogYWRkTGlzdGVuZXIsXG4gIG9uY2U6IG9uY2UsXG4gIG9mZjogb2ZmLFxuICByZW1vdmVMaXN0ZW5lcjogcmVtb3ZlTGlzdGVuZXIsXG4gIHJlbW92ZUFsbExpc3RlbmVyczogcmVtb3ZlQWxsTGlzdGVuZXJzLFxuICBlbWl0OiBlbWl0LFxuICBiaW5kaW5nOiBiaW5kaW5nLFxuICBjd2Q6IGN3ZCxcbiAgY2hkaXI6IGNoZGlyLFxuICB1bWFzazogdW1hc2ssXG4gIGhydGltZTogaHJ0aW1lLFxuICBwbGF0Zm9ybTogcGxhdGZvcm0sXG4gIHJlbGVhc2U6IHJlbGVhc2UsXG4gIGNvbmZpZzogY29uZmlnLFxuICB1cHRpbWU6IHVwdGltZVxufTtcblxudmFyIGluaGVyaXRzO1xuXG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG5cbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiBUZW1wQ3RvcigpIHt9O1xuXG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfTtcbn1cblxudmFyIGluaGVyaXRzJDEgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gX3R5cGVvZiQxKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQxID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMSA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDEob2JqKTsgfVxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5mdW5jdGlvbiBmb3JtYXQoZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcblxuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG5cbiAgICAgIGNhc2UgJyVkJzpcbiAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuXG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG5cbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cblxuZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cblxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmZ1bmN0aW9uIGRlYnVnbG9nKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSkgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG5cbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IDA7XG5cbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbXNnID0gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVidWdzW3NldF07XG59XG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG5cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cblxuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTsgLy8gbGVnYWN5Li4uXG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuXG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBfZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH0gLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXG5cbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn0gLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5cbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCc6IFsxLCAyMl0sXG4gICdpdGFsaWMnOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJzogWzQsIDI0XSxcbiAgJ2ludmVyc2UnOiBbNywgMjddLFxuICAnd2hpdGUnOiBbMzcsIDM5XSxcbiAgJ2dyZXknOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJzogWzMwLCAzOV0sXG4gICdibHVlJzogWzM0LCAzOV0sXG4gICdjeWFuJzogWzM2LCAzOV0sXG4gICdncmVlbic6IFszMiwgMzldLFxuICAnbWFnZW50YSc6IFszNSwgMzldLFxuICAncmVkJzogWzMxLCAzOV0sXG4gICd5ZWxsb3cnOiBbMzMsIDM5XVxufTsgLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5cbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gXCJcXHgxQltcIiArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArIFwiXFx4MUJbXCIgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gaGFzaDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICB2YWx1ZS5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuXG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9IC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG5cblxuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuXG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9IC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cblxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9IC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcblxuXG4gIGlmIChpc0Vycm9yKHZhbHVlKSAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9IC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cblxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLFxuICAgICAgYXJyYXkgPSBmYWxzZSxcbiAgICAgIGJyYWNlcyA9IFsneycsICd9J107IC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcblxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfSAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcblxuXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH0gLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcblxuXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfSAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcblxuXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9IC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcblxuXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG4gIHZhciBvdXRwdXQ7XG5cbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJykucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuXG4gIGlmIChpc051bWJlcih2YWx1ZSkpIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKSByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTsgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuXG4gIGlmIChpc051bGwodmFsdWUpKSByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7XG4gICAgdmFsdWU6IHZhbHVlW2tleV1cbiAgfTtcblxuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cblxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcblxuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXIpIHtcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIDtcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICsgJyAnICsgb3V0cHV0LmpvaW4oJyxcXG4gICcpICsgJyAnICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn0gLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gX3R5cGVvZiQxKGFyZykgPT09ICdzeW1ib2wnO1xufVxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gX3R5cGVvZiQxKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IF90eXBlb2YkMShhcmcpID09PSAnc3ltYm9sJyB8fCAvLyBFUzYgc3ltYm9sXG4gIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gaXNCdWZmZXIobWF5YmVCdWYpIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihtYXliZUJ1Zik7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107IC8vIDI2IEZlYiAxNjoxOTozNFxuXG5mdW5jdGlvbiB0aW1lc3RhbXAkMSgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSwgcGFkKGQuZ2V0TWludXRlcygpKSwgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufSAvLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCQxKCksIGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cbmZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cblxuICByZXR1cm4gb3JpZ2luO1xufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIgdXRpbCA9IHtcbiAgaW5oZXJpdHM6IGluaGVyaXRzJDEsXG4gIF9leHRlbmQ6IF9leHRlbmQsXG4gIGxvZzogbG9nLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNFcnJvcjogaXNFcnJvcixcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzU3ltYm9sOiBpc1N5bWJvbCxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBpc051bGxPclVuZGVmaW5lZCxcbiAgaXNOdWxsOiBpc051bGwsXG4gIGlzQm9vbGVhbjogaXNCb29sZWFuLFxuICBpc0FycmF5OiBpc0FycmF5LFxuICBpbnNwZWN0OiBpbnNwZWN0LFxuICBkZXByZWNhdGU6IGRlcHJlY2F0ZSxcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIGRlYnVnbG9nOiBkZWJ1Z2xvZ1xufTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDIoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQyKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDIoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQyKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkMihDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEJ1ZmZlciQxID0gYnVmZmVyLkJ1ZmZlcjtcbnZhciByYW5kb21CeXRlcyQxID0gdXRpbHMucmFuZG9tQnl0ZXM7XG52YXIgZGVwcmVjYXRlJDEgPSB1dGlsLmRlcHJlY2F0ZTsgLy8gY29uc3RhbnRzXG5cbnZhciBQUk9DRVNTX1VOSVFVRSA9IHJhbmRvbUJ5dGVzJDEoNSk7IC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGNoZWNrcyBmb3IgaGV4IHZhbHVlXG5cbnZhciBjaGVja0ZvckhleFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ15bMC05YS1mQS1GXXsyNH0kJyk7XG52YXIgaGFzQnVmZmVyVHlwZSA9IGZhbHNlOyAvLyBDaGVjayBpZiBidWZmZXIgZXhpc3RzXG5cbnRyeSB7XG4gIGlmIChCdWZmZXIkMSAmJiBCdWZmZXIkMS5mcm9tKSBoYXNCdWZmZXJUeXBlID0gdHJ1ZTtcbn0gY2F0Y2ggKGVycikge1xuICBoYXNCdWZmZXJUeXBlID0gZmFsc2U7XG59IC8vIFByZWNvbXB1dGVkIGhleCB0YWJsZSBlbmFibGVzIHNwZWVkeSBoZXggc3RyaW5nIGNvbnZlcnNpb25cblxuXG52YXIgaGV4VGFibGUgPSBbXTtcblxuZm9yICh2YXIgX2kgPSAwOyBfaSA8IDI1NjsgX2krKykge1xuICBoZXhUYWJsZVtfaV0gPSAoX2kgPD0gMTUgPyAnMCcgOiAnJykgKyBfaS50b1N0cmluZygxNik7XG59IC8vIExvb2t1cCB0YWJsZXNcblxuXG52YXIgZGVjb2RlTG9va3VwID0gW107XG52YXIgaSA9IDA7XG5cbndoaWxlIChpIDwgMTApIHtcbiAgZGVjb2RlTG9va3VwWzB4MzAgKyBpXSA9IGkrKztcbn1cblxud2hpbGUgKGkgPCAxNikge1xuICBkZWNvZGVMb29rdXBbMHg0MSAtIDEwICsgaV0gPSBkZWNvZGVMb29rdXBbMHg2MSAtIDEwICsgaV0gPSBpKys7XG59XG5cbnZhciBfQnVmZmVyID0gQnVmZmVyJDE7XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb0hleChieXRlcykge1xuICByZXR1cm4gYnl0ZXMudG9TdHJpbmcoJ2hleCcpO1xufVxuXG5mdW5jdGlvbiBtYWtlT2JqZWN0SWRFcnJvcihpbnZhbGlkU3RyaW5nLCBpbmRleCkge1xuICB2YXIgaW52YWxpZENoYXJhY3RlciA9IGludmFsaWRTdHJpbmdbaW5kZXhdO1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIk9iamVjdElkIHN0cmluZyBcXFwiXCIuY29uY2F0KGludmFsaWRTdHJpbmcsIFwiXFxcIiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlciBcXFwiXCIpLmNvbmNhdChpbnZhbGlkQ2hhcmFjdGVyLCBcIlxcXCIgd2l0aCBjaGFyYWN0ZXIgY29kZSAoXCIpLmNvbmNhdChpbnZhbGlkU3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpLCBcIikuIEFsbCBjaGFyYWN0ZXIgY29kZXMgZm9yIGEgbm9uLWhleCBzdHJpbmcgbXVzdCBiZSBsZXNzIHRoYW4gMjU2LlwiKSk7XG59XG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gT2JqZWN0SWQgdHlwZS5cbiAqL1xuXG5cbnZhciBPYmplY3RJZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gT2JqZWN0SWQgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8QnVmZmVyfG51bWJlcil9IGlkIENhbiBiZSBhIDI0IGJ5dGUgaGV4IHN0cmluZywgMTIgYnl0ZSBiaW5hcnkgQnVmZmVyLCBvciBhIE51bWJlci5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGdlbmVyYXRpb25UaW1lIFRoZSBnZW5lcmF0aW9uIHRpbWUgb2YgdGhpcyBPYmplY3RJZCBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtPYmplY3RJZH0gaW5zdGFuY2Ugb2YgT2JqZWN0SWQuXG4gICAqL1xuICBmdW5jdGlvbiBPYmplY3RJZChpZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayQyKHRoaXMsIE9iamVjdElkKTtcblxuICAgIC8vIER1Y2stdHlwaW5nIHRvIHN1cHBvcnQgT2JqZWN0SWQgZnJvbSBkaWZmZXJlbnQgbnBtIHBhY2thZ2VzXG4gICAgaWYgKGlkIGluc3RhbmNlb2YgT2JqZWN0SWQpIHJldHVybiBpZDsgLy8gVGhlIG1vc3QgY29tbW9uIHVzZWNhc2UgKGJsYW5rIGlkLCBuZXcgb2JqZWN0SWQgaW5zdGFuY2UpXG5cbiAgICBpZiAoaWQgPT0gbnVsbCB8fCB0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBpZFxuICAgICAgdGhpcy5pZCA9IE9iamVjdElkLmdlbmVyYXRlKGlkKTsgLy8gSWYgd2UgYXJlIGNhY2hpbmcgdGhlIGhleCBzdHJpbmdcblxuICAgICAgaWYgKE9iamVjdElkLmNhY2hlSGV4U3RyaW5nKSB0aGlzLl9faWQgPSB0aGlzLnRvU3RyaW5nKCdoZXgnKTsgLy8gUmV0dXJuIHRoZSBvYmplY3RcblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIHBhc3NlZCBpbiBpZCBpcyB2YWxpZFxuXG5cbiAgICB2YXIgdmFsaWQgPSBPYmplY3RJZC5pc1ZhbGlkKGlkKTsgLy8gVGhyb3cgYW4gZXJyb3IgaWYgaXQncyBub3QgYSB2YWxpZCBzZXR1cFxuXG4gICAgaWYgKCF2YWxpZCAmJiBpZCAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBwYXNzZWQgaW4gbXVzdCBiZSBhIHNpbmdsZSBTdHJpbmcgb2YgMTIgYnl0ZXMgb3IgYSBzdHJpbmcgb2YgMjQgaGV4IGNoYXJhY3RlcnMnKTtcbiAgICB9IGVsc2UgaWYgKHZhbGlkICYmIHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgJiYgaWQubGVuZ3RoID09PSAyNCAmJiBoYXNCdWZmZXJUeXBlKSB7XG4gICAgICByZXR1cm4gbmV3IE9iamVjdElkKEJ1ZmZlciQxLmZyb20oaWQsICdoZXgnKSk7XG4gICAgfSBlbHNlIGlmICh2YWxpZCAmJiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnICYmIGlkLmxlbmd0aCA9PT0gMjQpIHtcbiAgICAgIHJldHVybiBPYmplY3RJZC5jcmVhdGVGcm9tSGV4U3RyaW5nKGlkKTtcbiAgICB9IGVsc2UgaWYgKGlkICE9IG51bGwgJiYgaWQubGVuZ3RoID09PSAxMikge1xuICAgICAgLy8gYXNzdW1lIDEyIGJ5dGUgc3RyaW5nXG4gICAgICB0aGlzLmlkID0gaWQ7XG4gICAgfSBlbHNlIGlmIChpZCAhPSBudWxsICYmIGlkLnRvSGV4U3RyaW5nKSB7XG4gICAgICAvLyBEdWNrLXR5cGluZyB0byBzdXBwb3J0IE9iamVjdElkIGZyb20gZGlmZmVyZW50IG5wbSBwYWNrYWdlc1xuICAgICAgcmV0dXJuIE9iamVjdElkLmNyZWF0ZUZyb21IZXhTdHJpbmcoaWQudG9IZXhTdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IHBhc3NlZCBpbiBtdXN0IGJlIGEgc2luZ2xlIFN0cmluZyBvZiAxMiBieXRlcyBvciBhIHN0cmluZyBvZiAyNCBoZXggY2hhcmFjdGVycycpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3RJZC5jYWNoZUhleFN0cmluZykgdGhpcy5fX2lkID0gdGhpcy50b1N0cmluZygnaGV4Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgT2JqZWN0SWQgaWQgYXMgYSAyNCBieXRlIGhleCBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHJldHVybiB0aGUgMjQgYnl0ZSBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyQyKE9iamVjdElkLCBbe1xuICAgIGtleTogXCJ0b0hleFN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0hleFN0cmluZygpIHtcbiAgICAgIGlmIChPYmplY3RJZC5jYWNoZUhleFN0cmluZyAmJiB0aGlzLl9faWQpIHJldHVybiB0aGlzLl9faWQ7XG4gICAgICB2YXIgaGV4U3RyaW5nID0gJyc7XG5cbiAgICAgIGlmICghdGhpcy5pZCB8fCAhdGhpcy5pZC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBPYmplY3RJZCwgT2JqZWN0SWQuaWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYSBCdWZmZXIsIGJ1dCBpcyBbJyArIEpTT04uc3RyaW5naWZ5KHRoaXMuaWQpICsgJ10nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaWQgaW5zdGFuY2VvZiBfQnVmZmVyKSB7XG4gICAgICAgIGhleFN0cmluZyA9IGNvbnZlcnRUb0hleCh0aGlzLmlkKTtcbiAgICAgICAgaWYgKE9iamVjdElkLmNhY2hlSGV4U3RyaW5nKSB0aGlzLl9faWQgPSBoZXhTdHJpbmc7XG4gICAgICAgIHJldHVybiBoZXhTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRoaXMuaWQubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgaGV4Q2hhciA9IGhleFRhYmxlW3RoaXMuaWQuY2hhckNvZGVBdChfaTIpXTtcblxuICAgICAgICBpZiAodHlwZW9mIGhleENoYXIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbWFrZU9iamVjdElkRXJyb3IodGhpcy5pZCwgX2kyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhleFN0cmluZyArPSBoZXhDaGFyO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0SWQuY2FjaGVIZXhTdHJpbmcpIHRoaXMuX19pZCA9IGhleFN0cmluZztcbiAgICAgIHJldHVybiBoZXhTdHJpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgT2JqZWN0SWQgaW5kZXggdXNlZCBpbiBnZW5lcmF0aW5nIG5ldyBPYmplY3RJZCdzIG9uIHRoZSBkcml2ZXJcbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHJldHVybnMgbmV4dCBpbmRleCB2YWx1ZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGlkIGludG8gYSAyNCBieXRlIGhleCBzdHJpbmcgZm9yIHByaW50aW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IFRoZSBCdWZmZXIgdG9TdHJpbmcgZm9ybWF0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybiB0aGUgMjQgYnl0ZSBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoZm9ybWF0KSB7XG4gICAgICAvLyBJcyB0aGUgaWQgYSBidWZmZXIgdGhlbiB1c2UgdGhlIGJ1ZmZlciB0b1N0cmluZyBtZXRob2QgdG8gcmV0dXJuIHRoZSBmb3JtYXRcbiAgICAgIGlmICh0aGlzLmlkICYmIHRoaXMuaWQuY29weSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZC50b1N0cmluZyh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJyA/IGZvcm1hdCA6ICdoZXgnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdG8gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybiB0aGUgMjQgYnl0ZSBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0hleFN0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0aGUgZXF1YWxpdHkgb2YgdGhpcyBPYmplY3RJZCB3aXRoIGBvdGhlcklEYC5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3RoZXJJZCBPYmplY3RJZCBpbnN0YW5jZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdGhlIHJlc3VsdCBvZiBjb21wYXJpbmcgdHdvIE9iamVjdElkJ3NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImVxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMob3RoZXJJZCkge1xuICAgICAgaWYgKG90aGVySWQgaW5zdGFuY2VvZiBPYmplY3RJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpID09PSBvdGhlcklkLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXJJZCA9PT0gJ3N0cmluZycgJiYgT2JqZWN0SWQuaXNWYWxpZChvdGhlcklkKSAmJiBvdGhlcklkLmxlbmd0aCA9PT0gMTIgJiYgdGhpcy5pZCBpbnN0YW5jZW9mIF9CdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVySWQgPT09IHRoaXMuaWQudG9TdHJpbmcoJ2JpbmFyeScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG90aGVySWQgPT09ICdzdHJpbmcnICYmIE9iamVjdElkLmlzVmFsaWQob3RoZXJJZCkgJiYgb3RoZXJJZC5sZW5ndGggPT09IDI0KSB7XG4gICAgICAgIHJldHVybiBvdGhlcklkLnRvTG93ZXJDYXNlKCkgPT09IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvdGhlcklkID09PSAnc3RyaW5nJyAmJiBPYmplY3RJZC5pc1ZhbGlkKG90aGVySWQpICYmIG90aGVySWQubGVuZ3RoID09PSAxMikge1xuICAgICAgICByZXR1cm4gb3RoZXJJZCA9PT0gdGhpcy5pZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG90aGVySWQgIT0gbnVsbCAmJiAob3RoZXJJZCBpbnN0YW5jZW9mIE9iamVjdElkIHx8IG90aGVySWQudG9IZXhTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBvdGhlcklkLnRvSGV4U3RyaW5nKCkgPT09IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnZW5lcmF0aW9uIGRhdGUgKGFjY3VyYXRlIHVwIHRvIHRoZSBzZWNvbmQpIHRoYXQgdGhpcyBJRCB3YXMgZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEByZXR1cm4ge0RhdGV9IHRoZSBnZW5lcmF0aW9uIGRhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFRpbWVzdGFtcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaW1lc3RhbXAoKSB7XG4gICAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5pZC5yZWFkVUludDMyQkUoMCk7XG4gICAgICB0aW1lc3RhbXAuc2V0VGltZShNYXRoLmZsb29yKHRpbWUpICogMTAwMCk7XG4gICAgICByZXR1cm4gdGltZXN0YW1wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcbiAgICAgIGlmICh0aGlzLnRvSGV4U3RyaW5nKSByZXR1cm4ge1xuICAgICAgICAkb2lkOiB0aGlzLnRvSGV4U3RyaW5nKClcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkb2lkOiB0aGlzLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXRJbmNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5jKCkge1xuICAgICAgcmV0dXJuIE9iamVjdElkLmluZGV4ID0gKE9iamVjdElkLmluZGV4ICsgMSkgJSAweGZmZmZmZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSAxMiBieXRlIGlkIGJ1ZmZlciB1c2VkIGluIE9iamVjdElkJ3NcbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVdIG9wdGlvbmFsIHBhcmFtZXRlciBhbGxvd2luZyB0byBwYXNzIGluIGEgc2Vjb25kIGJhc2VkIHRpbWVzdGFtcC5cbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJ9IHJldHVybiB0aGUgMTIgYnl0ZSBpZCBidWZmZXIgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2VuZXJhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUodGltZSkge1xuICAgICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGltZSkge1xuICAgICAgICB0aW1lID0gfn4oRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5jID0gT2JqZWN0SWQuZ2V0SW5jKCk7XG4gICAgICB2YXIgYnVmZmVyJCQxID0gQnVmZmVyJDEuYWxsb2MoMTIpOyAvLyA0LWJ5dGUgdGltZXN0YW1wXG5cbiAgICAgIGJ1ZmZlciQkMVszXSA9IHRpbWUgJiAweGZmO1xuICAgICAgYnVmZmVyJCQxWzJdID0gdGltZSA+PiA4ICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVsxXSA9IHRpbWUgPj4gMTYgJiAweGZmO1xuICAgICAgYnVmZmVyJCQxWzBdID0gdGltZSA+PiAyNCAmIDB4ZmY7IC8vIDUtYnl0ZSBwcm9jZXNzIHVuaXF1ZVxuXG4gICAgICBidWZmZXIkJDFbNF0gPSBQUk9DRVNTX1VOSVFVRVswXTtcbiAgICAgIGJ1ZmZlciQkMVs1XSA9IFBST0NFU1NfVU5JUVVFWzFdO1xuICAgICAgYnVmZmVyJCQxWzZdID0gUFJPQ0VTU19VTklRVUVbMl07XG4gICAgICBidWZmZXIkJDFbN10gPSBQUk9DRVNTX1VOSVFVRVszXTtcbiAgICAgIGJ1ZmZlciQkMVs4XSA9IFBST0NFU1NfVU5JUVVFWzRdOyAvLyAzLWJ5dGUgY291bnRlclxuXG4gICAgICBidWZmZXIkJDFbMTFdID0gaW5jICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVsxMF0gPSBpbmMgPj4gOCAmIDB4ZmY7XG4gICAgICBidWZmZXIkJDFbOV0gPSBpbmMgPj4gMTYgJiAweGZmO1xuICAgICAgcmV0dXJuIGJ1ZmZlciQkMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlUGtcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUGsoKSB7XG4gICAgICByZXR1cm4gbmV3IE9iamVjdElkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JqZWN0SWQgZnJvbSBhIHNlY29uZCBiYXNlZCBudW1iZXIsIHdpdGggdGhlIHJlc3Qgb2YgdGhlIE9iamVjdElkIHplcm9lZCBvdXQuIFVzZWQgZm9yIGNvbXBhcmlzb25zIG9yIHNvcnRpbmcgdGhlIE9iamVjdElkLlxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIGFuIGludGVnZXIgbnVtYmVyIHJlcHJlc2VudGluZyBhIG51bWJlciBvZiBzZWNvbmRzLlxuICAgICAqIEByZXR1cm4ge09iamVjdElkfSByZXR1cm4gdGhlIGNyZWF0ZWQgT2JqZWN0SWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUZyb21UaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUZyb21UaW1lKHRpbWUpIHtcbiAgICAgIHZhciBidWZmZXIkJDEgPSBCdWZmZXIkMS5mcm9tKFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSk7IC8vIEVuY29kZSB0aW1lIGludG8gZmlyc3QgNCBieXRlc1xuXG4gICAgICBidWZmZXIkJDFbM10gPSB0aW1lICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVsyXSA9IHRpbWUgPj4gOCAmIDB4ZmY7XG4gICAgICBidWZmZXIkJDFbMV0gPSB0aW1lID4+IDE2ICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVswXSA9IHRpbWUgPj4gMjQgJiAweGZmOyAvLyBSZXR1cm4gdGhlIG5ldyBvYmplY3RJZFxuXG4gICAgICByZXR1cm4gbmV3IE9iamVjdElkKGJ1ZmZlciQkMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JqZWN0SWQgZnJvbSBhIGhleCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gT2JqZWN0SWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0cmluZyBjcmVhdGUgYSBPYmplY3RJZCBmcm9tIGEgcGFzc2VkIGluIDI0IGJ5dGUgaGV4c3RyaW5nLlxuICAgICAqIEByZXR1cm4ge09iamVjdElkfSByZXR1cm4gdGhlIGNyZWF0ZWQgT2JqZWN0SWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUZyb21IZXhTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRnJvbUhleFN0cmluZyhzdHJpbmcpIHtcbiAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGl0J3Mgbm90IGEgdmFsaWQgc2V0dXBcbiAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAndW5kZWZpbmVkJyB8fCBzdHJpbmcgIT0gbnVsbCAmJiBzdHJpbmcubGVuZ3RoICE9PSAyNCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBwYXNzZWQgaW4gbXVzdCBiZSBhIHNpbmdsZSBTdHJpbmcgb2YgMTIgYnl0ZXMgb3IgYSBzdHJpbmcgb2YgMjQgaGV4IGNoYXJhY3RlcnMnKTtcbiAgICAgIH0gLy8gVXNlIEJ1ZmZlci5mcm9tIG1ldGhvZCBpZiBhdmFpbGFibGVcblxuXG4gICAgICBpZiAoaGFzQnVmZmVyVHlwZSkgcmV0dXJuIG5ldyBPYmplY3RJZChCdWZmZXIkMS5mcm9tKHN0cmluZywgJ2hleCcpKTsgLy8gQ2FsY3VsYXRlIGxlbmd0aHNcblxuICAgICAgdmFyIGFycmF5ID0gbmV3IF9CdWZmZXIoMTIpO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDI0KSB7XG4gICAgICAgIGFycmF5W24rK10gPSBkZWNvZGVMb29rdXBbc3RyaW5nLmNoYXJDb2RlQXQoaSsrKV0gPDwgNCB8IGRlY29kZUxvb2t1cFtzdHJpbmcuY2hhckNvZGVBdChpKyspXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZChhcnJheSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgYnNvbiBPYmplY3RJZFxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGJzb24gT2JqZWN0SWQsIHJldHVybiBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc1ZhbGlkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWQoaWQpIHtcbiAgICAgIGlmIChpZCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaWQubGVuZ3RoID09PSAxMiB8fCBpZC5sZW5ndGggPT09IDI0ICYmIGNoZWNrRm9ySGV4UmVnRXhwLnRlc3QoaWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWQgaW5zdGFuY2VvZiBPYmplY3RJZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlkIGluc3RhbmNlb2YgX0J1ZmZlciAmJiBpZC5sZW5ndGggPT09IDEyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBEdWNrLVR5cGluZyBkZXRlY3Rpb24gb2YgT2JqZWN0SWQgbGlrZSBvYmplY3RzXG5cblxuICAgICAgaWYgKGlkLnRvSGV4U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBpZC5pZC5sZW5ndGggPT09IDEyIHx8IGlkLmlkLmxlbmd0aCA9PT0gMjQgJiYgY2hlY2tGb3JIZXhSZWdFeHAudGVzdChpZC5pZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKGRvYykge1xuICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZChkb2MuJG9pZCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9iamVjdElkO1xufSgpOyAvLyBEZXByZWNhdGVkIG1ldGhvZHNcblxuXG5PYmplY3RJZC5nZXRfaW5jID0gZGVwcmVjYXRlJDEoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0SWQuZ2V0SW5jKCk7XG59LCAnUGxlYXNlIHVzZSB0aGUgc3RhdGljIGBPYmplY3RJZC5nZXRJbmMoKWAgaW5zdGVhZCcpO1xuT2JqZWN0SWQucHJvdG90eXBlLmdldF9pbmMgPSBkZXByZWNhdGUkMShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3RJZC5nZXRJbmMoKTtcbn0sICdQbGVhc2UgdXNlIHRoZSBzdGF0aWMgYE9iamVjdElkLmdldEluYygpYCBpbnN0ZWFkJyk7XG5PYmplY3RJZC5wcm90b3R5cGUuZ2V0SW5jID0gZGVwcmVjYXRlJDEoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0SWQuZ2V0SW5jKCk7XG59LCAnUGxlYXNlIHVzZSB0aGUgc3RhdGljIGBPYmplY3RJZC5nZXRJbmMoKWAgaW5zdGVhZCcpO1xuT2JqZWN0SWQucHJvdG90eXBlLmdlbmVyYXRlID0gZGVwcmVjYXRlJDEoZnVuY3Rpb24gKHRpbWUpIHtcbiAgcmV0dXJuIE9iamVjdElkLmdlbmVyYXRlKHRpbWUpO1xufSwgJ1BsZWFzZSB1c2UgdGhlIHN0YXRpYyBgT2JqZWN0SWQuZ2VuZXJhdGUodGltZSlgIGluc3RlYWQnKTtcbi8qKlxuICogQGlnbm9yZVxuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3RJZC5wcm90b3R5cGUsICdnZW5lcmF0aW9uVGltZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWRbM10gfCB0aGlzLmlkWzJdIDw8IDggfCB0aGlzLmlkWzFdIDw8IDE2IHwgdGhpcy5pZFswXSA8PCAyNDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyBFbmNvZGUgdGltZSBpbnRvIGZpcnN0IDQgYnl0ZXNcbiAgICB0aGlzLmlkWzNdID0gdmFsdWUgJiAweGZmO1xuICAgIHRoaXMuaWRbMl0gPSB2YWx1ZSA+PiA4ICYgMHhmZjtcbiAgICB0aGlzLmlkWzFdID0gdmFsdWUgPj4gMTYgJiAweGZmO1xuICAgIHRoaXMuaWRbMF0gPSB2YWx1ZSA+PiAyNCAmIDB4ZmY7XG4gIH1cbn0pO1xuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIElkLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJuIHRoZSAyNCBieXRlIGhleCBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKiBAaWdub3JlXG4gKi9cblxuT2JqZWN0SWQucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b20gfHwgJ2luc3BlY3QnXSA9IE9iamVjdElkLnByb3RvdHlwZS50b1N0cmluZztcbi8qKlxuICogQGlnbm9yZVxuICovXG5cbk9iamVjdElkLmluZGV4ID0gfn4oTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmKTsgLy8gSW4gNC4wLjAgYW5kIDQuMC4xLCB0aGlzIHByb3BlcnR5IG5hbWUgd2FzIGNoYW5nZWQgdG8gT2JqZWN0SWQgdG8gbWF0Y2ggdGhlIGNsYXNzIG5hbWUuXG4vLyBUaGlzIGNhdXNlZCBpbnRlcm9wZXJhYmlsaXR5IHByb2JsZW1zIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnksIHNvIGluXG4vLyBsYXRlciBidWlsZHMgd2UgY2hhbmdlZCBpdCBiYWNrIHRvIE9iamVjdElEIChjYXBpdGFsIEQpIHRvIG1hdGNoIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbnMuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3RJZC5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG4gIHZhbHVlOiAnT2JqZWN0SUQnXG59KTtcbnZhciBvYmplY3RpZCA9IE9iamVjdElkO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2skMyhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MkMyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBhbHBoYWJldGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpO1xufVxuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIFJlZ0V4cCB0eXBlLlxuICovXG5cblxudmFyIEJTT05SZWdFeHAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgUmVnRXhwIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuIHRvIG1hdGNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gQlNPTlJlZ0V4cChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrJDModGhpcywgQlNPTlJlZ0V4cCk7XG5cbiAgICAvLyBFeGVjdXRlXG4gICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybiB8fCAnJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8gYWxwaGFiZXRpemUob3B0aW9ucykgOiAnJzsgLy8gVmFsaWRhdGUgb3B0aW9uc1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghKHRoaXMub3B0aW9uc1tpXSA9PT0gJ2knIHx8IHRoaXMub3B0aW9uc1tpXSA9PT0gJ20nIHx8IHRoaXMub3B0aW9uc1tpXSA9PT0gJ3gnIHx8IHRoaXMub3B0aW9uc1tpXSA9PT0gJ2wnIHx8IHRoaXMub3B0aW9uc1tpXSA9PT0gJ3MnIHx8IHRoaXMub3B0aW9uc1tpXSA9PT0gJ3UnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVndWxhciBleHByZXNzaW9uIG9wdGlvbiBbXCIuY29uY2F0KHRoaXMub3B0aW9uc1tpXSwgXCJdIGlzIG5vdCBzdXBwb3J0ZWRcIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyQzKEJTT05SZWdFeHAsIFt7XG4gICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvRXh0ZW5kZWRKU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJHJlZ3VsYXJFeHByZXNzaW9uOiB7XG4gICAgICAgICAgcGF0dGVybjogdGhpcy5wYXR0ZXJuLFxuICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9uc1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfV0sIFt7XG4gICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MpIHtcbiAgICAgIHJldHVybiBuZXcgQlNPTlJlZ0V4cChkb2MuJHJlZ3VsYXJFeHByZXNzaW9uLnBhdHRlcm4sIGRvYy4kcmVndWxhckV4cHJlc3Npb24ub3B0aW9ucy5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQlNPTlJlZ0V4cDtcbn0oKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJTT05SZWdFeHAucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuICB2YWx1ZTogJ0JTT05SZWdFeHAnXG59KTtcbnZhciByZWdleHAgPSBCU09OUmVnRXhwO1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gU3ltYm9sIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDQoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ0KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDQoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ0KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkNChDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEJTT05TeW1ib2wgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgU3ltYm9sIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBCU09OU3ltYm9sKHZhbHVlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrJDQodGhpcywgQlNPTlN5bWJvbCk7XG5cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgd3JhcHBlZCBzdHJpbmcgdmFsdWUuXG4gICAqXG4gICAqIEBtZXRob2RcbiAgICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSB3cmFwcGVkIHN0cmluZy5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MkNChCU09OU3ltYm9sLCBbe1xuICAgIGtleTogXCJ2YWx1ZU9mXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zcGVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkc3ltYm9sOiB0aGlzLnZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfV0sIFt7XG4gICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MpIHtcbiAgICAgIHJldHVybiBuZXcgQlNPTlN5bWJvbChkb2MuJHN5bWJvbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJTT05TeW1ib2w7XG59KCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCU09OU3ltYm9sLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdTeW1ib2wnXG59KTtcbnZhciBzeW1ib2wgPSBCU09OU3ltYm9sO1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgYSBCU09OIEludDMyIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDUoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ1KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDUoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ1KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkNShDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEludDMyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnQzMiB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgbnVtYmVyIHdlIHdhbnQgdG8gcmVwcmVzZW50IGFzIGFuIGludDMyLlxuICAgKiBAcmV0dXJuIHtJbnQzMn1cbiAgICovXG4gIGZ1bmN0aW9uIEludDMyKHZhbHVlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrJDUodGhpcywgSW50MzIpO1xuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIG51bWJlciB2YWx1ZS5cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHJldHVybnMgdGhlIHdyYXBwZWQgaW50MzIgbnVtYmVyLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyQ1KEludDMyLCBbe1xuICAgIGtleTogXCJ2YWx1ZU9mXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTihvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlbGF4ZWQpIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJG51bWJlckludDogdGhpcy52YWx1ZS50b1N0cmluZygpXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfV0sIFt7XG4gICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCA/IHBhcnNlSW50KGRvYy4kbnVtYmVySW50LCAxMCkgOiBuZXcgSW50MzIoZG9jLiRudW1iZXJJbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbnQzMjtcbn0oKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludDMyLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdJbnQzMidcbn0pO1xudmFyIGludF8zMiA9IEludDMyO1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gQ29kZSB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayQ2KGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMkNih0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQ2KENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkNihDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDYoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBDb2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIENvZGUgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24pfSBjb2RlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXSBhbiBvcHRpb25hbCBzY29wZSBmb3IgdGhlIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtDb2RlfVxuICAgKi9cbiAgZnVuY3Rpb24gQ29kZShjb2RlLCBzY29wZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayQ2KHRoaXMsIENvZGUpO1xuXG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MkNihDb2RlLCBbe1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NvcGU6IHRoaXMuc2NvcGUsXG4gICAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG4gICAgICBpZiAodGhpcy5zY29wZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICRjb2RlOiB0aGlzLmNvZGUsXG4gICAgICAgICAgJHNjb3BlOiB0aGlzLnNjb3BlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICRjb2RlOiB0aGlzLmNvZGVcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKGRvYykge1xuICAgICAgcmV0dXJuIG5ldyBDb2RlKGRvYy4kY29kZSwgZG9jLiRzY29wZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvZGU7XG59KCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2RlLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdDb2RlJ1xufSk7XG52YXIgY29kZSA9IENvZGU7XG5cbnZhciBCdWZmZXIkMiA9IGJ1ZmZlci5CdWZmZXI7XG52YXIgUEFSU0VfU1RSSU5HX1JFR0VYUCA9IC9eKFxcK3wtKT8oXFxkK3woXFxkKlxcLlxcZCopKT8oRXxlKT8oWy0rXSk/KFxcZCspPyQvO1xudmFyIFBBUlNFX0lORl9SRUdFWFAgPSAvXihcXCt8LSk/KEluZmluaXR5fGluZikkL2k7XG52YXIgUEFSU0VfTkFOX1JFR0VYUCA9IC9eKFxcK3wtKT9OYU4kL2k7XG52YXIgRVhQT05FTlRfTUFYID0gNjExMTtcbnZhciBFWFBPTkVOVF9NSU4gPSAtNjE3NjtcbnZhciBFWFBPTkVOVF9CSUFTID0gNjE3NjtcbnZhciBNQVhfRElHSVRTID0gMzQ7IC8vIE5hbiB2YWx1ZSBiaXRzIGFzIDMyIGJpdCB2YWx1ZXMgKGR1ZSB0byBsYWNrIG9mIGxvbmdzKVxuXG52YXIgTkFOX0JVRkZFUiA9IFsweDdjLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXS5yZXZlcnNlKCk7IC8vIEluZmluaXR5IHZhbHVlIGJpdHMgMzIgYml0IHZhbHVlcyAoZHVlIHRvIGxhY2sgb2YgbG9uZ3MpXG5cbnZhciBJTkZfTkVHQVRJVkVfQlVGRkVSID0gWzB4ZjgsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdLnJldmVyc2UoKTtcbnZhciBJTkZfUE9TSVRJVkVfQlVGRkVSID0gWzB4NzgsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdLnJldmVyc2UoKTtcbnZhciBFWFBPTkVOVF9SRUdFWCA9IC9eKFstK10pPyhcXGQrKT8kLzsgLy8gRGV0ZWN0IGlmIHRoZSB2YWx1ZSBpcyBhIGRpZ2l0XG5cbmZ1bmN0aW9uIGlzRGlnaXQodmFsdWUpIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUludCh2YWx1ZSwgMTApKTtcbn0gLy8gRGl2aWRlIHR3byB1aW50MTI4IHZhbHVlc1xuXG5cbmZ1bmN0aW9uIGRpdmlkZXUxMjgodmFsdWUpIHtcbiAgdmFyIERJVklTT1IgPSBsb25nXzEuZnJvbU51bWJlcigxMDAwICogMTAwMCAqIDEwMDApO1xuXG4gIHZhciBfcmVtID0gbG9uZ18xLmZyb21OdW1iZXIoMCk7XG5cbiAgaWYgKCF2YWx1ZS5wYXJ0c1swXSAmJiAhdmFsdWUucGFydHNbMV0gJiYgIXZhbHVlLnBhcnRzWzJdICYmICF2YWx1ZS5wYXJ0c1szXSkge1xuICAgIHJldHVybiB7XG4gICAgICBxdW90aWVudDogdmFsdWUsXG4gICAgICByZW06IF9yZW1cbiAgICB9O1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMzsgaSsrKSB7XG4gICAgLy8gQWRqdXN0IHJlbWFpbmRlciB0byBtYXRjaCB2YWx1ZSBvZiBuZXh0IGRpdmlkZW5kXG4gICAgX3JlbSA9IF9yZW0uc2hpZnRMZWZ0KDMyKTsgLy8gQWRkIHRoZSBkaXZpZGVkIHRvIF9yZW1cblxuICAgIF9yZW0gPSBfcmVtLmFkZChuZXcgbG9uZ18xKHZhbHVlLnBhcnRzW2ldLCAwKSk7XG4gICAgdmFsdWUucGFydHNbaV0gPSBfcmVtLmRpdihESVZJU09SKS5sb3c7XG4gICAgX3JlbSA9IF9yZW0ubW9kdWxvKERJVklTT1IpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBxdW90aWVudDogdmFsdWUsXG4gICAgcmVtOiBfcmVtXG4gIH07XG59IC8vIE11bHRpcGx5IHR3byBMb25nIHZhbHVlcyBhbmQgcmV0dXJuIHRoZSAxMjggYml0IHZhbHVlXG5cblxuZnVuY3Rpb24gbXVsdGlwbHk2NHgyKGxlZnQsIHJpZ2h0KSB7XG4gIGlmICghbGVmdCAmJiAhcmlnaHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGlnaDogbG9uZ18xLmZyb21OdW1iZXIoMCksXG4gICAgICBsb3c6IGxvbmdfMS5mcm9tTnVtYmVyKDApXG4gICAgfTtcbiAgfVxuXG4gIHZhciBsZWZ0SGlnaCA9IGxlZnQuc2hpZnRSaWdodFVuc2lnbmVkKDMyKTtcbiAgdmFyIGxlZnRMb3cgPSBuZXcgbG9uZ18xKGxlZnQuZ2V0TG93Qml0cygpLCAwKTtcbiAgdmFyIHJpZ2h0SGlnaCA9IHJpZ2h0LnNoaWZ0UmlnaHRVbnNpZ25lZCgzMik7XG4gIHZhciByaWdodExvdyA9IG5ldyBsb25nXzEocmlnaHQuZ2V0TG93Qml0cygpLCAwKTtcbiAgdmFyIHByb2R1Y3RIaWdoID0gbGVmdEhpZ2gubXVsdGlwbHkocmlnaHRIaWdoKTtcbiAgdmFyIHByb2R1Y3RNaWQgPSBsZWZ0SGlnaC5tdWx0aXBseShyaWdodExvdyk7XG4gIHZhciBwcm9kdWN0TWlkMiA9IGxlZnRMb3cubXVsdGlwbHkocmlnaHRIaWdoKTtcbiAgdmFyIHByb2R1Y3RMb3cgPSBsZWZ0TG93Lm11bHRpcGx5KHJpZ2h0TG93KTtcbiAgcHJvZHVjdEhpZ2ggPSBwcm9kdWN0SGlnaC5hZGQocHJvZHVjdE1pZC5zaGlmdFJpZ2h0VW5zaWduZWQoMzIpKTtcbiAgcHJvZHVjdE1pZCA9IG5ldyBsb25nXzEocHJvZHVjdE1pZC5nZXRMb3dCaXRzKCksIDApLmFkZChwcm9kdWN0TWlkMikuYWRkKHByb2R1Y3RMb3cuc2hpZnRSaWdodFVuc2lnbmVkKDMyKSk7XG4gIHByb2R1Y3RIaWdoID0gcHJvZHVjdEhpZ2guYWRkKHByb2R1Y3RNaWQuc2hpZnRSaWdodFVuc2lnbmVkKDMyKSk7XG4gIHByb2R1Y3RMb3cgPSBwcm9kdWN0TWlkLnNoaWZ0TGVmdCgzMikuYWRkKG5ldyBsb25nXzEocHJvZHVjdExvdy5nZXRMb3dCaXRzKCksIDApKTsgLy8gUmV0dXJuIHRoZSAxMjggYml0IHJlc3VsdFxuXG4gIHJldHVybiB7XG4gICAgaGlnaDogcHJvZHVjdEhpZ2gsXG4gICAgbG93OiBwcm9kdWN0TG93XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxlc3NUaGFuKGxlZnQsIHJpZ2h0KSB7XG4gIC8vIE1ha2UgdmFsdWVzIHVuc2lnbmVkXG4gIHZhciB1aGxlZnQgPSBsZWZ0LmhpZ2ggPj4+IDA7XG4gIHZhciB1aHJpZ2h0ID0gcmlnaHQuaGlnaCA+Pj4gMDsgLy8gQ29tcGFyZSBoaWdoIGJpdHMgZmlyc3RcblxuICBpZiAodWhsZWZ0IDwgdWhyaWdodCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKHVobGVmdCA9PT0gdWhyaWdodCkge1xuICAgIHZhciB1bGxlZnQgPSBsZWZ0LmxvdyA+Pj4gMDtcbiAgICB2YXIgdWxyaWdodCA9IHJpZ2h0LmxvdyA+Pj4gMDtcbiAgICBpZiAodWxsZWZ0IDwgdWxyaWdodCkgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGludmFsaWRFcnIoc3RyaW5nLCBtZXNzYWdlKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiXCIuY29uY2F0KHN0cmluZywgXCJcXFwiIGlzIG5vdCBhIHZhbGlkIERlY2ltYWwxMjggc3RyaW5nIC0gXCIpLmNvbmNhdChtZXNzYWdlKSk7XG59XG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gRGVjaW1hbDEyOCB0eXBlLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtCdWZmZXJ9IGJ5dGVzIGEgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHJhdyBEZWNpbWFsMTI4IGJ5dGVzLlxuICogQHJldHVybiB7RG91YmxlfVxuICovXG5cblxuZnVuY3Rpb24gRGVjaW1hbDEyOChieXRlcykge1xuICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG59XG4vKipcbiAqIENyZWF0ZSBhIERlY2ltYWwxMjggaW5zdGFuY2UgZnJvbSBhIHN0cmluZyByZXByZXNlbnRhdGlvblxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgYSBudW1lcmljIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqIEByZXR1cm4ge0RlY2ltYWwxMjh9IHJldHVybnMgYSBEZWNpbWFsMTI4IGluc3RhbmNlLlxuICovXG5cblxuRGVjaW1hbDEyOC5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAvLyBQYXJzZSBzdGF0ZSB0cmFja2luZ1xuICB2YXIgaXNOZWdhdGl2ZSA9IGZhbHNlO1xuICB2YXIgc2F3UmFkaXggPSBmYWxzZTtcbiAgdmFyIGZvdW5kTm9uWmVybyA9IGZhbHNlOyAvLyBUb3RhbCBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIChubyBsZWFkaW5nIG9yIHRyYWlsaW5nIHplcm8pXG5cbiAgdmFyIHNpZ25pZmljYW50RGlnaXRzID0gMDsgLy8gVG90YWwgbnVtYmVyIG9mIHNpZ25pZmljYW5kIGRpZ2l0cyByZWFkXG5cbiAgdmFyIG5EaWdpdHNSZWFkID0gMDsgLy8gVG90YWwgbnVtYmVyIG9mIGRpZ2l0cyAobm8gbGVhZGluZyB6ZXJvcylcblxuICB2YXIgbkRpZ2l0cyA9IDA7IC8vIFRoZSBudW1iZXIgb2YgdGhlIGRpZ2l0cyBhZnRlciByYWRpeFxuXG4gIHZhciByYWRpeFBvc2l0aW9uID0gMDsgLy8gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBub24temVybyBpbiAqc3RyKlxuXG4gIHZhciBmaXJzdE5vblplcm8gPSAwOyAvLyBEaWdpdHMgQXJyYXlcblxuICB2YXIgZGlnaXRzID0gWzBdOyAvLyBUaGUgbnVtYmVyIG9mIGRpZ2l0cyBpbiBkaWdpdHNcblxuICB2YXIgbkRpZ2l0c1N0b3JlZCA9IDA7IC8vIEluc2VydGlvbiBwb2ludGVyIGZvciBkaWdpdHNcblxuICB2YXIgZGlnaXRzSW5zZXJ0ID0gMDsgLy8gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBub24temVybyBkaWdpdFxuXG4gIHZhciBmaXJzdERpZ2l0ID0gMDsgLy8gVGhlIGluZGV4IG9mIHRoZSBsYXN0IGRpZ2l0XG5cbiAgdmFyIGxhc3REaWdpdCA9IDA7IC8vIEV4cG9uZW50XG5cbiAgdmFyIGV4cG9uZW50ID0gMDsgLy8gbG9vcCBpbmRleCBvdmVyIGFycmF5XG5cbiAgdmFyIGkgPSAwOyAvLyBUaGUgaGlnaCAxNyBkaWdpdHMgb2YgdGhlIHNpZ25pZmljYW5kXG5cbiAgdmFyIHNpZ25pZmljYW5kSGlnaCA9IFswLCAwXTsgLy8gVGhlIGxvdyAxNyBkaWdpdHMgb2YgdGhlIHNpZ25pZmljYW5kXG5cbiAgdmFyIHNpZ25pZmljYW5kTG93ID0gWzAsIDBdOyAvLyBUaGUgYmlhc2VkIGV4cG9uZW50XG5cbiAgdmFyIGJpYXNlZEV4cG9uZW50ID0gMDsgLy8gUmVhZCBpbmRleFxuXG4gIHZhciBpbmRleCA9IDA7IC8vIE5haXZlbHkgcHJldmVudCBhZ2FpbnN0IFJFRE9TIGF0dGFja3MuXG4gIC8vIFRPRE86IGltcGxlbWVudGluZyBhIGN1c3RvbSBwYXJzaW5nIGZvciB0aGlzLCBvciByZWZhY3RvcmluZyB0aGUgcmVnZXggd291bGQgeWllbGRcbiAgLy8gICAgICAgZnVydGhlciBnYWlucy5cblxuICBpZiAoc3RyaW5nLmxlbmd0aCA+PSA3MDAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignJyArIHN0cmluZyArICcgbm90IGEgdmFsaWQgRGVjaW1hbDEyOCBzdHJpbmcnKTtcbiAgfSAvLyBSZXN1bHRzXG5cblxuICB2YXIgc3RyaW5nTWF0Y2ggPSBzdHJpbmcubWF0Y2goUEFSU0VfU1RSSU5HX1JFR0VYUCk7XG4gIHZhciBpbmZNYXRjaCA9IHN0cmluZy5tYXRjaChQQVJTRV9JTkZfUkVHRVhQKTtcbiAgdmFyIG5hbk1hdGNoID0gc3RyaW5nLm1hdGNoKFBBUlNFX05BTl9SRUdFWFApOyAvLyBWYWxpZGF0ZSB0aGUgc3RyaW5nXG5cbiAgaWYgKCFzdHJpbmdNYXRjaCAmJiAhaW5mTWF0Y2ggJiYgIW5hbk1hdGNoIHx8IHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcnICsgc3RyaW5nICsgJyBub3QgYSB2YWxpZCBEZWNpbWFsMTI4IHN0cmluZycpO1xuICB9XG5cbiAgaWYgKHN0cmluZ01hdGNoKSB7XG4gICAgLy8gZnVsbF9tYXRjaCA9IHN0cmluZ01hdGNoWzBdXG4gICAgLy8gc2lnbiA9IHN0cmluZ01hdGNoWzFdXG4gICAgdmFyIHVuc2lnbmVkTnVtYmVyID0gc3RyaW5nTWF0Y2hbMl07IC8vIHN0cmluZ01hdGNoWzNdIGlzIHVuZGVmaW5lZCBpZiBhIHdob2xlIG51bWJlciAoZXggXCIxXCIsIDEyXCIpXG4gICAgLy8gYnV0IGRlZmluZWQgaWYgYSBudW1iZXIgdy8gZGVjaW1hbCBpbiBpdCAoZXggXCIxLjAsIDEyLjJcIilcblxuICAgIHZhciBlID0gc3RyaW5nTWF0Y2hbNF07XG4gICAgdmFyIGV4cFNpZ24gPSBzdHJpbmdNYXRjaFs1XTtcbiAgICB2YXIgZXhwTnVtYmVyID0gc3RyaW5nTWF0Y2hbNl07IC8vIHRoZXkgcHJvdmlkZWQgZSwgYnV0IGRpZG4ndCBnaXZlIGFuIGV4cG9uZW50IG51bWJlci4gZm9yIGV4IFwiMWVcIlxuXG4gICAgaWYgKGUgJiYgZXhwTnVtYmVyID09PSB1bmRlZmluZWQpIGludmFsaWRFcnIoc3RyaW5nLCAnbWlzc2luZyBleHBvbmVudCBwb3dlcicpOyAvLyB0aGV5IHByb3ZpZGVkIGUsIGJ1dCBkaWRuJ3QgZ2l2ZSBhIG51bWJlciBiZWZvcmUgaXQuIGZvciBleCBcImUxXCJcblxuICAgIGlmIChlICYmIHVuc2lnbmVkTnVtYmVyID09PSB1bmRlZmluZWQpIGludmFsaWRFcnIoc3RyaW5nLCAnbWlzc2luZyBleHBvbmVudCBiYXNlJyk7XG5cbiAgICBpZiAoZSA9PT0gdW5kZWZpbmVkICYmIChleHBTaWduIHx8IGV4cE51bWJlcikpIHtcbiAgICAgIGludmFsaWRFcnIoc3RyaW5nLCAnbWlzc2luZyBlIGJlZm9yZSBleHBvbmVudCcpO1xuICAgIH1cbiAgfSAvLyBHZXQgdGhlIG5lZ2F0aXZlIG9yIHBvc2l0aXZlIHNpZ25cblxuXG4gIGlmIChzdHJpbmdbaW5kZXhdID09PSAnKycgfHwgc3RyaW5nW2luZGV4XSA9PT0gJy0nKSB7XG4gICAgaXNOZWdhdGl2ZSA9IHN0cmluZ1tpbmRleCsrXSA9PT0gJy0nO1xuICB9IC8vIENoZWNrIGlmIHVzZXIgcGFzc2VkIEluZmluaXR5IG9yIE5hTlxuXG5cbiAgaWYgKCFpc0RpZ2l0KHN0cmluZ1tpbmRleF0pICYmIHN0cmluZ1tpbmRleF0gIT09ICcuJykge1xuICAgIGlmIChzdHJpbmdbaW5kZXhdID09PSAnaScgfHwgc3RyaW5nW2luZGV4XSA9PT0gJ0knKSB7XG4gICAgICByZXR1cm4gbmV3IERlY2ltYWwxMjgoQnVmZmVyJDIuZnJvbShpc05lZ2F0aXZlID8gSU5GX05FR0FUSVZFX0JVRkZFUiA6IElORl9QT1NJVElWRV9CVUZGRVIpKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZ1tpbmRleF0gPT09ICdOJykge1xuICAgICAgcmV0dXJuIG5ldyBEZWNpbWFsMTI4KEJ1ZmZlciQyLmZyb20oTkFOX0JVRkZFUikpO1xuICAgIH1cbiAgfSAvLyBSZWFkIGFsbCB0aGUgZGlnaXRzXG5cblxuICB3aGlsZSAoaXNEaWdpdChzdHJpbmdbaW5kZXhdKSB8fCBzdHJpbmdbaW5kZXhdID09PSAnLicpIHtcbiAgICBpZiAoc3RyaW5nW2luZGV4XSA9PT0gJy4nKSB7XG4gICAgICBpZiAoc2F3UmFkaXgpIGludmFsaWRFcnIoc3RyaW5nLCAnY29udGFpbnMgbXVsdGlwbGUgcGVyaW9kcycpO1xuICAgICAgc2F3UmFkaXggPSB0cnVlO1xuICAgICAgaW5kZXggPSBpbmRleCArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobkRpZ2l0c1N0b3JlZCA8IDM0KSB7XG4gICAgICBpZiAoc3RyaW5nW2luZGV4XSAhPT0gJzAnIHx8IGZvdW5kTm9uWmVybykge1xuICAgICAgICBpZiAoIWZvdW5kTm9uWmVybykge1xuICAgICAgICAgIGZpcnN0Tm9uWmVybyA9IG5EaWdpdHNSZWFkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm91bmROb25aZXJvID0gdHJ1ZTsgLy8gT25seSBzdG9yZSAzNCBkaWdpdHNcblxuICAgICAgICBkaWdpdHNbZGlnaXRzSW5zZXJ0KytdID0gcGFyc2VJbnQoc3RyaW5nW2luZGV4XSwgMTApO1xuICAgICAgICBuRGlnaXRzU3RvcmVkID0gbkRpZ2l0c1N0b3JlZCArIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZvdW5kTm9uWmVybykgbkRpZ2l0cyA9IG5EaWdpdHMgKyAxO1xuICAgIGlmIChzYXdSYWRpeCkgcmFkaXhQb3NpdGlvbiA9IHJhZGl4UG9zaXRpb24gKyAxO1xuICAgIG5EaWdpdHNSZWFkID0gbkRpZ2l0c1JlYWQgKyAxO1xuICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICB9XG5cbiAgaWYgKHNhd1JhZGl4ICYmICFuRGlnaXRzUmVhZCkgdGhyb3cgbmV3IFR5cGVFcnJvcignJyArIHN0cmluZyArICcgbm90IGEgdmFsaWQgRGVjaW1hbDEyOCBzdHJpbmcnKTsgLy8gUmVhZCBleHBvbmVudCBpZiBleGlzdHNcblxuICBpZiAoc3RyaW5nW2luZGV4XSA9PT0gJ2UnIHx8IHN0cmluZ1tpbmRleF0gPT09ICdFJykge1xuICAgIC8vIFJlYWQgZXhwb25lbnQgZGlnaXRzXG4gICAgdmFyIG1hdGNoID0gc3RyaW5nLnN1YnN0cigrK2luZGV4KS5tYXRjaChFWFBPTkVOVF9SRUdFWCk7IC8vIE5vIGRpZ2l0cyByZWFkXG5cbiAgICBpZiAoIW1hdGNoIHx8ICFtYXRjaFsyXSkgcmV0dXJuIG5ldyBEZWNpbWFsMTI4KEJ1ZmZlciQyLmZyb20oTkFOX0JVRkZFUikpOyAvLyBHZXQgZXhwb25lbnRcblxuICAgIGV4cG9uZW50ID0gcGFyc2VJbnQobWF0Y2hbMF0sIDEwKTsgLy8gQWRqdXN0IHRoZSBpbmRleFxuXG4gICAgaW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfSAvLyBSZXR1cm4gbm90IGEgbnVtYmVyXG5cblxuICBpZiAoc3RyaW5nW2luZGV4XSkgcmV0dXJuIG5ldyBEZWNpbWFsMTI4KEJ1ZmZlciQyLmZyb20oTkFOX0JVRkZFUikpOyAvLyBEb25lIHJlYWRpbmcgaW5wdXRcbiAgLy8gRmluZCBmaXJzdCBub24temVybyBkaWdpdCBpbiBkaWdpdHNcblxuICBmaXJzdERpZ2l0ID0gMDtcblxuICBpZiAoIW5EaWdpdHNTdG9yZWQpIHtcbiAgICBmaXJzdERpZ2l0ID0gMDtcbiAgICBsYXN0RGlnaXQgPSAwO1xuICAgIGRpZ2l0c1swXSA9IDA7XG4gICAgbkRpZ2l0cyA9IDE7XG4gICAgbkRpZ2l0c1N0b3JlZCA9IDE7XG4gICAgc2lnbmlmaWNhbnREaWdpdHMgPSAwO1xuICB9IGVsc2Uge1xuICAgIGxhc3REaWdpdCA9IG5EaWdpdHNTdG9yZWQgLSAxO1xuICAgIHNpZ25pZmljYW50RGlnaXRzID0gbkRpZ2l0cztcblxuICAgIGlmIChzaWduaWZpY2FudERpZ2l0cyAhPT0gMSkge1xuICAgICAgd2hpbGUgKHN0cmluZ1tmaXJzdE5vblplcm8gKyBzaWduaWZpY2FudERpZ2l0cyAtIDFdID09PSAnMCcpIHtcbiAgICAgICAgc2lnbmlmaWNhbnREaWdpdHMgPSBzaWduaWZpY2FudERpZ2l0cyAtIDE7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIE5vcm1hbGl6YXRpb24gb2YgZXhwb25lbnRcbiAgLy8gQ29ycmVjdCBleHBvbmVudCBiYXNlZCBvbiByYWRpeCBwb3NpdGlvbiwgYW5kIHNoaWZ0IHNpZ25pZmljYW5kIGFzIG5lZWRlZFxuICAvLyB0byByZXByZXNlbnQgdXNlciBpbnB1dFxuICAvLyBPdmVyZmxvdyBwcmV2ZW50aW9uXG5cblxuICBpZiAoZXhwb25lbnQgPD0gcmFkaXhQb3NpdGlvbiAmJiByYWRpeFBvc2l0aW9uIC0gZXhwb25lbnQgPiAxIDw8IDE0KSB7XG4gICAgZXhwb25lbnQgPSBFWFBPTkVOVF9NSU47XG4gIH0gZWxzZSB7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAtIHJhZGl4UG9zaXRpb247XG4gIH0gLy8gQXR0ZW1wdCB0byBub3JtYWxpemUgdGhlIGV4cG9uZW50XG5cblxuICB3aGlsZSAoZXhwb25lbnQgPiBFWFBPTkVOVF9NQVgpIHtcbiAgICAvLyBTaGlmdCBleHBvbmVudCB0byBzaWduaWZpY2FuZCBhbmQgZGVjcmVhc2VcbiAgICBsYXN0RGlnaXQgPSBsYXN0RGlnaXQgKyAxO1xuXG4gICAgaWYgKGxhc3REaWdpdCAtIGZpcnN0RGlnaXQgPiBNQVhfRElHSVRTKSB7XG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgemVybyB0aGVuIGp1c3QgaGFyZCBjbGFtcCwgb3RoZXJ3aXNlIGZhaWxcbiAgICAgIHZhciBkaWdpdHNTdHJpbmcgPSBkaWdpdHMuam9pbignJyk7XG5cbiAgICAgIGlmIChkaWdpdHNTdHJpbmcubWF0Y2goL14wKyQvKSkge1xuICAgICAgICBleHBvbmVudCA9IEVYUE9ORU5UX01BWDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGludmFsaWRFcnIoc3RyaW5nLCAnb3ZlcmZsb3cnKTtcbiAgICB9XG5cbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gMTtcbiAgfVxuXG4gIHdoaWxlIChleHBvbmVudCA8IEVYUE9ORU5UX01JTiB8fCBuRGlnaXRzU3RvcmVkIDwgbkRpZ2l0cykge1xuICAgIC8vIFNoaWZ0IGxhc3QgZGlnaXQuIGNhbiBvbmx5IGRvIHRoaXMgaWYgPCBzaWduaWZpY2FudCBkaWdpdHMgdGhhbiAjIHN0b3JlZC5cbiAgICBpZiAobGFzdERpZ2l0ID09PSAwICYmIHNpZ25pZmljYW50RGlnaXRzIDwgbkRpZ2l0c1N0b3JlZCkge1xuICAgICAgZXhwb25lbnQgPSBFWFBPTkVOVF9NSU47XG4gICAgICBzaWduaWZpY2FudERpZ2l0cyA9IDA7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAobkRpZ2l0c1N0b3JlZCA8IG5EaWdpdHMpIHtcbiAgICAgIC8vIGFkanVzdCB0byBtYXRjaCBkaWdpdHMgbm90IHN0b3JlZFxuICAgICAgbkRpZ2l0cyA9IG5EaWdpdHMgLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhZGp1c3QgdG8gcm91bmRcbiAgICAgIGxhc3REaWdpdCA9IGxhc3REaWdpdCAtIDE7XG4gICAgfVxuXG4gICAgaWYgKGV4cG9uZW50IDwgRVhQT05FTlRfTUFYKSB7XG4gICAgICBleHBvbmVudCA9IGV4cG9uZW50ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhIHplcm8gdGhlbiBqdXN0IGhhcmQgY2xhbXAsIG90aGVyd2lzZSBmYWlsXG4gICAgICB2YXIgX2RpZ2l0c1N0cmluZyA9IGRpZ2l0cy5qb2luKCcnKTtcblxuICAgICAgaWYgKF9kaWdpdHNTdHJpbmcubWF0Y2goL14wKyQvKSkge1xuICAgICAgICBleHBvbmVudCA9IEVYUE9ORU5UX01BWDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGludmFsaWRFcnIoc3RyaW5nLCAnb3ZlcmZsb3cnKTtcbiAgICB9XG4gIH0gLy8gUm91bmRcbiAgLy8gV2UndmUgbm9ybWFsaXplZCB0aGUgZXhwb25lbnQsIGJ1dCBtaWdodCBzdGlsbCBuZWVkIHRvIHJvdW5kLlxuXG5cbiAgaWYgKGxhc3REaWdpdCAtIGZpcnN0RGlnaXQgKyAxIDwgc2lnbmlmaWNhbnREaWdpdHMpIHtcbiAgICB2YXIgZW5kT2ZTdHJpbmcgPSBuRGlnaXRzUmVhZDsgLy8gSWYgd2UgaGF2ZSBzZWVuIGEgcmFkaXggcG9pbnQsICdzdHJpbmcnIGlzIDEgbG9uZ2VyIHRoYW4gd2UgaGF2ZVxuICAgIC8vIGRvY3VtZW50ZWQgd2l0aCBuZGlnaXRzX3JlYWQsIHNvIGluYyB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG5vbnplcm9cbiAgICAvLyBkaWdpdCBhbmQgdGhlIHBvc2l0aW9uIHRoYXQgZGlnaXRzIGFyZSByZWFkIHRvLlxuXG4gICAgaWYgKHNhd1JhZGl4KSB7XG4gICAgICBmaXJzdE5vblplcm8gPSBmaXJzdE5vblplcm8gKyAxO1xuICAgICAgZW5kT2ZTdHJpbmcgPSBlbmRPZlN0cmluZyArIDE7XG4gICAgfSAvLyBpZiBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbmNyZW1lbnQgYWdhaW4gdG8gYWNjb3VudCBmb3IgLSBzaWduIGF0IHN0YXJ0LlxuXG5cbiAgICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgICAgZmlyc3ROb25aZXJvID0gZmlyc3ROb25aZXJvICsgMTtcbiAgICAgIGVuZE9mU3RyaW5nID0gZW5kT2ZTdHJpbmcgKyAxO1xuICAgIH1cblxuICAgIHZhciByb3VuZERpZ2l0ID0gcGFyc2VJbnQoc3RyaW5nW2ZpcnN0Tm9uWmVybyArIGxhc3REaWdpdCArIDFdLCAxMCk7XG4gICAgdmFyIHJvdW5kQml0ID0gMDtcblxuICAgIGlmIChyb3VuZERpZ2l0ID49IDUpIHtcbiAgICAgIHJvdW5kQml0ID0gMTtcblxuICAgICAgaWYgKHJvdW5kRGlnaXQgPT09IDUpIHtcbiAgICAgICAgcm91bmRCaXQgPSBkaWdpdHNbbGFzdERpZ2l0XSAlIDIgPT09IDE7XG5cbiAgICAgICAgZm9yIChpID0gZmlyc3ROb25aZXJvICsgbGFzdERpZ2l0ICsgMjsgaSA8IGVuZE9mU3RyaW5nOyBpKyspIHtcbiAgICAgICAgICBpZiAocGFyc2VJbnQoc3RyaW5nW2ldLCAxMCkpIHtcbiAgICAgICAgICAgIHJvdW5kQml0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyb3VuZEJpdCkge1xuICAgICAgdmFyIGRJZHggPSBsYXN0RGlnaXQ7XG5cbiAgICAgIGZvciAoOyBkSWR4ID49IDA7IGRJZHgtLSkge1xuICAgICAgICBpZiAoKytkaWdpdHNbZElkeF0gPiA5KSB7XG4gICAgICAgICAgZGlnaXRzW2RJZHhdID0gMDsgLy8gb3ZlcmZsb3dlZCBtb3N0IHNpZ25pZmljYW50IGRpZ2l0XG5cbiAgICAgICAgICBpZiAoZElkeCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGV4cG9uZW50IDwgRVhQT05FTlRfTUFYKSB7XG4gICAgICAgICAgICAgIGV4cG9uZW50ID0gZXhwb25lbnQgKyAxO1xuICAgICAgICAgICAgICBkaWdpdHNbZElkeF0gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWNpbWFsMTI4KEJ1ZmZlciQyLmZyb20oaXNOZWdhdGl2ZSA/IElORl9ORUdBVElWRV9CVUZGRVIgOiBJTkZfUE9TSVRJVkVfQlVGRkVSKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIEVuY29kZSBzaWduaWZpY2FuZFxuICAvLyBUaGUgaGlnaCAxNyBkaWdpdHMgb2YgdGhlIHNpZ25pZmljYW5kXG5cblxuICBzaWduaWZpY2FuZEhpZ2ggPSBsb25nXzEuZnJvbU51bWJlcigwKTsgLy8gVGhlIGxvdyAxNyBkaWdpdHMgb2YgdGhlIHNpZ25pZmljYW5kXG5cbiAgc2lnbmlmaWNhbmRMb3cgPSBsb25nXzEuZnJvbU51bWJlcigwKTsgLy8gcmVhZCBhIHplcm9cblxuICBpZiAoc2lnbmlmaWNhbnREaWdpdHMgPT09IDApIHtcbiAgICBzaWduaWZpY2FuZEhpZ2ggPSBsb25nXzEuZnJvbU51bWJlcigwKTtcbiAgICBzaWduaWZpY2FuZExvdyA9IGxvbmdfMS5mcm9tTnVtYmVyKDApO1xuICB9IGVsc2UgaWYgKGxhc3REaWdpdCAtIGZpcnN0RGlnaXQgPCAxNykge1xuICAgIHZhciBfZElkeCA9IGZpcnN0RGlnaXQ7XG4gICAgc2lnbmlmaWNhbmRMb3cgPSBsb25nXzEuZnJvbU51bWJlcihkaWdpdHNbX2RJZHgrK10pO1xuICAgIHNpZ25pZmljYW5kSGlnaCA9IG5ldyBsb25nXzEoMCwgMCk7XG5cbiAgICBmb3IgKDsgX2RJZHggPD0gbGFzdERpZ2l0OyBfZElkeCsrKSB7XG4gICAgICBzaWduaWZpY2FuZExvdyA9IHNpZ25pZmljYW5kTG93Lm11bHRpcGx5KGxvbmdfMS5mcm9tTnVtYmVyKDEwKSk7XG4gICAgICBzaWduaWZpY2FuZExvdyA9IHNpZ25pZmljYW5kTG93LmFkZChsb25nXzEuZnJvbU51bWJlcihkaWdpdHNbX2RJZHhdKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBfZElkeDIgPSBmaXJzdERpZ2l0O1xuICAgIHNpZ25pZmljYW5kSGlnaCA9IGxvbmdfMS5mcm9tTnVtYmVyKGRpZ2l0c1tfZElkeDIrK10pO1xuXG4gICAgZm9yICg7IF9kSWR4MiA8PSBsYXN0RGlnaXQgLSAxNzsgX2RJZHgyKyspIHtcbiAgICAgIHNpZ25pZmljYW5kSGlnaCA9IHNpZ25pZmljYW5kSGlnaC5tdWx0aXBseShsb25nXzEuZnJvbU51bWJlcigxMCkpO1xuICAgICAgc2lnbmlmaWNhbmRIaWdoID0gc2lnbmlmaWNhbmRIaWdoLmFkZChsb25nXzEuZnJvbU51bWJlcihkaWdpdHNbX2RJZHgyXSkpO1xuICAgIH1cblxuICAgIHNpZ25pZmljYW5kTG93ID0gbG9uZ18xLmZyb21OdW1iZXIoZGlnaXRzW19kSWR4MisrXSk7XG5cbiAgICBmb3IgKDsgX2RJZHgyIDw9IGxhc3REaWdpdDsgX2RJZHgyKyspIHtcbiAgICAgIHNpZ25pZmljYW5kTG93ID0gc2lnbmlmaWNhbmRMb3cubXVsdGlwbHkobG9uZ18xLmZyb21OdW1iZXIoMTApKTtcbiAgICAgIHNpZ25pZmljYW5kTG93ID0gc2lnbmlmaWNhbmRMb3cuYWRkKGxvbmdfMS5mcm9tTnVtYmVyKGRpZ2l0c1tfZElkeDJdKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNpZ25pZmljYW5kID0gbXVsdGlwbHk2NHgyKHNpZ25pZmljYW5kSGlnaCwgbG9uZ18xLmZyb21TdHJpbmcoJzEwMDAwMDAwMDAwMDAwMDAwMCcpKTtcbiAgc2lnbmlmaWNhbmQubG93ID0gc2lnbmlmaWNhbmQubG93LmFkZChzaWduaWZpY2FuZExvdyk7XG5cbiAgaWYgKGxlc3NUaGFuKHNpZ25pZmljYW5kLmxvdywgc2lnbmlmaWNhbmRMb3cpKSB7XG4gICAgc2lnbmlmaWNhbmQuaGlnaCA9IHNpZ25pZmljYW5kLmhpZ2guYWRkKGxvbmdfMS5mcm9tTnVtYmVyKDEpKTtcbiAgfSAvLyBCaWFzZWQgZXhwb25lbnRcblxuXG4gIGJpYXNlZEV4cG9uZW50ID0gZXhwb25lbnQgKyBFWFBPTkVOVF9CSUFTO1xuICB2YXIgZGVjID0ge1xuICAgIGxvdzogbG9uZ18xLmZyb21OdW1iZXIoMCksXG4gICAgaGlnaDogbG9uZ18xLmZyb21OdW1iZXIoMClcbiAgfTsgLy8gRW5jb2RlIGNvbWJpbmF0aW9uLCBleHBvbmVudCwgYW5kIHNpZ25pZmljYW5kLlxuXG4gIGlmIChzaWduaWZpY2FuZC5oaWdoLnNoaWZ0UmlnaHRVbnNpZ25lZCg0OSkuYW5kKGxvbmdfMS5mcm9tTnVtYmVyKDEpKS5lcXVhbHMobG9uZ18xLmZyb21OdW1iZXIoMSkpKSB7XG4gICAgLy8gRW5jb2RlICcxMScgaW50byBiaXRzIDEgdG8gM1xuICAgIGRlYy5oaWdoID0gZGVjLmhpZ2gub3IobG9uZ18xLmZyb21OdW1iZXIoMHgzKS5zaGlmdExlZnQoNjEpKTtcbiAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tTnVtYmVyKGJpYXNlZEV4cG9uZW50KS5hbmQobG9uZ18xLmZyb21OdW1iZXIoMHgzZmZmKS5zaGlmdExlZnQoNDcpKSk7XG4gICAgZGVjLmhpZ2ggPSBkZWMuaGlnaC5vcihzaWduaWZpY2FuZC5oaWdoLmFuZChsb25nXzEuZnJvbU51bWJlcigweDdmZmZmZmZmZmZmZikpKTtcbiAgfSBlbHNlIHtcbiAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tTnVtYmVyKGJpYXNlZEV4cG9uZW50ICYgMHgzZmZmKS5zaGlmdExlZnQoNDkpKTtcbiAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKHNpZ25pZmljYW5kLmhpZ2guYW5kKGxvbmdfMS5mcm9tTnVtYmVyKDB4MWZmZmZmZmZmZmZmZikpKTtcbiAgfVxuXG4gIGRlYy5sb3cgPSBzaWduaWZpY2FuZC5sb3c7IC8vIEVuY29kZSBzaWduXG5cbiAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tU3RyaW5nKCc5MjIzMzcyMDM2ODU0Nzc1ODA4JykpO1xuICB9IC8vIEVuY29kZSBpbnRvIGEgYnVmZmVyXG5cblxuICB2YXIgYnVmZmVyJCQxID0gQnVmZmVyJDIuYWxsb2MoMTYpO1xuICBpbmRleCA9IDA7IC8vIEVuY29kZSB0aGUgbG93IDY0IGJpdHMgb2YgdGhlIGRlY2ltYWxcbiAgLy8gRW5jb2RlIGxvdyBiaXRzXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5sb3cgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmxvdyA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5sb3cgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmxvdyA+PiAyNCAmIDB4ZmY7IC8vIEVuY29kZSBoaWdoIGJpdHNcblxuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmhpZ2ggJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmhpZ2ggPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5sb3cuaGlnaCA+PiAxNiAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5sb3cuaGlnaCA+PiAyNCAmIDB4ZmY7IC8vIEVuY29kZSB0aGUgaGlnaCA2NCBiaXRzIG9mIHRoZSBkZWNpbWFsXG4gIC8vIEVuY29kZSBsb3cgYml0c1xuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5oaWdoLmxvdyAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5oaWdoLmxvdyA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmhpZ2gubG93ID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmhpZ2gubG93ID4+IDI0ICYgMHhmZjsgLy8gRW5jb2RlIGhpZ2ggYml0c1xuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5oaWdoLmhpZ2ggJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5oaWdoID4+IDggJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5oaWdoID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmhpZ2guaGlnaCA+PiAyNCAmIDB4ZmY7IC8vIFJldHVybiB0aGUgbmV3IERlY2ltYWwxMjhcblxuICByZXR1cm4gbmV3IERlY2ltYWwxMjgoYnVmZmVyJCQxKTtcbn07IC8vIEV4dHJhY3QgbGVhc3Qgc2lnbmlmaWNhbnQgNSBiaXRzXG5cblxudmFyIENPTUJJTkFUSU9OX01BU0sgPSAweDFmOyAvLyBFeHRyYWN0IGxlYXN0IHNpZ25pZmljYW50IDE0IGJpdHNcblxudmFyIEVYUE9ORU5UX01BU0sgPSAweDNmZmY7IC8vIFZhbHVlIG9mIGNvbWJpbmF0aW9uIGZpZWxkIGZvciBJbmZcblxudmFyIENPTUJJTkFUSU9OX0lORklOSVRZID0gMzA7IC8vIFZhbHVlIG9mIGNvbWJpbmF0aW9uIGZpZWxkIGZvciBOYU5cblxudmFyIENPTUJJTkFUSU9OX05BTiA9IDMxO1xuLyoqXG4gKiBDcmVhdGUgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJhdyBEZWNpbWFsMTI4IHZhbHVlXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7c3RyaW5nfSByZXR1cm5zIGEgRGVjaW1hbDEyOCBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKi9cblxuRGVjaW1hbDEyOC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE5vdGU6IGJpdHMgaW4gdGhpcyByb3V0aW5lIGFyZSByZWZlcnJlZCB0byBzdGFydGluZyBhdCAwLFxuICAvLyBmcm9tIHRoZSBzaWduIGJpdCwgdG93YXJkcyB0aGUgY29lZmZpY2llbnQuXG4gIC8vIGJpdHMgMCAtIDMxXG4gIHZhciBoaWdoOyAvLyBiaXRzIDMyIC0gNjNcblxuICB2YXIgbWlkaDsgLy8gYml0cyA2NCAtIDk1XG5cbiAgdmFyIG1pZGw7IC8vIGJpdHMgOTYgLSAxMjdcblxuICB2YXIgbG93OyAvLyBiaXRzIDEgLSA1XG5cbiAgdmFyIGNvbWJpbmF0aW9uOyAvLyBkZWNvZGVkIGJpYXNlZCBleHBvbmVudCAoMTQgYml0cylcblxuICB2YXIgYmlhc2VkX2V4cG9uZW50OyAvLyB0aGUgbnVtYmVyIG9mIHNpZ25pZmljYW5kIGRpZ2l0c1xuXG4gIHZhciBzaWduaWZpY2FuZF9kaWdpdHMgPSAwOyAvLyB0aGUgYmFzZS0xMCBkaWdpdHMgaW4gdGhlIHNpZ25pZmljYW5kXG5cbiAgdmFyIHNpZ25pZmljYW5kID0gbmV3IEFycmF5KDM2KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ25pZmljYW5kLmxlbmd0aDsgaSsrKSB7XG4gICAgc2lnbmlmaWNhbmRbaV0gPSAwO1xuICB9IC8vIHJlYWQgcG9pbnRlciBpbnRvIHNpZ25pZmljYW5kXG5cblxuICB2YXIgaW5kZXggPSAwOyAvLyB1bmJpYXNlZCBleHBvbmVudFxuXG4gIHZhciBleHBvbmVudDsgLy8gdGhlIGV4cG9uZW50IGlmIHNjaWVudGlmaWMgbm90YXRpb24gaXMgdXNlZFxuXG4gIHZhciBzY2llbnRpZmljX2V4cG9uZW50OyAvLyB0cnVlIGlmIHRoZSBudW1iZXIgaXMgemVyb1xuXG4gIHZhciBpc196ZXJvID0gZmFsc2U7IC8vIHRoZSBtb3N0IHNpZ25pZmNhbnQgc2lnbmlmaWNhbmQgYml0cyAoNTAtNDYpXG5cbiAgdmFyIHNpZ25pZmljYW5kX21zYjsgLy8gdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIHNpZ25pZmljYW5kIGRlY29kaW5nXG5cbiAgdmFyIHNpZ25pZmljYW5kMTI4ID0ge1xuICAgIHBhcnRzOiBuZXcgQXJyYXkoNClcbiAgfTsgLy8gaW5kZXhpbmcgdmFyaWFibGVzXG5cbiAgdmFyIGosIGs7IC8vIE91dHB1dCBzdHJpbmdcblxuICB2YXIgc3RyaW5nID0gW107IC8vIFVucGFjayBpbmRleFxuXG4gIGluZGV4ID0gMDsgLy8gQnVmZmVyIHJlZmVyZW5jZVxuXG4gIHZhciBidWZmZXIkJDEgPSB0aGlzLmJ5dGVzOyAvLyBVbnBhY2sgdGhlIGxvdyA2NGJpdHMgaW50byBhIGxvbmdcblxuICBsb3cgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcbiAgbWlkbCA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0OyAvLyBVbnBhY2sgdGhlIGhpZ2ggNjRiaXRzIGludG8gYSBsb25nXG5cbiAgbWlkaCA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuICBoaWdoID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIFVucGFjayBpbmRleFxuXG4gIGluZGV4ID0gMDsgLy8gQ3JlYXRlIHRoZSBzdGF0ZSBvZiB0aGUgZGVjaW1hbFxuXG4gIHZhciBkZWMgPSB7XG4gICAgbG93OiBuZXcgbG9uZ18xKGxvdywgbWlkbCksXG4gICAgaGlnaDogbmV3IGxvbmdfMShtaWRoLCBoaWdoKVxuICB9O1xuXG4gIGlmIChkZWMuaGlnaC5sZXNzVGhhbihsb25nXzEuWkVSTykpIHtcbiAgICBzdHJpbmcucHVzaCgnLScpO1xuICB9IC8vIERlY29kZSBjb21iaW5hdGlvbiBmaWVsZCBhbmQgZXhwb25lbnRcblxuXG4gIGNvbWJpbmF0aW9uID0gaGlnaCA+PiAyNiAmIENPTUJJTkFUSU9OX01BU0s7XG5cbiAgaWYgKGNvbWJpbmF0aW9uID4+IDMgPT09IDMpIHtcbiAgICAvLyBDaGVjayBmb3IgJ3NwZWNpYWwnIHZhbHVlc1xuICAgIGlmIChjb21iaW5hdGlvbiA9PT0gQ09NQklOQVRJT05fSU5GSU5JVFkpIHtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbignJykgKyAnSW5maW5pdHknO1xuICAgIH0gZWxzZSBpZiAoY29tYmluYXRpb24gPT09IENPTUJJTkFUSU9OX05BTikge1xuICAgICAgcmV0dXJuICdOYU4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBiaWFzZWRfZXhwb25lbnQgPSBoaWdoID4+IDE1ICYgRVhQT05FTlRfTUFTSztcbiAgICAgIHNpZ25pZmljYW5kX21zYiA9IDB4MDggKyAoaGlnaCA+PiAxNCAmIDB4MDEpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzaWduaWZpY2FuZF9tc2IgPSBoaWdoID4+IDE0ICYgMHgwNztcbiAgICBiaWFzZWRfZXhwb25lbnQgPSBoaWdoID4+IDE3ICYgRVhQT05FTlRfTUFTSztcbiAgfVxuXG4gIGV4cG9uZW50ID0gYmlhc2VkX2V4cG9uZW50IC0gRVhQT05FTlRfQklBUzsgLy8gQ3JlYXRlIHN0cmluZyBvZiBzaWduaWZpY2FuZCBkaWdpdHNcbiAgLy8gQ29udmVydCB0aGUgMTE0LWJpdCBiaW5hcnkgbnVtYmVyIHJlcHJlc2VudGVkIGJ5XG4gIC8vIChzaWduaWZpY2FuZF9oaWdoLCBzaWduaWZpY2FuZF9sb3cpIHRvIGF0IG1vc3QgMzQgZGVjaW1hbFxuICAvLyBkaWdpdHMgdGhyb3VnaCBtb2R1bG8gYW5kIGRpdmlzaW9uLlxuXG4gIHNpZ25pZmljYW5kMTI4LnBhcnRzWzBdID0gKGhpZ2ggJiAweDNmZmYpICsgKChzaWduaWZpY2FuZF9tc2IgJiAweGYpIDw8IDE0KTtcbiAgc2lnbmlmaWNhbmQxMjgucGFydHNbMV0gPSBtaWRoO1xuICBzaWduaWZpY2FuZDEyOC5wYXJ0c1syXSA9IG1pZGw7XG4gIHNpZ25pZmljYW5kMTI4LnBhcnRzWzNdID0gbG93O1xuXG4gIGlmIChzaWduaWZpY2FuZDEyOC5wYXJ0c1swXSA9PT0gMCAmJiBzaWduaWZpY2FuZDEyOC5wYXJ0c1sxXSA9PT0gMCAmJiBzaWduaWZpY2FuZDEyOC5wYXJ0c1syXSA9PT0gMCAmJiBzaWduaWZpY2FuZDEyOC5wYXJ0c1szXSA9PT0gMCkge1xuICAgIGlzX3plcm8gPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGZvciAoayA9IDM7IGsgPj0gMDsgay0tKSB7XG4gICAgICB2YXIgbGVhc3RfZGlnaXRzID0gMDsgLy8gUGVmb3JtIHRoZSBkaXZpZGVcblxuICAgICAgdmFyIHJlc3VsdCA9IGRpdmlkZXUxMjgoc2lnbmlmaWNhbmQxMjgpO1xuICAgICAgc2lnbmlmaWNhbmQxMjggPSByZXN1bHQucXVvdGllbnQ7XG4gICAgICBsZWFzdF9kaWdpdHMgPSByZXN1bHQucmVtLmxvdzsgLy8gV2Ugbm93IGhhdmUgdGhlIDkgbGVhc3Qgc2lnbmlmaWNhbnQgZGlnaXRzIChpbiBiYXNlIDIpLlxuICAgICAgLy8gQ29udmVydCBhbmQgb3V0cHV0IHRvIHN0cmluZy5cblxuICAgICAgaWYgKCFsZWFzdF9kaWdpdHMpIGNvbnRpbnVlO1xuXG4gICAgICBmb3IgKGogPSA4OyBqID49IDA7IGotLSkge1xuICAgICAgICAvLyBzaWduaWZpY2FuZFtrICogOSArIGpdID0gTWF0aC5yb3VuZChsZWFzdF9kaWdpdHMgJSAxMCk7XG4gICAgICAgIHNpZ25pZmljYW5kW2sgKiA5ICsgal0gPSBsZWFzdF9kaWdpdHMgJSAxMDsgLy8gbGVhc3RfZGlnaXRzID0gTWF0aC5yb3VuZChsZWFzdF9kaWdpdHMgLyAxMCk7XG5cbiAgICAgICAgbGVhc3RfZGlnaXRzID0gTWF0aC5mbG9vcihsZWFzdF9kaWdpdHMgLyAxMCk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIE91dHB1dCBmb3JtYXQgb3B0aW9uczpcbiAgLy8gU2NpZW50aWZpYyAtIFstXWQuZGRkRSgrLy0pZGQgb3IgWy1dZEUoKy8tKWRkXG4gIC8vIFJlZ3VsYXIgICAgLSBkZGQuZGRkXG5cblxuICBpZiAoaXNfemVybykge1xuICAgIHNpZ25pZmljYW5kX2RpZ2l0cyA9IDE7XG4gICAgc2lnbmlmaWNhbmRbaW5kZXhdID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzaWduaWZpY2FuZF9kaWdpdHMgPSAzNjtcblxuICAgIHdoaWxlICghc2lnbmlmaWNhbmRbaW5kZXhdKSB7XG4gICAgICBzaWduaWZpY2FuZF9kaWdpdHMgPSBzaWduaWZpY2FuZF9kaWdpdHMgLSAxO1xuICAgICAgaW5kZXggPSBpbmRleCArIDE7XG4gICAgfVxuICB9XG5cbiAgc2NpZW50aWZpY19leHBvbmVudCA9IHNpZ25pZmljYW5kX2RpZ2l0cyAtIDEgKyBleHBvbmVudDsgLy8gVGhlIHNjaWVudGlmaWMgZXhwb25lbnQgY2hlY2tzIGFyZSBkaWN0YXRlZCBieSB0aGUgc3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gc3BlY2lmaWNhdGlvbiBhbmQgYXJlIHNvbWV3aGF0IGFyYml0cmFyeSBjdXRvZmZzLlxuICAvL1xuICAvLyBXZSBtdXN0IGNoZWNrIGV4cG9uZW50ID4gMCwgYmVjYXVzZSBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgbnVtYmVyXG4gIC8vIGhhcyB0cmFpbGluZyB6ZXJvcy4gIEhvd2V2ZXIsIHdlICpjYW5ub3QqIG91dHB1dCB0aGVzZSB0cmFpbGluZyB6ZXJvcyxcbiAgLy8gYmVjYXVzZSBkb2luZyBzbyB3b3VsZCBjaGFuZ2UgdGhlIHByZWNpc2lvbiBvZiB0aGUgdmFsdWUsIGFuZCB3b3VsZFxuICAvLyBjaGFuZ2Ugc3RvcmVkIGRhdGEgaWYgdGhlIHN0cmluZyBjb252ZXJ0ZWQgbnVtYmVyIGlzIHJvdW5kIHRyaXBwZWQuXG5cbiAgaWYgKHNjaWVudGlmaWNfZXhwb25lbnQgPj0gMzQgfHwgc2NpZW50aWZpY19leHBvbmVudCA8PSAtNyB8fCBleHBvbmVudCA+IDApIHtcbiAgICAvLyBTY2llbnRpZmljIGZvcm1hdFxuICAgIC8vIGlmIHRoZXJlIGFyZSB0b28gbWFueSBzaWduaWZpY2FudCBkaWdpdHMsIHdlIHNob3VsZCBqdXN0IGJlIHRyZWF0aW5nIG51bWJlcnNcbiAgICAvLyBhcyArIG9yIC0gMCBhbmQgdXNpbmcgdGhlIG5vbi1zY2llbnRpZmljIGV4cG9uZW50ICh0aGlzIGlzIGZvciB0aGUgXCJpbnZhbGlkXG4gICAgLy8gcmVwcmVzZW50YXRpb24gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgMC8tMFwiIHNwZWMgY2FzZXMgaW4gZGVjaW1hbDEyOC0xLmpzb24pXG4gICAgaWYgKHNpZ25pZmljYW5kX2RpZ2l0cyA+IDM0KSB7XG4gICAgICBzdHJpbmcucHVzaCgwKTtcbiAgICAgIGlmIChleHBvbmVudCA+IDApIHN0cmluZy5wdXNoKCdFKycgKyBleHBvbmVudCk7ZWxzZSBpZiAoZXhwb25lbnQgPCAwKSBzdHJpbmcucHVzaCgnRScgKyBleHBvbmVudCk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHN0cmluZy5wdXNoKHNpZ25pZmljYW5kW2luZGV4KytdKTtcbiAgICBzaWduaWZpY2FuZF9kaWdpdHMgPSBzaWduaWZpY2FuZF9kaWdpdHMgLSAxO1xuXG4gICAgaWYgKHNpZ25pZmljYW5kX2RpZ2l0cykge1xuICAgICAgc3RyaW5nLnB1c2goJy4nKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc2lnbmlmaWNhbmRfZGlnaXRzOyBfaSsrKSB7XG4gICAgICBzdHJpbmcucHVzaChzaWduaWZpY2FuZFtpbmRleCsrXSk7XG4gICAgfSAvLyBFeHBvbmVudFxuXG5cbiAgICBzdHJpbmcucHVzaCgnRScpO1xuXG4gICAgaWYgKHNjaWVudGlmaWNfZXhwb25lbnQgPiAwKSB7XG4gICAgICBzdHJpbmcucHVzaCgnKycgKyBzY2llbnRpZmljX2V4cG9uZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyaW5nLnB1c2goc2NpZW50aWZpY19leHBvbmVudCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFJlZ3VsYXIgZm9ybWF0IHdpdGggbm8gZGVjaW1hbCBwbGFjZVxuICAgIGlmIChleHBvbmVudCA+PSAwKSB7XG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzaWduaWZpY2FuZF9kaWdpdHM7IF9pMisrKSB7XG4gICAgICAgIHN0cmluZy5wdXNoKHNpZ25pZmljYW5kW2luZGV4KytdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJhZGl4X3Bvc2l0aW9uID0gc2lnbmlmaWNhbmRfZGlnaXRzICsgZXhwb25lbnQ7IC8vIG5vbi16ZXJvIGRpZ2l0cyBiZWZvcmUgcmFkaXhcblxuICAgICAgaWYgKHJhZGl4X3Bvc2l0aW9uID4gMCkge1xuICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCByYWRpeF9wb3NpdGlvbjsgX2kzKyspIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzaWduaWZpY2FuZFtpbmRleCsrXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZy5wdXNoKCcwJyk7XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKCcuJyk7IC8vIGFkZCBsZWFkaW5nIHplcm9zIGFmdGVyIHJhZGl4XG5cbiAgICAgIHdoaWxlIChyYWRpeF9wb3NpdGlvbisrIDwgMCkge1xuICAgICAgICBzdHJpbmcucHVzaCgnMCcpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBzaWduaWZpY2FuZF9kaWdpdHMgLSBNYXRoLm1heChyYWRpeF9wb3NpdGlvbiAtIDEsIDApOyBfaTQrKykge1xuICAgICAgICBzdHJpbmcucHVzaChzaWduaWZpY2FuZFtpbmRleCsrXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5qb2luKCcnKTtcbn07XG5cbkRlY2ltYWwxMjgucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICAkbnVtYmVyRGVjaW1hbDogdGhpcy50b1N0cmluZygpXG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlXG4gKi9cblxuXG5EZWNpbWFsMTI4LnByb3RvdHlwZS50b0V4dGVuZGVkSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICAkbnVtYmVyRGVjaW1hbDogdGhpcy50b1N0cmluZygpXG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlXG4gKi9cblxuXG5EZWNpbWFsMTI4LmZyb21FeHRlbmRlZEpTT04gPSBmdW5jdGlvbiAoZG9jKSB7XG4gIHJldHVybiBEZWNpbWFsMTI4LmZyb21TdHJpbmcoZG9jLiRudW1iZXJEZWNpbWFsKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWNpbWFsMTI4LnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdEZWNpbWFsMTI4J1xufSk7XG52YXIgZGVjaW1hbDEyOCA9IERlY2ltYWwxMjg7XG5cbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBNaW5LZXkgdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2skNyhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDcodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MkNyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDcoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ3KENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgTWluS2V5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIE1pbktleSB0eXBlXG4gICAqXG4gICAqIEByZXR1cm4ge01pbktleX0gQSBNaW5LZXkgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIE1pbktleSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2skNyh0aGlzLCBNaW5LZXkpO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzJDcoTWluS2V5LCBbe1xuICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICRtaW5LZXk6IDFcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKCkge1xuICAgICAgcmV0dXJuIG5ldyBNaW5LZXkoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWluS2V5O1xufSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWluS2V5LnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcbiAgdmFsdWU6ICdNaW5LZXknXG59KTtcbnZhciBtaW5fa2V5ID0gTWluS2V5O1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gTWF4S2V5IHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDgoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ4KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDgoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ4KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkOChDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIE1heEtleSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBNYXhLZXkgdHlwZVxuICAgKlxuICAgKiBAcmV0dXJuIHtNYXhLZXl9IEEgTWF4S2V5IGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBNYXhLZXkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrJDgodGhpcywgTWF4S2V5KTtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyQ4KE1heEtleSwgW3tcbiAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkbWF4S2V5OiAxXG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfV0sIFt7XG4gICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTigpIHtcbiAgICAgIHJldHVybiBuZXcgTWF4S2V5KCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1heEtleTtcbn0oKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1heEtleS5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG4gIHZhbHVlOiAnTWF4S2V5J1xufSk7XG52YXIgbWF4X2tleSA9IE1heEtleTtcblxuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIERCUmVmIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDkoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ5KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDkoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ5KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkOShDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIERCUmVmID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIERCUmVmIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb24gdGhlIGNvbGxlY3Rpb24gbmFtZS5cbiAgICogQHBhcmFtIHtPYmplY3RJZH0gb2lkIHRoZSByZWZlcmVuY2UgT2JqZWN0SWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGJdIG9wdGlvbmFsIGRiIG5hbWUsIGlmIG9taXR0ZWQgdGhlIHJlZmVyZW5jZSBpcyBsb2NhbCB0byB0aGUgY3VycmVudCBkYi5cbiAgICogQHJldHVybiB7REJSZWZ9XG4gICAqL1xuICBmdW5jdGlvbiBEQlJlZihjb2xsZWN0aW9uLCBvaWQsIGRiLCBmaWVsZHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2skOSh0aGlzLCBEQlJlZik7XG5cbiAgICAvLyBjaGVjayBpZiBuYW1lc3BhY2UgaGFzIGJlZW4gcHJvdmlkZWRcbiAgICB2YXIgcGFydHMgPSBjb2xsZWN0aW9uLnNwbGl0KCcuJyk7XG5cbiAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICBkYiA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICBjb2xsZWN0aW9uID0gcGFydHMuc2hpZnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMub2lkID0gb2lkO1xuICAgIHRoaXMuZGIgPSBkYjtcbiAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcyB8fCB7fTtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MkOShEQlJlZiwgW3tcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBvID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICRyZWY6IHRoaXMuY29sbGVjdGlvbixcbiAgICAgICAgJGlkOiB0aGlzLm9pZFxuICAgICAgfSwgdGhpcy5maWVsZHMpO1xuICAgICAgaWYgKHRoaXMuZGIgIT0gbnVsbCkgby4kZGIgPSB0aGlzLmRiO1xuICAgICAgcmV0dXJuIG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvRXh0ZW5kZWRKU09OKCkge1xuICAgICAgdmFyIG8gPSB7XG4gICAgICAgICRyZWY6IHRoaXMuY29sbGVjdGlvbixcbiAgICAgICAgJGlkOiB0aGlzLm9pZFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmRiKSBvLiRkYiA9IHRoaXMuZGI7XG4gICAgICBvID0gT2JqZWN0LmFzc2lnbihvLCB0aGlzLmZpZWxkcyk7XG4gICAgICByZXR1cm4gbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH1dLCBbe1xuICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jKSB7XG4gICAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGRvYyk7XG4gICAgICBbJyRyZWYnLCAnJGlkJywgJyRkYiddLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBjb3B5W2tdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IERCUmVmKGRvYy4kcmVmLCBkb2MuJGlkLCBkb2MuJGRiLCBjb3B5KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gREJSZWY7XG59KCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEQlJlZi5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG4gIHZhbHVlOiAnREJSZWYnXG59KTsgLy8gdGhlIDEueCBwYXJzZXIgdXNlZCBhIFwibmFtZXNwYWNlXCIgcHJvcGVydHksIHdoaWxlIDQueCB1c2VzIFwiY29sbGVjdGlvblwiLiBUbyBlbnN1cmUgYmFja3dhcmRzXG4vLyBjb21wYXRpYmlsaXR5LCBsZXQncyBleHBvc2UgXCJuYW1lc3BhY2VcIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoREJSZWYucHJvdG90eXBlLCAnbmFtZXNwYWNlJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICB0aGlzLmNvbGxlY3Rpb24gPSB2YWw7XG4gIH0sXG4gIGNvbmZpZ3VyYWJsZTogZmFsc2Vcbn0pO1xudmFyIGRiX3JlZiA9IERCUmVmO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2skYShpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJGEodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MkYShDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJGEoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyRhKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgQnVmZmVyJDMgPSBidWZmZXIuQnVmZmVyO1xuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIEJpbmFyeSB0eXBlLlxuICovXG5cbnZhciBCaW5hcnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgQmluYXJ5IHR5cGVcbiAgICpcbiAgICogU3ViIHR5cGVzXG4gICAqICAtICoqQlNPTi5CU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQqKiwgZGVmYXVsdCBCU09OIHR5cGUuXG4gICAqICAtICoqQlNPTi5CU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OKiosIEJTT04gZnVuY3Rpb24gdHlwZS5cbiAgICogIC0gKipCU09OLkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWSoqLCBCU09OIGJ5dGUgYXJyYXkgdHlwZS5cbiAgICogIC0gKipCU09OLkJTT05fQklOQVJZX1NVQlRZUEVfVVVJRCoqLCBCU09OIHV1aWQgdHlwZS5cbiAgICogIC0gKipCU09OLkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1KiosIEJTT04gbWQ1IHR5cGUuXG4gICAqICAtICoqQlNPTi5CU09OX0JJTkFSWV9TVUJUWVBFX1VTRVJfREVGSU5FRCoqLCBCU09OIHVzZXIgZGVmaW5lZCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIGEgYnVmZmVyIG9iamVjdCBjb250YWluaW5nIHRoZSBiaW5hcnkgZGF0YS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdWJUeXBlXSB0aGUgb3B0aW9uIGJpbmFyeSB0eXBlLlxuICAgKiBAcmV0dXJuIHtCaW5hcnl9XG4gICAqL1xuICBmdW5jdGlvbiBCaW5hcnkoYnVmZmVyJCQxLCBzdWJUeXBlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrJGEodGhpcywgQmluYXJ5KTtcblxuICAgIGlmIChidWZmZXIkJDEgIT0gbnVsbCAmJiAhKHR5cGVvZiBidWZmZXIkJDEgPT09ICdzdHJpbmcnKSAmJiAhQnVmZmVyJDMuaXNCdWZmZXIoYnVmZmVyJCQxKSAmJiAhKGJ1ZmZlciQkMSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpICYmICFBcnJheS5pc0FycmF5KGJ1ZmZlciQkMSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29ubHkgU3RyaW5nLCBCdWZmZXIsIFVpbnQ4QXJyYXkgb3IgQXJyYXkgYWNjZXB0ZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLnN1Yl90eXBlID0gc3ViVHlwZSA9PSBudWxsID8gQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUIDogc3ViVHlwZTtcbiAgICB0aGlzLnBvc2l0aW9uID0gMDtcblxuICAgIGlmIChidWZmZXIkJDEgIT0gbnVsbCAmJiAhKGJ1ZmZlciQkMSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgIC8vIE9ubHkgYWNjZXB0IEJ1ZmZlciwgVWludDhBcnJheSBvciBBcnJheXNcbiAgICAgIGlmICh0eXBlb2YgYnVmZmVyJCQxID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBEaWZmZXJlbnQgd2F5cyBvZiB3cml0aW5nIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZyBmb3IgdGhlIGRpZmZlcmVudCB0eXBlc1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyJDMuZnJvbShidWZmZXIkJDEpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyB8fCBBcnJheS5pc0FycmF5KGJ1ZmZlciQkMSkpIHtcbiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHdyaXRlU3RyaW5nVG9BcnJheShidWZmZXIkJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29ubHkgU3RyaW5nLCBCdWZmZXIsIFVpbnQ4QXJyYXkgb3IgQXJyYXkgYWNjZXB0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXIkJDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zaXRpb24gPSBidWZmZXIkJDEubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlciQzLmFsbG9jKEJpbmFyeS5CVUZGRVJfU0laRSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcihCaW5hcnkuQlVGRkVSX1NJWkUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KEJpbmFyeS5CVUZGRVJfU0laRSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgYmluYXJ5IHdpdGggYnl0ZV92YWx1ZS5cbiAgICpcbiAgICogQG1ldGhvZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnl0ZV92YWx1ZSBhIHNpbmdsZSBieXRlIHdlIHdpc2ggdG8gd3JpdGUuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzJGEoQmluYXJ5LCBbe1xuICAgIGtleTogXCJwdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHV0KGJ5dGVfdmFsdWUpIHtcbiAgICAgIC8vIElmIGl0J3MgYSBzdHJpbmcgYW5kIGEgaGFzIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyIHRocm93IGFuIGVycm9yXG4gICAgICBpZiAoYnl0ZV92YWx1ZVsnbGVuZ3RoJ10gIT0gbnVsbCAmJiB0eXBlb2YgYnl0ZV92YWx1ZSAhPT0gJ251bWJlcicgJiYgYnl0ZV92YWx1ZS5sZW5ndGggIT09IDEpIHRocm93IG5ldyBUeXBlRXJyb3IoJ29ubHkgYWNjZXB0cyBzaW5nbGUgY2hhcmFjdGVyIFN0cmluZywgVWludDhBcnJheSBvciBBcnJheScpO1xuICAgICAgaWYgKHR5cGVvZiBieXRlX3ZhbHVlICE9PSAnbnVtYmVyJyAmJiBieXRlX3ZhbHVlIDwgMCB8fCBieXRlX3ZhbHVlID4gMjU1KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdvbmx5IGFjY2VwdHMgbnVtYmVyIGluIGEgdmFsaWQgdW5zaWduZWQgYnl0ZSByYW5nZSAwLTI1NScpOyAvLyBEZWNvZGUgdGhlIGJ5dGUgdmFsdWUgb25jZVxuXG4gICAgICB2YXIgZGVjb2RlZF9ieXRlID0gbnVsbDtcblxuICAgICAgaWYgKHR5cGVvZiBieXRlX3ZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBkZWNvZGVkX2J5dGUgPSBieXRlX3ZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gICAgICB9IGVsc2UgaWYgKGJ5dGVfdmFsdWVbJ2xlbmd0aCddICE9IG51bGwpIHtcbiAgICAgICAgZGVjb2RlZF9ieXRlID0gYnl0ZV92YWx1ZVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlY29kZWRfYnl0ZSA9IGJ5dGVfdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPiB0aGlzLnBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSBkZWNvZGVkX2J5dGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIkMy5pc0J1ZmZlcih0aGlzLmJ1ZmZlcikpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgYWRkaXRpb25hbCBvdmVyZmxvdyBidWZmZXJcbiAgICAgICAgICB2YXIgYnVmZmVyJCQxID0gQnVmZmVyJDMuYWxsb2MoQmluYXJ5LkJVRkZFUl9TSVpFICsgdGhpcy5idWZmZXIubGVuZ3RoKTsgLy8gQ29tYmluZSB0aGUgdHdvIGJ1ZmZlcnMgdG9nZXRoZXJcblxuICAgICAgICAgIHRoaXMuYnVmZmVyLmNvcHkoYnVmZmVyJCQxLCAwLCAwLCB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyJCQxO1xuICAgICAgICAgIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSBkZWNvZGVkX2J5dGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9idWZmZXIgPSBudWxsOyAvLyBDcmVhdGUgYSBuZXcgYnVmZmVyICh0eXBlZCBvciBub3JtYWwgYXJyYXkpXG5cbiAgICAgICAgICBpZiAoaXNVaW50OEFycmF5KHRoaXMuYnVmZmVyKSkge1xuICAgICAgICAgICAgX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcihCaW5hcnkuQlVGRkVSX1NJWkUgKyB0aGlzLmJ1ZmZlci5sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2J1ZmZlciA9IG5ldyBBcnJheShCaW5hcnkuQlVGRkVSX1NJWkUgKyB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgIH0gLy8gV2UgbmVlZCB0byBjb3B5IGFsbCB0aGUgY29udGVudCB0byB0aGUgbmV3IGFycmF5XG5cblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5idWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9idWZmZXJbaV0gPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgICB9IC8vIFJlYXNzaWduIHRoZSBidWZmZXJcblxuXG4gICAgICAgICAgdGhpcy5idWZmZXIgPSBfYnVmZmVyOyAvLyBXcml0ZSB0aGUgYnl0ZVxuXG4gICAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IGRlY29kZWRfYnl0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgYSBidWZmZXIgb3Igc3RyaW5nIHRvIHRoZSBiaW5hcnkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHsoQnVmZmVyfHN0cmluZyl9IHN0cmluZyBhIHN0cmluZyBvciBidWZmZXIgdG8gYmUgd3JpdHRlbiB0byB0aGUgQmluYXJ5IEJTT04gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgc3BlY2lmeSB0aGUgYmluYXJ5IG9mIHdoZXJlIHRvIHdyaXRlIHRoZSBjb250ZW50LlxuICAgICAqIEByZXR1cm4ge251bGx9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3cml0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZShzdHJpbmcsIG9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gdHlwZW9mIG9mZnNldCA9PT0gJ251bWJlcicgPyBvZmZzZXQgOiB0aGlzLnBvc2l0aW9uOyAvLyBJZiB0aGUgYnVmZmVyIGlzIHRvIHNtYWxsIGxldCdzIGV4dGVuZCB0aGUgYnVmZmVyXG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPCBvZmZzZXQgKyBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIHZhciBidWZmZXIkJDEgPSBudWxsOyAvLyBJZiB3ZSBhcmUgaW4gbm9kZS5qc1xuXG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyJDMgIT09ICd1bmRlZmluZWQnICYmIEJ1ZmZlciQzLmlzQnVmZmVyKHRoaXMuYnVmZmVyKSkge1xuICAgICAgICAgIGJ1ZmZlciQkMSA9IEJ1ZmZlciQzLmFsbG9jKHRoaXMuYnVmZmVyLmxlbmd0aCArIHN0cmluZy5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuYnVmZmVyLmNvcHkoYnVmZmVyJCQxLCAwLCAwLCB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVWludDhBcnJheSh0aGlzLmJ1ZmZlcikpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYnVmZmVyXG4gICAgICAgICAgYnVmZmVyJCQxID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmxlbmd0aCArIHN0cmluZy5sZW5ndGgpKTsgLy8gQ29weSB0aGUgY29udGVudFxuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvc2l0aW9uOyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZmZlciQkMVtpXSA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBBc3NpZ24gdGhlIG5ldyBidWZmZXJcblxuXG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyJCQxO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIkMy5pc0J1ZmZlcihzdHJpbmcpICYmIEJ1ZmZlciQzLmlzQnVmZmVyKHRoaXMuYnVmZmVyKSkge1xuICAgICAgICBzdHJpbmcuY29weSh0aGlzLmJ1ZmZlciwgb2Zmc2V0LCAwLCBzdHJpbmcubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCArIHN0cmluZy5sZW5ndGggPiB0aGlzLnBvc2l0aW9uID8gb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aCA6IHRoaXMucG9zaXRpb247IC8vIG9mZnNldCA9IHN0cmluZy5sZW5ndGhcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyAmJiBCdWZmZXIkMy5pc0J1ZmZlcih0aGlzLmJ1ZmZlcikpIHtcbiAgICAgICAgdGhpcy5idWZmZXIud3JpdGUoc3RyaW5nLCBvZmZzZXQsICdiaW5hcnknKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCArIHN0cmluZy5sZW5ndGggPiB0aGlzLnBvc2l0aW9uID8gb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aCA6IHRoaXMucG9zaXRpb247IC8vIG9mZnNldCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKGlzVWludDhBcnJheShzdHJpbmcpIHx8IEFycmF5LmlzQXJyYXkoc3RyaW5nKSAmJiB0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc3RyaW5nLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHRoaXMuYnVmZmVyW29mZnNldCsrXSA9IHN0cmluZ1tfaV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gb2Zmc2V0ID4gdGhpcy5wb3NpdGlvbiA/IG9mZnNldCA6IHRoaXMucG9zaXRpb247XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHN0cmluZy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdGhpcy5idWZmZXJbb2Zmc2V0KytdID0gc3RyaW5nLmNoYXJDb2RlQXQoX2kyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBvZmZzZXQgPiB0aGlzLnBvc2l0aW9uID8gb2Zmc2V0IDogdGhpcy5wb3NpdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgKipsZW5ndGgqKiBieXRlcyBzdGFydGluZyBhdCAqKnBvc2l0aW9uKiouXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uIHJlYWQgZnJvbSB0aGUgZ2l2ZW4gcG9zaXRpb24gaW4gdGhlIEJpbmFyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQocG9zaXRpb24sIGxlbmd0aCkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoICYmIGxlbmd0aCA+IDAgPyBsZW5ndGggOiB0aGlzLnBvc2l0aW9uOyAvLyBMZXQncyByZXR1cm4gdGhlIGRhdGEgYmFzZWQgb24gdGhlIHR5cGUgd2UgaGF2ZVxuXG4gICAgICBpZiAodGhpcy5idWZmZXJbJ3NsaWNlJ10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICB9IC8vIENyZWF0ZSBhIGJ1ZmZlciB0byBrZWVwIHRoZSByZXN1bHRcblxuXG4gICAgICB2YXIgYnVmZmVyJCQxID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGxlbmd0aCkpIDogbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnVmZmVyJCQxW2ldID0gdGhpcy5idWZmZXJbcG9zaXRpb24rK107XG4gICAgICB9IC8vIFJldHVybiB0aGUgYnVmZmVyXG5cblxuICAgICAgcmV0dXJuIGJ1ZmZlciQkMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhpcyBiaW5hcnkgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoYXNSYXcpIHtcbiAgICAgIGFzUmF3ID0gYXNSYXcgPT0gbnVsbCA/IGZhbHNlIDogYXNSYXc7IC8vIE9wdGltaXplIHRvIHNlcmlhbGl6ZSBmb3IgdGhlIHNpdHVhdGlvbiB3aGVyZSB0aGUgZGF0YSA9PSBzaXplIG9mIGJ1ZmZlclxuXG4gICAgICBpZiAoYXNSYXcgJiYgdHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIkMy5pc0J1ZmZlcih0aGlzLmJ1ZmZlcikgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09PSB0aGlzLnBvc2l0aW9uKSByZXR1cm4gdGhpcy5idWZmZXI7IC8vIElmIGl0J3MgYSBub2RlLmpzIGJ1ZmZlciBvYmplY3RcblxuICAgICAgaWYgKHR5cGVvZiBCdWZmZXIkMyAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpKSB7XG4gICAgICAgIHJldHVybiBhc1JhdyA/IHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMucG9zaXRpb24pIDogdGhpcy5idWZmZXIudG9TdHJpbmcoJ2JpbmFyeScsIDAsIHRoaXMucG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFzUmF3KSB7XG4gICAgICAgICAgLy8gd2Ugc3VwcG9ydCB0aGUgc2xpY2UgY29tbWFuZCB1c2UgaXRcbiAgICAgICAgICBpZiAodGhpcy5idWZmZXJbJ3NsaWNlJ10gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMucG9zaXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYnVmZmVyIHRvIGNvcHkgY29udGVudCB0b1xuICAgICAgICAgICAgdmFyIG5ld0J1ZmZlciA9IGlzVWludDhBcnJheSh0aGlzLmJ1ZmZlcikgPyBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIodGhpcy5wb3NpdGlvbikpIDogbmV3IEFycmF5KHRoaXMucG9zaXRpb24pOyAvLyBDb3B5IGNvbnRlbnRcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvc2l0aW9uOyBpKyspIHtcbiAgICAgICAgICAgICAgbmV3QnVmZmVyW2ldID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICB9IC8vIFJldHVybiB0aGUgYnVmZmVyXG5cblxuICAgICAgICAgICAgcmV0dXJuIG5ld0J1ZmZlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRBcnJheXRvVXRmOEJpbmFyeVN0cmluZyh0aGlzLmJ1ZmZlciwgMCwgdGhpcy5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTGVuZ3RoLlxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGxlbmd0aCBvZiB0aGUgYmluYXJ5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGVuZ3RoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyICE9IG51bGwgPyB0aGlzLmJ1ZmZlci50b1N0cmluZygnYmFzZTY0JykgOiAnJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoZm9ybWF0KSB7XG4gICAgICByZXR1cm4gdGhpcy5idWZmZXIgIT0gbnVsbCA/IHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMucG9zaXRpb24pLnRvU3RyaW5nKGZvcm1hdCkgOiAnJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG4gICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpID8gdGhpcy5idWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpIDogQnVmZmVyJDMuZnJvbSh0aGlzLmJ1ZmZlcikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgdmFyIHN1YlR5cGUgPSBOdW1iZXIodGhpcy5zdWJfdHlwZSkudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJGJpbmFyeToge1xuICAgICAgICAgIGJhc2U2NDogYmFzZTY0U3RyaW5nLFxuICAgICAgICAgIHN1YlR5cGU6IHN1YlR5cGUubGVuZ3RoID09PSAxID8gJzAnICsgc3ViVHlwZSA6IHN1YlR5cGVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH1dLCBbe1xuICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jKSB7XG4gICAgICB2YXIgdHlwZSA9IGRvYy4kYmluYXJ5LnN1YlR5cGUgPyBwYXJzZUludChkb2MuJGJpbmFyeS5zdWJUeXBlLCAxNikgOiAwO1xuICAgICAgdmFyIGRhdGEgPSBCdWZmZXIkMy5mcm9tKGRvYy4kYmluYXJ5LmJhc2U2NCwgJ2Jhc2U2NCcpO1xuICAgICAgcmV0dXJuIG5ldyBCaW5hcnkoZGF0YSwgdHlwZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJpbmFyeTtcbn0oKTtcbi8qKlxuICogQmluYXJ5IGRlZmF1bHQgc3VidHlwZVxuICogQGlnbm9yZVxuICovXG5cblxudmFyIEJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVCA9IDA7XG5cbmZ1bmN0aW9uIGlzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBVaW50OEFycmF5XSc7XG59XG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuXG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nVG9BcnJheShkYXRhKSB7XG4gIC8vIENyZWF0ZSBhIGJ1ZmZlclxuICB2YXIgYnVmZmVyJCQxID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGRhdGEubGVuZ3RoKSkgOiBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpOyAvLyBXcml0ZSB0aGUgY29udGVudCB0byB0aGUgYnVmZmVyXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmZmVyJCQxW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICB9IC8vIFdyaXRlIHRoZSBzdHJpbmcgdG8gdGhlIGJ1ZmZlclxuXG5cbiAgcmV0dXJuIGJ1ZmZlciQkMTtcbn1cbi8qKlxuICogQ29udmVydCBBcnJheSBvdCBVaW50OEFycmF5IHRvIEJpbmFyeSBTdHJpbmdcbiAqXG4gKiBAaWdub3JlXG4gKi9cblxuXG5mdW5jdGlvbiBjb252ZXJ0QXJyYXl0b1V0ZjhCaW5hcnlTdHJpbmcoYnl0ZUFycmF5LCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlQXJyYXlbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuQmluYXJ5LkJVRkZFUl9TSVpFID0gMjU2O1xuLyoqXG4gKiBEZWZhdWx0IEJTT04gdHlwZVxuICpcbiAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuICoqL1xuXG5CaW5hcnkuU1VCVFlQRV9ERUZBVUxUID0gMDtcbi8qKlxuICogRnVuY3Rpb24gQlNPTiB0eXBlXG4gKlxuICogQGNsYXNzY29uc3RhbnQgU1VCVFlQRV9ERUZBVUxUXG4gKiovXG5cbkJpbmFyeS5TVUJUWVBFX0ZVTkNUSU9OID0gMTtcbi8qKlxuICogQnl0ZSBBcnJheSBCU09OIHR5cGVcbiAqXG4gKiBAY2xhc3Njb25zdGFudCBTVUJUWVBFX0RFRkFVTFRcbiAqKi9cblxuQmluYXJ5LlNVQlRZUEVfQllURV9BUlJBWSA9IDI7XG4vKipcbiAqIE9MRCBVVUlEIEJTT04gdHlwZVxuICpcbiAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuICoqL1xuXG5CaW5hcnkuU1VCVFlQRV9VVUlEX09MRCA9IDM7XG4vKipcbiAqIFVVSUQgQlNPTiB0eXBlXG4gKlxuICogQGNsYXNzY29uc3RhbnQgU1VCVFlQRV9ERUZBVUxUXG4gKiovXG5cbkJpbmFyeS5TVUJUWVBFX1VVSUQgPSA0O1xuLyoqXG4gKiBNRDUgQlNPTiB0eXBlXG4gKlxuICogQGNsYXNzY29uc3RhbnQgU1VCVFlQRV9ERUZBVUxUXG4gKiovXG5cbkJpbmFyeS5TVUJUWVBFX01ENSA9IDU7XG4vKipcbiAqIFVzZXIgQlNPTiB0eXBlXG4gKlxuICogQGNsYXNzY29uc3RhbnQgU1VCVFlQRV9ERUZBVUxUXG4gKiovXG5cbkJpbmFyeS5TVUJUWVBFX1VTRVJfREVGSU5FRCA9IDEyODtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCaW5hcnkucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuICB2YWx1ZTogJ0JpbmFyeSdcbn0pO1xudmFyIGJpbmFyeSA9IEJpbmFyeTtcblxudmFyIGNvbnN0YW50cyA9IHtcbiAgLy8gQlNPTiBNQVggVkFMVUVTXG4gIEJTT05fSU5UMzJfTUFYOiAweDdmZmZmZmZmLFxuICBCU09OX0lOVDMyX01JTjogLTB4ODAwMDAwMDAsXG4gIEJTT05fSU5UNjRfTUFYOiBNYXRoLnBvdygyLCA2MykgLSAxLFxuICBCU09OX0lOVDY0X01JTjogLU1hdGgucG93KDIsIDYzKSxcbiAgLy8gSlMgTUFYIFBSRUNJU0UgVkFMVUVTXG4gIEpTX0lOVF9NQVg6IDB4MjAwMDAwMDAwMDAwMDAsXG4gIC8vIEFueSBpbnRlZ2VyIHVwIHRvIDJeNTMgY2FuIGJlIHByZWNpc2VseSByZXByZXNlbnRlZCBieSBhIGRvdWJsZS5cbiAgSlNfSU5UX01JTjogLTB4MjAwMDAwMDAwMDAwMDAsXG4gIC8vIEFueSBpbnRlZ2VyIGRvd24gdG8gLTJeNTMgY2FuIGJlIHByZWNpc2VseSByZXByZXNlbnRlZCBieSBhIGRvdWJsZS5cblxuICAvKipcbiAgICogTnVtYmVyIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfTlVNQkVSXG4gICAqKi9cbiAgQlNPTl9EQVRBX05VTUJFUjogMSxcblxuICAvKipcbiAgICogU3RyaW5nIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfU1RSSU5HXG4gICAqKi9cbiAgQlNPTl9EQVRBX1NUUklORzogMixcblxuICAvKipcbiAgICogT2JqZWN0IEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfT0JKRUNUXG4gICAqKi9cbiAgQlNPTl9EQVRBX09CSkVDVDogMyxcblxuICAvKipcbiAgICogQXJyYXkgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9BUlJBWVxuICAgKiovXG4gIEJTT05fREFUQV9BUlJBWTogNCxcblxuICAvKipcbiAgICogQmluYXJ5IEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfQklOQVJZXG4gICAqKi9cbiAgQlNPTl9EQVRBX0JJTkFSWTogNSxcblxuICAvKipcbiAgICogQmluYXJ5IEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfVU5ERUZJTkVEXG4gICAqKi9cbiAgQlNPTl9EQVRBX1VOREVGSU5FRDogNixcblxuICAvKipcbiAgICogT2JqZWN0SWQgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9PSURcbiAgICoqL1xuICBCU09OX0RBVEFfT0lEOiA3LFxuXG4gIC8qKlxuICAgKiBCb29sZWFuIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfQk9PTEVBTlxuICAgKiovXG4gIEJTT05fREFUQV9CT09MRUFOOiA4LFxuXG4gIC8qKlxuICAgKiBEYXRlIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfREFURVxuICAgKiovXG4gIEJTT05fREFUQV9EQVRFOiA5LFxuXG4gIC8qKlxuICAgKiBudWxsIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfTlVMTFxuICAgKiovXG4gIEJTT05fREFUQV9OVUxMOiAxMCxcblxuICAvKipcbiAgICogUmVnRXhwIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfUkVHRVhQXG4gICAqKi9cbiAgQlNPTl9EQVRBX1JFR0VYUDogMTEsXG5cbiAgLyoqXG4gICAqIENvZGUgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9EQlBPSU5URVJcbiAgICoqL1xuICBCU09OX0RBVEFfREJQT0lOVEVSOiAxMixcblxuICAvKipcbiAgICogQ29kZSBCU09OIFR5cGVcbiAgICpcbiAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX0NPREVcbiAgICoqL1xuICBCU09OX0RBVEFfQ09ERTogMTMsXG5cbiAgLyoqXG4gICAqIFN5bWJvbCBCU09OIFR5cGVcbiAgICpcbiAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX1NZTUJPTFxuICAgKiovXG4gIEJTT05fREFUQV9TWU1CT0w6IDE0LFxuXG4gIC8qKlxuICAgKiBDb2RlIHdpdGggU2NvcGUgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9DT0RFX1dfU0NPUEVcbiAgICoqL1xuICBCU09OX0RBVEFfQ09ERV9XX1NDT1BFOiAxNSxcblxuICAvKipcbiAgICogMzIgYml0IEludGVnZXIgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9JTlRcbiAgICoqL1xuICBCU09OX0RBVEFfSU5UOiAxNixcblxuICAvKipcbiAgICogVGltZXN0YW1wIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfVElNRVNUQU1QXG4gICAqKi9cbiAgQlNPTl9EQVRBX1RJTUVTVEFNUDogMTcsXG5cbiAgLyoqXG4gICAqIExvbmcgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9MT05HXG4gICAqKi9cbiAgQlNPTl9EQVRBX0xPTkc6IDE4LFxuXG4gIC8qKlxuICAgKiBMb25nIEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfREVDSU1BTDEyOFxuICAgKiovXG4gIEJTT05fREFUQV9ERUNJTUFMMTI4OiAxOSxcblxuICAvKipcbiAgICogTWluS2V5IEJTT04gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfTUlOX0tFWVxuICAgKiovXG4gIEJTT05fREFUQV9NSU5fS0VZOiAweGZmLFxuXG4gIC8qKlxuICAgKiBNYXhLZXkgQlNPTiBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9NQVhfS0VZXG4gICAqKi9cbiAgQlNPTl9EQVRBX01BWF9LRVk6IDB4N2YsXG5cbiAgLyoqXG4gICAqIEJpbmFyeSBEZWZhdWx0IFR5cGVcbiAgICpcbiAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUXG4gICAqKi9cbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUOiAwLFxuXG4gIC8qKlxuICAgKiBCaW5hcnkgRnVuY3Rpb24gVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OXG4gICAqKi9cbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTjogMSxcblxuICAvKipcbiAgICogQmluYXJ5IEJ5dGUgQXJyYXkgVHlwZVxuICAgKlxuICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0JJTkFSWV9TVUJUWVBFX0JZVEVfQVJSQVlcbiAgICoqL1xuICBCU09OX0JJTkFSWV9TVUJUWVBFX0JZVEVfQVJSQVk6IDIsXG5cbiAgLyoqXG4gICAqIEJpbmFyeSBVVUlEIFR5cGVcbiAgICpcbiAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlEXG4gICAqKi9cbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlEOiAzLFxuXG4gIC8qKlxuICAgKiBCaW5hcnkgTUQ1IFR5cGVcbiAgICpcbiAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9CSU5BUllfU1VCVFlQRV9NRDVcbiAgICoqL1xuICBCU09OX0JJTkFSWV9TVUJUWVBFX01ENTogNCxcblxuICAvKipcbiAgICogQmluYXJ5IFVzZXIgRGVmaW5lZCBUeXBlXG4gICAqXG4gICAqIEBjbGFzc2NvbnN0YW50IEJTT05fQklOQVJZX1NVQlRZUEVfVVNFUl9ERUZJTkVEXG4gICAqKi9cbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQ6IDEyOFxufTtcblxuZnVuY3Rpb24gX3R5cGVvZiQyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQyID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDIob2JqKTsgfVxuLy8gY29uc3QgTWFwID0gcmVxdWlyZSgnLi9tYXAnKTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIEVKU09OXG4gKi9cbi8vIGFsbCB0aGUgdHlwZXMgd2hlcmUgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgc3BlY2lhbCBwcm9jZXNzaW5nIGFuZCBjYW4ganVzdCBwYXNzIHRoZSBFSlNPTlxuLy9zdHJhaWdodCB0byB0eXBlLmZyb21FeHRlbmRlZEpTT05cblxuXG52YXIga2V5c1RvQ29kZWNzID0ge1xuICAkb2lkOiBvYmplY3RpZCxcbiAgJGJpbmFyeTogYmluYXJ5LFxuICAkc3ltYm9sOiBzeW1ib2wsXG4gICRudW1iZXJJbnQ6IGludF8zMixcbiAgJG51bWJlckRlY2ltYWw6IGRlY2ltYWwxMjgsXG4gICRudW1iZXJEb3VibGU6IGRvdWJsZV8xLFxuICAkbnVtYmVyTG9uZzogbG9uZ18xLFxuICAkbWluS2V5OiBtaW5fa2V5LFxuICAkbWF4S2V5OiBtYXhfa2V5LFxuICAkcmVndWxhckV4cHJlc3Npb246IHJlZ2V4cCxcbiAgJHRpbWVzdGFtcDogdGltZXN0YW1wXG59O1xuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVZhbHVlKHNlbGYsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAob3B0aW9ucy5yZWxheGVkKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAvLyBpZiBpdCdzIGFuIGludGVnZXIsIHNob3VsZCBpbnRlcnByZXQgYXMgc21hbGxlc3QgQlNPTiBpbnRlZ2VyXG4gICAgLy8gdGhhdCBjYW4gcmVwcmVzZW50IGl0IGV4YWN0bHkuIChpZiBvdXQgb2YgcmFuZ2UsIGludGVycHJldCBhcyBkb3VibGUuKVxuXG5cbiAgICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPj0gQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gQlNPTl9JTlQzMl9NQVgpIHJldHVybiBuZXcgaW50XzMyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA+PSBCU09OX0lOVDY0X01JTiAmJiB2YWx1ZSA8PSBCU09OX0lOVDY0X01BWCkgcmV0dXJuIG5ldyBsb25nXzEuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgfSAvLyBJZiB0aGUgbnVtYmVyIGlzIGEgbm9uLWludGVnZXIgb3Igb3V0IG9mIGludGVnZXIgcmFuZ2UsIHNob3VsZCBpbnRlcnByZXQgYXMgQlNPTiBEb3VibGUuXG5cblxuICAgIHJldHVybiBuZXcgZG91YmxlXzEodmFsdWUpO1xuICB9IC8vIGZyb20gaGVyZSBvbiBvdXQgd2UncmUgbG9va2luZyBmb3IgYnNvbiB0eXBlcywgc28gYmFpbCBpZiBpdHMgbm90IGFuIG9iamVjdFxuXG5cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgX3R5cGVvZiQyKHZhbHVlKSAhPT0gJ29iamVjdCcpIHJldHVybiB2YWx1ZTsgLy8gdXBncmFkZSBkZXByZWNhdGVkIHVuZGVmaW5lZCB0byBudWxsXG5cbiAgaWYgKHZhbHVlLiR1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gay5zdGFydHNXaXRoKCckJykgJiYgdmFsdWVba10gIT0gbnVsbDtcbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGMgPSBrZXlzVG9Db2RlY3Nba2V5c1tpXV07XG4gICAgaWYgKGMpIHJldHVybiBjLmZyb21FeHRlbmRlZEpTT04odmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKHZhbHVlLiRkYXRlICE9IG51bGwpIHtcbiAgICB2YXIgZCA9IHZhbHVlLiRkYXRlO1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBpZiAodHlwZW9mIGQgPT09ICdzdHJpbmcnKSBkYXRlLnNldFRpbWUoRGF0ZS5wYXJzZShkKSk7ZWxzZSBpZiAobG9uZ18xLmlzTG9uZyhkKSkgZGF0ZS5zZXRUaW1lKGQudG9OdW1iZXIoKSk7ZWxzZSBpZiAodHlwZW9mIGQgPT09ICdudW1iZXInICYmIG9wdGlvbnMucmVsYXhlZCkgZGF0ZS5zZXRUaW1lKGQpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgaWYgKHZhbHVlLiRjb2RlICE9IG51bGwpIHtcbiAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKTtcblxuICAgIGlmICh2YWx1ZS4kc2NvcGUpIHtcbiAgICAgIGNvcHkuJHNjb3BlID0gZGVzZXJpYWxpemVWYWx1ZShzZWxmLCBudWxsLCB2YWx1ZS4kc2NvcGUpO1xuICAgIH1cblxuICAgIHJldHVybiBjb2RlLmZyb21FeHRlbmRlZEpTT04odmFsdWUpO1xuICB9XG5cbiAgaWYgKHZhbHVlLiRyZWYgIT0gbnVsbCB8fCB2YWx1ZS4kZGJQb2ludGVyICE9IG51bGwpIHtcbiAgICB2YXIgdiA9IHZhbHVlLiRyZWYgPyB2YWx1ZSA6IHZhbHVlLiRkYlBvaW50ZXI7IC8vIHdlIHJ1biBpbnRvIHRoaXMgaW4gYSBcImRlZ2VuZXJhdGUgRUpTT05cIiBjYXNlICh3aXRoICRpZCBhbmQgJHJlZiBvcmRlciBmbGlwcGVkKVxuICAgIC8vIGJlY2F1c2Ugb2YgdGhlIG9yZGVyIEpTT04ucGFyc2UgZ29lcyB0aHJvdWdoIHRoZSBkb2N1bWVudFxuXG4gICAgaWYgKHYgaW5zdGFuY2VvZiBkYl9yZWYpIHJldHVybiB2O1xuICAgIHZhciBkb2xsYXJLZXlzID0gT2JqZWN0LmtleXModikuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gay5zdGFydHNXaXRoKCckJyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgICBkb2xsYXJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChbJyRyZWYnLCAnJGlkJywgJyRkYiddLmluZGV4T2YoaykgPT09IC0xKSB2YWxpZCA9IGZhbHNlO1xuICAgIH0pOyAvLyBvbmx5IG1ha2UgREJSZWYgaWYgJCBrZXlzIGFyZSBhbGwgdmFsaWRcblxuICAgIGlmICh2YWxpZCkgcmV0dXJuIGRiX3JlZi5mcm9tRXh0ZW5kZWRKU09OKHYpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBQYXJzZSBhbiBFeHRlbmRlZCBKU09OIHN0cmluZywgY29uc3RydWN0aW5nIHRoZSBKYXZhU2NyaXB0IHZhbHVlIG9yIG9iamVjdCBkZXNjcmliZWQgYnkgdGhhdFxuICogc3RyaW5nLlxuICpcbiAqIEBtZW1iZXJvZiBFSlNPTlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVsYXhlZD10cnVlXSBBdHRlbXB0IHRvIHJldHVybiBuYXRpdmUgSlMgdHlwZXMgd2hlcmUgcG9zc2libGUsIHJhdGhlciB0aGFuIEJTT04gdHlwZXMgKGlmIHRydWUpXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHsgRUpTT04gfSA9IHJlcXVpcmUoJ2Jzb24nKTtcbiAqIGNvbnN0IHRleHQgPSAneyBcImludDMyXCI6IHsgXCIkbnVtYmVySW50XCI6IFwiMTBcIiB9IH0nO1xuICpcbiAqIC8vIHByaW50cyB7IGludDMyOiB7IFtTdHJpbmc6ICcxMCddIF9ic29udHlwZTogJ0ludDMyJywgdmFsdWU6ICcxMCcgfSB9XG4gKiBjb25zb2xlLmxvZyhFSlNPTi5wYXJzZSh0ZXh0LCB7IHJlbGF4ZWQ6IGZhbHNlIH0pKTtcbiAqXG4gKiAvLyBwcmludHMgeyBpbnQzMjogMTAgfVxuICogY29uc29sZS5sb2coRUpTT04ucGFyc2UodGV4dCkpO1xuICovXG5cblxuZnVuY3Rpb24gcGFyc2UodGV4dCwgb3B0aW9ucykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgcmVsYXhlZDogdHJ1ZVxuICB9LCBvcHRpb25zKTsgLy8gcmVsYXhlZCBpbXBsaWVzIG5vdCBzdHJpY3RcblxuICBpZiAodHlwZW9mIG9wdGlvbnMucmVsYXhlZCA9PT0gJ2Jvb2xlYW4nKSBvcHRpb25zLnN0cmljdCA9ICFvcHRpb25zLnJlbGF4ZWQ7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zdHJpY3QgPT09ICdib29sZWFuJykgb3B0aW9ucy5yZWxheGVkID0gIW9wdGlvbnMuc3RyaWN0O1xuICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZVZhbHVlKF90aGlzLCBrZXksIHZhbHVlLCBvcHRpb25zKTtcbiAgfSk7XG59IC8vXG4vLyBTZXJpYWxpemVyXG4vL1xuLy8gTUFYIElOVDMyIGJvdW5kYXJpZXNcblxuXG52YXIgQlNPTl9JTlQzMl9NQVggPSAweDdmZmZmZmZmLFxuICAgIEJTT05fSU5UMzJfTUlOID0gLTB4ODAwMDAwMDAsXG4gICAgQlNPTl9JTlQ2NF9NQVggPSAweDdmZmZmZmZmZmZmZmZmZmYsXG4gICAgQlNPTl9JTlQ2NF9NSU4gPSAtMHg4MDAwMDAwMDAwMDAwMDAwO1xuLyoqXG4gKiBDb252ZXJ0cyBhIEJTT04gZG9jdW1lbnQgdG8gYW4gRXh0ZW5kZWQgSlNPTiBzdHJpbmcsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHZhbHVlcyBpZiBhIHJlcGxhY2VyXG4gKiBmdW5jdGlvbiBpcyBzcGVjaWZpZWQgb3Igb3B0aW9uYWxseSBpbmNsdWRpbmcgb25seSB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMgaWYgYSByZXBsYWNlciBhcnJheVxuICogaXMgc3BlY2lmaWVkLlxuICpcbiAqIEBtZW1iZXJvZiBFSlNPTlxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGV4dGVuZGVkIEpTT05cbiAqIEBwYXJhbSB7ZnVuY3Rpb258YXJyYXl9IFtyZXBsYWNlcl0gQSBmdW5jdGlvbiB0aGF0IGFsdGVycyB0aGUgYmVoYXZpb3Igb2YgdGhlIHN0cmluZ2lmaWNhdGlvbiBwcm9jZXNzLCBvciBhbiBhcnJheSBvZiBTdHJpbmcgYW5kIE51bWJlciBvYmplY3RzIHRoYXQgc2VydmUgYXMgYSB3aGl0ZWxpc3QgZm9yIHNlbGVjdGluZy9maWx0ZXJpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZhbHVlIG9iamVjdCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgSlNPTiBzdHJpbmcuIElmIHRoaXMgdmFsdWUgaXMgbnVsbCBvciBub3QgcHJvdmlkZWQsIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgYXJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgSlNPTiBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW3NwYWNlXSBBIFN0cmluZyBvciBOdW1iZXIgb2JqZWN0IHRoYXQncyB1c2VkIHRvIGluc2VydCB3aGl0ZSBzcGFjZSBpbnRvIHRoZSBvdXRwdXQgSlNPTiBzdHJpbmcgZm9yIHJlYWRhYmlsaXR5IHB1cnBvc2VzLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5nc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWxheGVkPXRydWVdIEVuYWJsZWQgRXh0ZW5kZWQgSlNPTidzIGByZWxheGVkYCBtb2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IEVKU09OIH0gPSByZXF1aXJlKCdic29uJyk7XG4gKiBjb25zdCBJbnQzMiA9IHJlcXVpcmUoJ21vbmdvZGInKS5JbnQzMjtcbiAqIGNvbnN0IGRvYyA9IHsgaW50MzI6IG5ldyBJbnQzMigxMCkgfTtcbiAqXG4gKiAvLyBwcmludHMgJ3tcImludDMyXCI6e1wiJG51bWJlckludFwiOlwiMTBcIn19J1xuICogY29uc29sZS5sb2coRUpTT04uc3RyaW5naWZ5KGRvYywgeyByZWxheGVkOiBmYWxzZSB9KSk7XG4gKlxuICogLy8gcHJpbnRzICd7XCJpbnQzMlwiOjEwfSdcbiAqIGNvbnNvbGUubG9nKEVKU09OLnN0cmluZ2lmeShkb2MpKTtcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSwgb3B0aW9ucykge1xuICBpZiAoc3BhY2UgIT0gbnVsbCAmJiBfdHlwZW9mJDIoc3BhY2UpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSBzcGFjZTtcbiAgICBzcGFjZSA9IDA7XG4gIH1cblxuICBpZiAocmVwbGFjZXIgIT0gbnVsbCAmJiBfdHlwZW9mJDIocmVwbGFjZXIpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgcmVwbGFjZXIgPSBudWxsO1xuICAgIHNwYWNlID0gMDtcbiAgfVxuXG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgcmVsYXhlZDogdHJ1ZVxuICB9LCBvcHRpb25zKTtcbiAgdmFyIGRvYyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gc2VyaWFsaXplQXJyYXkodmFsdWUsIG9wdGlvbnMpIDogc2VyaWFsaXplRG9jdW1lbnQodmFsdWUsIG9wdGlvbnMpO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZG9jLCByZXBsYWNlciwgc3BhY2UpO1xufVxuLyoqXG4gKiBTZXJpYWxpemVzIGFuIG9iamVjdCB0byBhbiBFeHRlbmRlZCBKU09OIHN0cmluZywgYW5kIHJlcGFyc2UgaXQgYXMgYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqXG4gKiBAbWVtYmVyb2YgRUpTT05cbiAqIEBwYXJhbSB7b2JqZWN0fSBic29uIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzIHBhc3NlZCB0byB0aGUgYHN0cmluZ2lmeWAgZnVuY3Rpb25cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShic29uLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHJpbmdpZnkoYnNvbiwgb3B0aW9ucykpO1xufVxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYW4gRXh0ZW5kZWQgSlNPTiBvYmplY3QgaW50byBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggbmF0aXZlL0JTT04gdHlwZXNcbiAqXG4gKiBAbWVtYmVyb2YgRUpTT05cbiAqIEBwYXJhbSB7b2JqZWN0fSBlanNvbiBUaGUgRXh0ZW5kZWQgSlNPTiBvYmplY3QgdG8gZGVzZXJpYWxpemVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3MgcGFzc2VkIHRvIHRoZSBwYXJzZSBtZXRob2RcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplKGVqc29uLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gcGFyc2UoSlNPTi5zdHJpbmdpZnkoZWpzb24pLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplQXJyYXkoYXJyYXksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBzZXJpYWxpemVWYWx1ZSh2LCBvcHRpb25zKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldElTT1N0cmluZyhkYXRlKSB7XG4gIHZhciBpc29TdHIgPSBkYXRlLnRvSVNPU3RyaW5nKCk7IC8vIHdlIHNob3VsZCBvbmx5IHNob3cgbWlsbGlzZWNvbmRzIGluIHRpbWVzdGFtcCBpZiB0aGV5J3JlIG5vbi16ZXJvXG5cbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgIT09IDAgPyBpc29TdHIgOiBpc29TdHIuc2xpY2UoMCwgLTUpICsgJ1onO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiBzZXJpYWxpemVBcnJheSh2YWx1ZSwgb3B0aW9ucyk7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgdmFyIGRhdGVOdW0gPSB2YWx1ZS5nZXRUaW1lKCksXG4gICAgICAgIC8vIGlzIGl0IGluIHllYXIgcmFuZ2UgMTk3MC05OTk5P1xuICAgIGluUmFuZ2UgPSBkYXRlTnVtID4gLTEgJiYgZGF0ZU51bSA8IDI1MzQwMjMxODgwMDAwMDtcbiAgICByZXR1cm4gb3B0aW9ucy5yZWxheGVkICYmIGluUmFuZ2UgPyB7XG4gICAgICAkZGF0ZTogZ2V0SVNPU3RyaW5nKHZhbHVlKVxuICAgIH0gOiB7XG4gICAgICAkZGF0ZToge1xuICAgICAgICAkbnVtYmVyTG9uZzogdmFsdWUuZ2V0VGltZSgpLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIW9wdGlvbnMucmVsYXhlZCkge1xuICAgIC8vIGl0J3MgYW4gaW50ZWdlclxuICAgIGlmIChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUpIHtcbiAgICAgIHZhciBpbnQzMlJhbmdlID0gdmFsdWUgPj0gQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gQlNPTl9JTlQzMl9NQVgsXG4gICAgICAgICAgaW50NjRSYW5nZSA9IHZhbHVlID49IEJTT05fSU5UNjRfTUlOICYmIHZhbHVlIDw9IEJTT05fSU5UNjRfTUFYOyAvLyBpbnRlcnByZXQgYXMgYmVpbmcgb2YgdGhlIHNtYWxsZXN0IEJTT04gaW50ZWdlciB0eXBlIHRoYXQgY2FuIHJlcHJlc2VudCB0aGUgbnVtYmVyIGV4YWN0bHlcblxuICAgICAgaWYgKGludDMyUmFuZ2UpIHJldHVybiB7XG4gICAgICAgICRudW1iZXJJbnQ6IHZhbHVlLnRvU3RyaW5nKClcbiAgICAgIH07XG4gICAgICBpZiAoaW50NjRSYW5nZSkgcmV0dXJuIHtcbiAgICAgICAgJG51bWJlckxvbmc6IHZhbHVlLnRvU3RyaW5nKClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICRudW1iZXJEb3VibGU6IHZhbHVlLnRvU3RyaW5nKClcbiAgICB9O1xuICB9XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgdmFyIGZsYWdzID0gdmFsdWUuZmxhZ3M7XG5cbiAgICBpZiAoZmxhZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmxhZ3MgPSB2YWx1ZS50b1N0cmluZygpLm1hdGNoKC9bZ2ltdXldKiQvKVswXTtcbiAgICB9XG5cbiAgICB2YXIgcnggPSBuZXcgcmVnZXhwKHZhbHVlLnNvdXJjZSwgZmxhZ3MpO1xuICAgIHJldHVybiByeC50b0V4dGVuZGVkSlNPTigpO1xuICB9XG5cbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgX3R5cGVvZiQyKHZhbHVlKSA9PT0gJ29iamVjdCcpIHJldHVybiBzZXJpYWxpemVEb2N1bWVudCh2YWx1ZSwgb3B0aW9ucyk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIEJTT05fVFlQRV9NQVBQSU5HUyA9IHtcbiAgQmluYXJ5OiBmdW5jdGlvbiBCaW5hcnkobykge1xuICAgIHJldHVybiBuZXcgYmluYXJ5KG8udmFsdWUoKSwgby5zdWJ0eXBlKTtcbiAgfSxcbiAgQ29kZTogZnVuY3Rpb24gQ29kZShvKSB7XG4gICAgcmV0dXJuIG5ldyBjb2RlKG8uY29kZSwgby5zY29wZSk7XG4gIH0sXG4gIERCUmVmOiBmdW5jdGlvbiBEQlJlZihvKSB7XG4gICAgcmV0dXJuIG5ldyBkYl9yZWYoby5jb2xsZWN0aW9uIHx8IG8ubmFtZXNwYWNlLCBvLm9pZCwgby5kYiwgby5maWVsZHMpO1xuICB9LFxuICAvLyBcIm5hbWVzcGFjZVwiIGZvciAxLnggbGlicmFyeSBiYWNrd2FyZHMgY29tcGF0XG4gIERlY2ltYWwxMjg6IGZ1bmN0aW9uIERlY2ltYWwxMjgobykge1xuICAgIHJldHVybiBuZXcgZGVjaW1hbDEyOChvLmJ5dGVzKTtcbiAgfSxcbiAgRG91YmxlOiBmdW5jdGlvbiBEb3VibGUobykge1xuICAgIHJldHVybiBuZXcgZG91YmxlXzEoby52YWx1ZSk7XG4gIH0sXG4gIEludDMyOiBmdW5jdGlvbiBJbnQzMihvKSB7XG4gICAgcmV0dXJuIG5ldyBpbnRfMzIoby52YWx1ZSk7XG4gIH0sXG4gIExvbmc6IGZ1bmN0aW9uIExvbmcobykge1xuICAgIHJldHVybiBsb25nXzEuZnJvbUJpdHMoIC8vIHVuZGVyc2NvcmUgdmFyaWFudHMgZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIG8ubG93ICE9IG51bGwgPyBvLmxvdyA6IG8ubG93Xywgby5sb3cgIT0gbnVsbCA/IG8uaGlnaCA6IG8uaGlnaF8sIG8ubG93ICE9IG51bGwgPyBvLnVuc2lnbmVkIDogby51bnNpZ25lZF8pO1xuICB9LFxuICBNYXhLZXk6IGZ1bmN0aW9uIE1heEtleSgpIHtcbiAgICByZXR1cm4gbmV3IG1heF9rZXkoKTtcbiAgfSxcbiAgTWluS2V5OiBmdW5jdGlvbiBNaW5LZXkoKSB7XG4gICAgcmV0dXJuIG5ldyBtaW5fa2V5KCk7XG4gIH0sXG4gIE9iamVjdElEOiBmdW5jdGlvbiBPYmplY3RJRChvKSB7XG4gICAgcmV0dXJuIG5ldyBvYmplY3RpZChvKTtcbiAgfSxcbiAgT2JqZWN0SWQ6IGZ1bmN0aW9uIE9iamVjdElkKG8pIHtcbiAgICByZXR1cm4gbmV3IG9iamVjdGlkKG8pO1xuICB9LFxuICAvLyBzdXBwb3J0IDQuMC4wLzQuMC4xIGJlZm9yZSBfYnNvbnR5cGUgd2FzIHJldmVydGVkIGJhY2sgdG8gT2JqZWN0SURcbiAgQlNPTlJlZ0V4cDogZnVuY3Rpb24gQlNPTlJlZ0V4cChvKSB7XG4gICAgcmV0dXJuIG5ldyByZWdleHAoby5wYXR0ZXJuLCBvLm9wdGlvbnMpO1xuICB9LFxuICBTeW1ib2w6IGZ1bmN0aW9uIFN5bWJvbChvKSB7XG4gICAgcmV0dXJuIG5ldyBzeW1ib2woby52YWx1ZSk7XG4gIH0sXG4gIFRpbWVzdGFtcDogZnVuY3Rpb24gVGltZXN0YW1wKG8pIHtcbiAgICByZXR1cm4gdGltZXN0YW1wLmZyb21CaXRzKG8ubG93LCBvLmhpZ2gpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzZXJpYWxpemVEb2N1bWVudChkb2MsIG9wdGlvbnMpIHtcbiAgaWYgKGRvYyA9PSBudWxsIHx8IF90eXBlb2YkMihkb2MpICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IEVycm9yKCdub3QgYW4gb2JqZWN0IGluc3RhbmNlJyk7XG4gIHZhciBic29udHlwZSA9IGRvYy5fYnNvbnR5cGU7XG5cbiAgaWYgKHR5cGVvZiBic29udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBJdCdzIGEgcmVndWxhciBvYmplY3QuIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBpdHMgcHJvcGVydHkgdmFsdWVzLlxuICAgIHZhciBfZG9jID0ge307XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGRvYykge1xuICAgICAgX2RvY1tuYW1lXSA9IHNlcmlhbGl6ZVZhbHVlKGRvY1tuYW1lXSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9kb2M7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJzb250eXBlID09PSAnc3RyaW5nJykge1xuICAgIC8vIHRoZSBcImRvY3VtZW50XCIgaXMgcmVhbGx5IGp1c3QgYSBCU09OIHR5cGUgb2JqZWN0XG4gICAgdmFyIF9kb2MyID0gZG9jO1xuXG4gICAgaWYgKHR5cGVvZiBfZG9jMi50b0V4dGVuZGVkSlNPTiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gVGhlcmUncyBubyBFSlNPTiBzZXJpYWxpemF0aW9uIGZ1bmN0aW9uIG9uIHRoZSBvYmplY3QuIEl0J3MgcHJvYmFibHkgYW5cbiAgICAgIC8vIG9iamVjdCBjcmVhdGVkIGJ5IGEgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIGxpYnJhcnkgKG9yIGFub3RoZXIgbGlicmFyeSlcbiAgICAgIC8vIHRoYXQncyBkdWNrLXR5cGluZyBvYmplY3RzIHRvIGxvb2sgbGlrZSB0aGV5IHdlcmUgZ2VuZXJhdGVkIGJ5IHRoaXMgbGlicmFyeSkuXG4gICAgICAvLyBDb3B5IHRoZSBvYmplY3QgaW50byB0aGlzIGxpYnJhcnkncyB2ZXJzaW9uIG9mIHRoYXQgdHlwZS5cbiAgICAgIHZhciBtYXBwZXIgPSBCU09OX1RZUEVfTUFQUElOR1NbYnNvbnR5cGVdO1xuXG4gICAgICBpZiAoIW1hcHBlcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlY29nbml6ZWQgb3IgaW52YWxpZCBfYnNvbnR5cGU6ICcgKyBic29udHlwZSk7XG4gICAgICB9XG5cbiAgICAgIF9kb2MyID0gbWFwcGVyKF9kb2MyKTtcbiAgICB9IC8vIFR3byBCU09OIHR5cGVzIG1heSBoYXZlIG5lc3RlZCBvYmplY3RzIHRoYXQgbWF5IG5lZWQgdG8gYmUgc2VyaWFsaXplZCB0b29cblxuXG4gICAgaWYgKGJzb250eXBlID09PSAnQ29kZScgJiYgX2RvYzIuc2NvcGUpIHtcbiAgICAgIF9kb2MyID0gbmV3IGNvZGUoX2RvYzIuY29kZSwgc2VyaWFsaXplVmFsdWUoX2RvYzIuc2NvcGUsIG9wdGlvbnMpKTtcbiAgICB9IGVsc2UgaWYgKGJzb250eXBlID09PSAnREJSZWYnICYmIF9kb2MyLm9pZCkge1xuICAgICAgX2RvYzIgPSBuZXcgZGJfcmVmKF9kb2MyLmNvbGxlY3Rpb24sIHNlcmlhbGl6ZVZhbHVlKF9kb2MyLm9pZCwgb3B0aW9ucyksIF9kb2MyLmRiLCBfZG9jMi5maWVsZHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfZG9jMi50b0V4dGVuZGVkSlNPTihvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ19ic29udHlwZSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgd2FzOiAnICsgX3R5cGVvZiQyKGJzb250eXBlKSk7XG4gIH1cbn1cblxudmFyIGV4dGVuZGVkX2pzb24gPSB7XG4gIHBhcnNlOiBwYXJzZSxcbiAgZGVzZXJpYWxpemU6IGRlc2VyaWFsaXplLFxuICBzZXJpYWxpemU6IHNlcmlhbGl6ZSxcbiAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG5cbnZhciBGSVJTVF9CSVQgPSAweDgwO1xudmFyIEZJUlNUX1RXT19CSVRTID0gMHhjMDtcbnZhciBGSVJTVF9USFJFRV9CSVRTID0gMHhlMDtcbnZhciBGSVJTVF9GT1VSX0JJVFMgPSAweGYwO1xudmFyIEZJUlNUX0ZJVkVfQklUUyA9IDB4Zjg7XG52YXIgVFdPX0JJVF9DSEFSID0gMHhjMDtcbnZhciBUSFJFRV9CSVRfQ0hBUiA9IDB4ZTA7XG52YXIgRk9VUl9CSVRfQ0hBUiA9IDB4ZjA7XG52YXIgQ09OVElOVUlOR19DSEFSID0gMHg4MDtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgcGFzc2VkIGluIGJ5dGVzIGFyZSB2YWxpZCB1dGY4XG4gKiBAcGFyYW0ge0J1ZmZlcnxVaW50OEFycmF5fSBieXRlcyBBbiBhcnJheSBvZiA4LWJpdCBieXRlcy4gTXVzdCBiZSBpbmRleGFibGUgYW5kIGhhdmUgbGVuZ3RoIHByb3BlcnR5XG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgVGhlIGluZGV4IHRvIHN0YXJ0IHZhbGlkYXRpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgVGhlIGluZGV4IHRvIGVuZCB2YWxpZGF0aW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWxpZCB1dGY4XG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVVdGY4KGJ5dGVzLCBzdGFydCwgZW5kKSB7XG4gIHZhciBjb250aW51YXRpb24gPSAwO1xuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAxKSB7XG4gICAgdmFyIGJ5dGUgPSBieXRlc1tpXTtcblxuICAgIGlmIChjb250aW51YXRpb24pIHtcbiAgICAgIGlmICgoYnl0ZSAmIEZJUlNUX1RXT19CSVRTKSAhPT0gQ09OVElOVUlOR19DSEFSKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29udGludWF0aW9uIC09IDE7XG4gICAgfSBlbHNlIGlmIChieXRlICYgRklSU1RfQklUKSB7XG4gICAgICBpZiAoKGJ5dGUgJiBGSVJTVF9USFJFRV9CSVRTKSA9PT0gVFdPX0JJVF9DSEFSKSB7XG4gICAgICAgIGNvbnRpbnVhdGlvbiA9IDE7XG4gICAgICB9IGVsc2UgaWYgKChieXRlICYgRklSU1RfRk9VUl9CSVRTKSA9PT0gVEhSRUVfQklUX0NIQVIpIHtcbiAgICAgICAgY29udGludWF0aW9uID0gMjtcbiAgICAgIH0gZWxzZSBpZiAoKGJ5dGUgJiBGSVJTVF9GSVZFX0JJVFMpID09PSBGT1VSX0JJVF9DSEFSKSB7XG4gICAgICAgIGNvbnRpbnVhdGlvbiA9IDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICFjb250aW51YXRpb247XG59XG5cbnZhciB2YWxpZGF0ZVV0ZjhfMSA9IHZhbGlkYXRlVXRmODtcbnZhciB2YWxpZGF0ZV91dGY4ID0ge1xuICB2YWxpZGF0ZVV0Zjg6IHZhbGlkYXRlVXRmOF8xXG59O1xuXG52YXIgQnVmZmVyJDQgPSBidWZmZXIuQnVmZmVyO1xudmFyIHZhbGlkYXRlVXRmOCQxID0gdmFsaWRhdGVfdXRmOC52YWxpZGF0ZVV0Zjg7IC8vIEludGVybmFsIGxvbmcgdmVyc2lvbnNcblxudmFyIEpTX0lOVF9NQVhfTE9ORyA9IGxvbmdfMS5mcm9tTnVtYmVyKGNvbnN0YW50cy5KU19JTlRfTUFYKTtcbnZhciBKU19JTlRfTUlOX0xPTkcgPSBsb25nXzEuZnJvbU51bWJlcihjb25zdGFudHMuSlNfSU5UX01JTik7XG52YXIgZnVuY3Rpb25DYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZSQxKGJ1ZmZlciQkMSwgb3B0aW9ucywgaXNBcnJheSkge1xuICBvcHRpb25zID0gb3B0aW9ucyA9PSBudWxsID8ge30gOiBvcHRpb25zO1xuICB2YXIgaW5kZXggPSBvcHRpb25zICYmIG9wdGlvbnMuaW5kZXggPyBvcHRpb25zLmluZGV4IDogMDsgLy8gUmVhZCB0aGUgZG9jdW1lbnQgc2l6ZVxuXG4gIHZhciBzaXplID0gYnVmZmVyJCQxW2luZGV4XSB8IGJ1ZmZlciQkMVtpbmRleCArIDFdIDw8IDggfCBidWZmZXIkJDFbaW5kZXggKyAyXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCArIDNdIDw8IDI0O1xuXG4gIGlmIChzaXplIDwgNSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJzb24gc2l6ZSBtdXN0IGJlID49IDUsIGlzIFwiLmNvbmNhdChzaXplKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hbGxvd09iamVjdFNtYWxsZXJUaGFuQnVmZmVyU2l6ZSAmJiBidWZmZXIkJDEubGVuZ3RoIDwgc2l6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJ1ZmZlciBsZW5ndGggXCIuY29uY2F0KGJ1ZmZlciQkMS5sZW5ndGgsIFwiIG11c3QgYmUgPj0gYnNvbiBzaXplIFwiKS5jb25jYXQoc2l6ZSkpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLmFsbG93T2JqZWN0U21hbGxlclRoYW5CdWZmZXJTaXplICYmIGJ1ZmZlciQkMS5sZW5ndGggIT09IHNpemUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJidWZmZXIgbGVuZ3RoIFwiLmNvbmNhdChidWZmZXIkJDEubGVuZ3RoLCBcIiBtdXN0ID09PSBic29uIHNpemUgXCIpLmNvbmNhdChzaXplKSk7XG4gIH1cblxuICBpZiAoc2l6ZSArIGluZGV4ID4gYnVmZmVyJCQxLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIihic29uIHNpemUgXCIuY29uY2F0KHNpemUsIFwiICsgb3B0aW9ucy5pbmRleCBcIikuY29uY2F0KGluZGV4LCBcIiBtdXN0IGJlIDw9IGJ1ZmZlciBsZW5ndGggXCIpLmNvbmNhdChCdWZmZXIkNC5ieXRlTGVuZ3RoKGJ1ZmZlciQkMSksIFwiKVwiKSk7XG4gIH0gLy8gSWxsZWdhbCBlbmQgdmFsdWVcblxuXG4gIGlmIChidWZmZXIkJDFbaW5kZXggKyBzaXplIC0gMV0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmUgb2JqZWN0LCBzaXplZCBjb3JyZWN0bHksIHdpdGggYSBzcG90IGZvciBhbiBFT08sIGJ1dCB0aGUgRU9PIGlzbid0IDB4MDBcIik7XG4gIH0gLy8gU3RhcnQgZGVzZXJpYWxpenRpb25cblxuXG4gIHJldHVybiBkZXNlcmlhbGl6ZU9iamVjdChidWZmZXIkJDEsIGluZGV4LCBvcHRpb25zLCBpc0FycmF5KTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBpbmRleCwgb3B0aW9ucywgaXNBcnJheSkge1xuICB2YXIgZXZhbEZ1bmN0aW9ucyA9IG9wdGlvbnNbJ2V2YWxGdW5jdGlvbnMnXSA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zWydldmFsRnVuY3Rpb25zJ107XG4gIHZhciBjYWNoZUZ1bmN0aW9ucyA9IG9wdGlvbnNbJ2NhY2hlRnVuY3Rpb25zJ10gPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9uc1snY2FjaGVGdW5jdGlvbnMnXTtcbiAgdmFyIGNhY2hlRnVuY3Rpb25zQ3JjMzIgPSBvcHRpb25zWydjYWNoZUZ1bmN0aW9uc0NyYzMyJ10gPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9uc1snY2FjaGVGdW5jdGlvbnNDcmMzMiddO1xuICBpZiAoIWNhY2hlRnVuY3Rpb25zQ3JjMzIpIHZhciBjcmMzMiA9IG51bGw7XG4gIHZhciBmaWVsZHNBc1JhdyA9IG9wdGlvbnNbJ2ZpZWxkc0FzUmF3J10gPT0gbnVsbCA/IG51bGwgOiBvcHRpb25zWydmaWVsZHNBc1JhdyddOyAvLyBSZXR1cm4gcmF3IGJzb24gYnVmZmVyIGluc3RlYWQgb2YgcGFyc2luZyBpdFxuXG4gIHZhciByYXcgPSBvcHRpb25zWydyYXcnXSA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zWydyYXcnXTsgLy8gUmV0dXJuIEJTT05SZWdFeHAgb2JqZWN0cyBpbnN0ZWFkIG9mIG5hdGl2ZSByZWd1bGFyIGV4cHJlc3Npb25zXG5cbiAgdmFyIGJzb25SZWdFeHAgPSB0eXBlb2Ygb3B0aW9uc1snYnNvblJlZ0V4cCddID09PSAnYm9vbGVhbicgPyBvcHRpb25zWydic29uUmVnRXhwJ10gOiBmYWxzZTsgLy8gQ29udHJvbHMgdGhlIHByb21vdGlvbiBvZiB2YWx1ZXMgdnMgd3JhcHBlciBjbGFzc2VzXG5cbiAgdmFyIHByb21vdGVCdWZmZXJzID0gb3B0aW9uc1sncHJvbW90ZUJ1ZmZlcnMnXSA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zWydwcm9tb3RlQnVmZmVycyddO1xuICB2YXIgcHJvbW90ZUxvbmdzID0gb3B0aW9uc1sncHJvbW90ZUxvbmdzJ10gPT0gbnVsbCA/IHRydWUgOiBvcHRpb25zWydwcm9tb3RlTG9uZ3MnXTtcbiAgdmFyIHByb21vdGVWYWx1ZXMgPSBvcHRpb25zWydwcm9tb3RlVmFsdWVzJ10gPT0gbnVsbCA/IHRydWUgOiBvcHRpb25zWydwcm9tb3RlVmFsdWVzJ107IC8vIFNldCB0aGUgc3RhcnQgaW5kZXhcblxuICB2YXIgc3RhcnRJbmRleCA9IGluZGV4OyAvLyBWYWxpZGF0ZSB0aGF0IHdlIGhhdmUgYXQgbGVhc3QgNCBieXRlcyBvZiBidWZmZXJcblxuICBpZiAoYnVmZmVyJCQxLmxlbmd0aCA8IDUpIHRocm93IG5ldyBFcnJvcignY29ycnVwdCBic29uIG1lc3NhZ2UgPCA1IGJ5dGVzIGxvbmcnKTsgLy8gUmVhZCB0aGUgZG9jdW1lbnQgc2l6ZVxuXG4gIHZhciBzaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIEVuc3VyZSBidWZmZXIgaXMgdmFsaWQgc2l6ZVxuXG4gIGlmIChzaXplIDwgNSB8fCBzaXplID4gYnVmZmVyJCQxLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdjb3JydXB0IGJzb24gbWVzc2FnZScpOyAvLyBDcmVhdGUgaG9sZGluZyBvYmplY3RcblxuICB2YXIgb2JqZWN0ID0gaXNBcnJheSA/IFtdIDoge307IC8vIFVzZWQgZm9yIGFycmF5cyB0byBza2lwIGhhdmluZyB0byBwZXJmb3JtIHV0ZjggZGVjb2RpbmdcblxuICB2YXIgYXJyYXlJbmRleCA9IDA7XG4gIHZhciBkb25lID0gZmFsc2U7IC8vIFdoaWxlIHdlIGhhdmUgbW9yZSBsZWZ0IGRhdGEgbGVmdCBrZWVwIHBhcnNpbmdcblxuICB3aGlsZSAoIWRvbmUpIHtcbiAgICAvLyBSZWFkIHRoZSB0eXBlXG4gICAgdmFyIGVsZW1lbnRUeXBlID0gYnVmZmVyJCQxW2luZGV4KytdOyAvLyBJZiB3ZSBnZXQgYSB6ZXJvIGl0J3MgdGhlIGxhc3QgYnl0ZSwgZXhpdFxuXG4gICAgaWYgKGVsZW1lbnRUeXBlID09PSAwKSBicmVhazsgLy8gR2V0IHRoZSBzdGFydCBzZWFyY2ggaW5kZXhcblxuICAgIHZhciBpID0gaW5kZXg7IC8vIExvY2F0ZSB0aGUgZW5kIG9mIHRoZSBjIHN0cmluZ1xuXG4gICAgd2hpbGUgKGJ1ZmZlciQkMVtpXSAhPT0gMHgwMCAmJiBpIDwgYnVmZmVyJCQxLmxlbmd0aCkge1xuICAgICAgaSsrO1xuICAgIH0gLy8gSWYgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgZG9jdW1lbnRcblxuXG4gICAgaWYgKGkgPj0gQnVmZmVyJDQuYnl0ZUxlbmd0aChidWZmZXIkJDEpKSB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBCU09OIERvY3VtZW50OiBpbGxlZ2FsIENTdHJpbmcnKTtcbiAgICB2YXIgbmFtZSA9IGlzQXJyYXkgPyBhcnJheUluZGV4KysgOiBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaSk7XG4gICAgaW5kZXggPSBpICsgMTtcblxuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9TVFJJTkcpIHtcbiAgICAgIHZhciBzdHJpbmdTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG4gICAgICBpZiAoc3RyaW5nU2l6ZSA8PSAwIHx8IHN0cmluZ1NpemUgPiBidWZmZXIkJDEubGVuZ3RoIC0gaW5kZXggfHwgYnVmZmVyJCQxW2luZGV4ICsgc3RyaW5nU2l6ZSAtIDFdICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzdHJpbmcgbGVuZ3RoIGluIGJzb24nKTtcblxuICAgICAgaWYgKCF2YWxpZGF0ZVV0ZjgkMShidWZmZXIkJDEsIGluZGV4LCBpbmRleCArIHN0cmluZ1NpemUgLSAxKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVVRGLTggc3RyaW5nIGluIEJTT04gZG9jdW1lbnQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHMgPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaW5kZXggKyBzdHJpbmdTaXplIC0gMSk7XG4gICAgICBvYmplY3RbbmFtZV0gPSBzO1xuICAgICAgaW5kZXggPSBpbmRleCArIHN0cmluZ1NpemU7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9PSUQpIHtcbiAgICAgIHZhciBvaWQgPSBCdWZmZXIkNC5hbGxvYygxMik7XG4gICAgICBidWZmZXIkJDEuY29weShvaWQsIDAsIGluZGV4LCBpbmRleCArIDEyKTtcbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBvYmplY3RpZChvaWQpO1xuICAgICAgaW5kZXggPSBpbmRleCArIDEyO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfSU5UICYmIHByb21vdGVWYWx1ZXMgPT09IGZhbHNlKSB7XG4gICAgICBvYmplY3RbbmFtZV0gPSBuZXcgaW50XzMyKGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0KTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX0lOVCkge1xuICAgICAgb2JqZWN0W25hbWVdID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVIgJiYgcHJvbW90ZVZhbHVlcyA9PT0gZmFsc2UpIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBkb3VibGVfMShidWZmZXIkJDEucmVhZERvdWJsZUxFKGluZGV4KSk7XG4gICAgICBpbmRleCA9IGluZGV4ICsgODtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX05VTUJFUikge1xuICAgICAgb2JqZWN0W25hbWVdID0gYnVmZmVyJCQxLnJlYWREb3VibGVMRShpbmRleCk7XG4gICAgICBpbmRleCA9IGluZGV4ICsgODtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX0RBVEUpIHtcbiAgICAgIHZhciBsb3dCaXRzID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG4gICAgICB2YXIgaGlnaEJpdHMgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBEYXRlKG5ldyBsb25nXzEobG93Qml0cywgaGlnaEJpdHMpLnRvTnVtYmVyKCkpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQk9PTEVBTikge1xuICAgICAgaWYgKGJ1ZmZlciQkMVtpbmRleF0gIT09IDAgJiYgYnVmZmVyJCQxW2luZGV4XSAhPT0gMSkgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIGJvb2xlYW4gdHlwZSB2YWx1ZScpO1xuICAgICAgb2JqZWN0W25hbWVdID0gYnVmZmVyJCQxW2luZGV4KytdID09PSAxO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfT0JKRUNUKSB7XG4gICAgICB2YXIgX2luZGV4ID0gaW5kZXg7XG4gICAgICB2YXIgb2JqZWN0U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleF0gfCBidWZmZXIkJDFbaW5kZXggKyAxXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4ICsgMl0gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXggKyAzXSA8PCAyNDtcbiAgICAgIGlmIChvYmplY3RTaXplIDw9IDAgfHwgb2JqZWN0U2l6ZSA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCkgdGhyb3cgbmV3IEVycm9yKCdiYWQgZW1iZWRkZWQgZG9jdW1lbnQgbGVuZ3RoIGluIGJzb24nKTsgLy8gV2UgaGF2ZSBhIHJhdyB2YWx1ZVxuXG4gICAgICBpZiAocmF3KSB7XG4gICAgICAgIG9iamVjdFtuYW1lXSA9IGJ1ZmZlciQkMS5zbGljZShpbmRleCwgaW5kZXggKyBvYmplY3RTaXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtuYW1lXSA9IGRlc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwgX2luZGV4LCBvcHRpb25zLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gaW5kZXggKyBvYmplY3RTaXplO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQVJSQVkpIHtcbiAgICAgIHZhciBfaW5kZXgyID0gaW5kZXg7XG5cbiAgICAgIHZhciBfb2JqZWN0U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleF0gfCBidWZmZXIkJDFbaW5kZXggKyAxXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4ICsgMl0gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXggKyAzXSA8PCAyNDtcblxuICAgICAgdmFyIGFycmF5T3B0aW9ucyA9IG9wdGlvbnM7IC8vIFN0b3AgaW5kZXhcblxuICAgICAgdmFyIHN0b3BJbmRleCA9IGluZGV4ICsgX29iamVjdFNpemU7IC8vIEFsbCBlbGVtZW50cyBvZiBhcnJheSB0byBiZSByZXR1cm5lZCBhcyByYXcgYnNvblxuXG4gICAgICBpZiAoZmllbGRzQXNSYXcgJiYgZmllbGRzQXNSYXdbbmFtZV0pIHtcbiAgICAgICAgYXJyYXlPcHRpb25zID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgbiBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgYXJyYXlPcHRpb25zW25dID0gb3B0aW9uc1tuXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFycmF5T3B0aW9uc1sncmF3J10gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBvYmplY3RbbmFtZV0gPSBkZXNlcmlhbGl6ZU9iamVjdChidWZmZXIkJDEsIF9pbmRleDIsIGFycmF5T3B0aW9ucywgdHJ1ZSk7XG4gICAgICBpbmRleCA9IGluZGV4ICsgX29iamVjdFNpemU7XG4gICAgICBpZiAoYnVmZmVyJCQxW2luZGV4IC0gMV0gIT09IDApIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhcnJheSB0ZXJtaW5hdG9yIGJ5dGUnKTtcbiAgICAgIGlmIChpbmRleCAhPT0gc3RvcEluZGV4KSB0aHJvdyBuZXcgRXJyb3IoJ2NvcnJ1cHRlZCBhcnJheSBic29uJyk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9VTkRFRklORUQpIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX05VTEwpIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9MT05HKSB7XG4gICAgICAvLyBVbnBhY2sgdGhlIGxvdyBhbmQgaGlnaCBiaXRzXG4gICAgICB2YXIgX2xvd0JpdHMgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblxuICAgICAgdmFyIF9oaWdoQml0cyA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuXG4gICAgICB2YXIgbG9uZyQkMSA9IG5ldyBsb25nXzEoX2xvd0JpdHMsIF9oaWdoQml0cyk7IC8vIFByb21vdGUgdGhlIGxvbmcgaWYgcG9zc2libGVcblxuICAgICAgaWYgKHByb21vdGVMb25ncyAmJiBwcm9tb3RlVmFsdWVzID09PSB0cnVlKSB7XG4gICAgICAgIG9iamVjdFtuYW1lXSA9IGxvbmckJDEubGVzc1RoYW5PckVxdWFsKEpTX0lOVF9NQVhfTE9ORykgJiYgbG9uZyQkMS5ncmVhdGVyVGhhbk9yRXF1YWwoSlNfSU5UX01JTl9MT05HKSA/IGxvbmckJDEudG9OdW1iZXIoKSA6IGxvbmckJDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RbbmFtZV0gPSBsb25nJCQxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfREVDSU1BTDEyOCkge1xuICAgICAgLy8gQnVmZmVyIHRvIGNvbnRhaW4gdGhlIGRlY2ltYWwgYnl0ZXNcbiAgICAgIHZhciBieXRlcyA9IEJ1ZmZlciQ0LmFsbG9jKDE2KTsgLy8gQ29weSB0aGUgbmV4dCAxNiBieXRlcyBpbnRvIHRoZSBieXRlcyBidWZmZXJcblxuICAgICAgYnVmZmVyJCQxLmNvcHkoYnl0ZXMsIDAsIGluZGV4LCBpbmRleCArIDE2KTsgLy8gVXBkYXRlIGluZGV4XG5cbiAgICAgIGluZGV4ID0gaW5kZXggKyAxNjsgLy8gQXNzaWduIHRoZSBuZXcgRGVjaW1hbDEyOCB2YWx1ZVxuXG4gICAgICB2YXIgZGVjaW1hbDEyOCQkMSA9IG5ldyBkZWNpbWFsMTI4KGJ5dGVzKTsgLy8gSWYgd2UgaGF2ZSBhbiBhbHRlcm5hdGl2ZSBtYXBwZXIgdXNlIHRoYXRcblxuICAgICAgb2JqZWN0W25hbWVdID0gZGVjaW1hbDEyOCQkMS50b09iamVjdCA/IGRlY2ltYWwxMjgkJDEudG9PYmplY3QoKSA6IGRlY2ltYWwxMjgkJDE7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9CSU5BUlkpIHtcbiAgICAgIHZhciBiaW5hcnlTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG4gICAgICB2YXIgdG90YWxCaW5hcnlTaXplID0gYmluYXJ5U2l6ZTtcbiAgICAgIHZhciBzdWJUeXBlID0gYnVmZmVyJCQxW2luZGV4KytdOyAvLyBEaWQgd2UgaGF2ZSBhIG5lZ2F0aXZlIGJpbmFyeSBzaXplLCB0aHJvd1xuXG4gICAgICBpZiAoYmluYXJ5U2l6ZSA8IDApIHRocm93IG5ldyBFcnJvcignTmVnYXRpdmUgYmluYXJ5IHR5cGUgZWxlbWVudCBzaXplIGZvdW5kJyk7IC8vIElzIHRoZSBsZW5ndGggbG9uZ2VyIHRoYW4gdGhlIGRvY3VtZW50XG5cbiAgICAgIGlmIChiaW5hcnlTaXplID4gQnVmZmVyJDQuYnl0ZUxlbmd0aChidWZmZXIkJDEpKSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSB0eXBlIHNpemUgbGFyZ2VyIHRoYW4gZG9jdW1lbnQgc2l6ZScpOyAvLyBEZWNvZGUgYXMgcmF3IEJ1ZmZlciBvYmplY3QgaWYgb3B0aW9ucyBzcGVjaWZpZXMgaXRcblxuICAgICAgaWYgKGJ1ZmZlciQkMVsnc2xpY2UnXSAhPSBudWxsKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgc3VidHlwZSAyIHNraXAgdGhlIDQgYnl0ZXMgZm9yIHRoZSBzaXplXG4gICAgICAgIGlmIChzdWJUeXBlID09PSBiaW5hcnkuU1VCVFlQRV9CWVRFX0FSUkFZKSB7XG4gICAgICAgICAgYmluYXJ5U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuICAgICAgICAgIGlmIChiaW5hcnlTaXplIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSBiaW5hcnkgdHlwZSBlbGVtZW50IHNpemUgZm91bmQgZm9yIHN1YnR5cGUgMHgwMicpO1xuICAgICAgICAgIGlmIChiaW5hcnlTaXplID4gdG90YWxCaW5hcnlTaXplIC0gNCkgdGhyb3cgbmV3IEVycm9yKCdCaW5hcnkgdHlwZSB3aXRoIHN1YnR5cGUgMHgwMiBjb250YWlucyB0byBsb25nIGJpbmFyeSBzaXplJyk7XG4gICAgICAgICAgaWYgKGJpbmFyeVNpemUgPCB0b3RhbEJpbmFyeVNpemUgLSA0KSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSB0eXBlIHdpdGggc3VidHlwZSAweDAyIGNvbnRhaW5zIHRvIHNob3J0IGJpbmFyeSBzaXplJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbW90ZUJ1ZmZlcnMgJiYgcHJvbW90ZVZhbHVlcykge1xuICAgICAgICAgIG9iamVjdFtuYW1lXSA9IGJ1ZmZlciQkMS5zbGljZShpbmRleCwgaW5kZXggKyBiaW5hcnlTaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgYmluYXJ5KGJ1ZmZlciQkMS5zbGljZShpbmRleCwgaW5kZXggKyBiaW5hcnlTaXplKSwgc3ViVHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfYnVmZmVyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGJpbmFyeVNpemUpKSA6IG5ldyBBcnJheShiaW5hcnlTaXplKTsgLy8gSWYgd2UgaGF2ZSBzdWJ0eXBlIDIgc2tpcCB0aGUgNCBieXRlcyBmb3IgdGhlIHNpemVcblxuXG4gICAgICAgIGlmIChzdWJUeXBlID09PSBiaW5hcnkuU1VCVFlQRV9CWVRFX0FSUkFZKSB7XG4gICAgICAgICAgYmluYXJ5U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuICAgICAgICAgIGlmIChiaW5hcnlTaXplIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSBiaW5hcnkgdHlwZSBlbGVtZW50IHNpemUgZm91bmQgZm9yIHN1YnR5cGUgMHgwMicpO1xuICAgICAgICAgIGlmIChiaW5hcnlTaXplID4gdG90YWxCaW5hcnlTaXplIC0gNCkgdGhyb3cgbmV3IEVycm9yKCdCaW5hcnkgdHlwZSB3aXRoIHN1YnR5cGUgMHgwMiBjb250YWlucyB0byBsb25nIGJpbmFyeSBzaXplJyk7XG4gICAgICAgICAgaWYgKGJpbmFyeVNpemUgPCB0b3RhbEJpbmFyeVNpemUgLSA0KSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSB0eXBlIHdpdGggc3VidHlwZSAweDAyIGNvbnRhaW5zIHRvIHNob3J0IGJpbmFyeSBzaXplJyk7XG4gICAgICAgIH0gLy8gQ29weSB0aGUgZGF0YVxuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJpbmFyeVNpemU7IGkrKykge1xuICAgICAgICAgIF9idWZmZXJbaV0gPSBidWZmZXIkJDFbaW5kZXggKyBpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9tb3RlQnVmZmVycyAmJiBwcm9tb3RlVmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0W25hbWVdID0gX2J1ZmZlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgYmluYXJ5KF9idWZmZXIsIHN1YlR5cGUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFVwZGF0ZSB0aGUgaW5kZXhcblxuXG4gICAgICBpbmRleCA9IGluZGV4ICsgYmluYXJ5U2l6ZTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX1JFR0VYUCAmJiBic29uUmVnRXhwID09PSBmYWxzZSkge1xuICAgICAgLy8gR2V0IHRoZSBzdGFydCBzZWFyY2ggaW5kZXhcbiAgICAgIGkgPSBpbmRleDsgLy8gTG9jYXRlIHRoZSBlbmQgb2YgdGhlIGMgc3RyaW5nXG5cbiAgICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfSAvLyBJZiBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBkb2N1bWVudFxuXG5cbiAgICAgIGlmIChpID49IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQmFkIEJTT04gRG9jdW1lbnQ6IGlsbGVnYWwgQ1N0cmluZycpOyAvLyBSZXR1cm4gdGhlIEMgc3RyaW5nXG5cbiAgICAgIHZhciBzb3VyY2UgPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaSk7IC8vIENyZWF0ZSB0aGUgcmVnZXhwXG5cbiAgICAgIGluZGV4ID0gaSArIDE7IC8vIEdldCB0aGUgc3RhcnQgc2VhcmNoIGluZGV4XG5cbiAgICAgIGkgPSBpbmRleDsgLy8gTG9jYXRlIHRoZSBlbmQgb2YgdGhlIGMgc3RyaW5nXG5cbiAgICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfSAvLyBJZiBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBkb2N1bWVudFxuXG5cbiAgICAgIGlmIChpID49IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQmFkIEJTT04gRG9jdW1lbnQ6IGlsbGVnYWwgQ1N0cmluZycpOyAvLyBSZXR1cm4gdGhlIEMgc3RyaW5nXG5cbiAgICAgIHZhciByZWdFeHBPcHRpb25zID0gYnVmZmVyJCQxLnRvU3RyaW5nKCd1dGY4JywgaW5kZXgsIGkpO1xuICAgICAgaW5kZXggPSBpICsgMTsgLy8gRm9yIGVhY2ggb3B0aW9uIGFkZCB0aGUgY29ycmVzcG9uZGluZyBvbmUgZm9yIGphdmFzY3JpcHRcblxuICAgICAgdmFyIG9wdGlvbnNBcnJheSA9IG5ldyBBcnJheShyZWdFeHBPcHRpb25zLmxlbmd0aCk7IC8vIFBhcnNlIG9wdGlvbnNcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlZ0V4cE9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3dpdGNoIChyZWdFeHBPcHRpb25zW2ldKSB7XG4gICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICBvcHRpb25zQXJyYXlbaV0gPSAnbSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgb3B0aW9uc0FycmF5W2ldID0gJ2cnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgIG9wdGlvbnNBcnJheVtpXSA9ICdpJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBSZWdFeHAoc291cmNlLCBvcHRpb25zQXJyYXkuam9pbignJykpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfUkVHRVhQICYmIGJzb25SZWdFeHAgPT09IHRydWUpIHtcbiAgICAgIC8vIEdldCB0aGUgc3RhcnQgc2VhcmNoIGluZGV4XG4gICAgICBpID0gaW5kZXg7IC8vIExvY2F0ZSB0aGUgZW5kIG9mIHRoZSBjIHN0cmluZ1xuXG4gICAgICB3aGlsZSAoYnVmZmVyJCQxW2ldICE9PSAweDAwICYmIGkgPCBidWZmZXIkJDEubGVuZ3RoKSB7XG4gICAgICAgIGkrKztcbiAgICAgIH0gLy8gSWYgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgZG9jdW1lbnRcblxuXG4gICAgICBpZiAoaSA+PSBidWZmZXIkJDEubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBCU09OIERvY3VtZW50OiBpbGxlZ2FsIENTdHJpbmcnKTsgLy8gUmV0dXJuIHRoZSBDIHN0cmluZ1xuXG4gICAgICB2YXIgX3NvdXJjZSA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpKTtcblxuICAgICAgaW5kZXggPSBpICsgMTsgLy8gR2V0IHRoZSBzdGFydCBzZWFyY2ggaW5kZXhcblxuICAgICAgaSA9IGluZGV4OyAvLyBMb2NhdGUgdGhlIGVuZCBvZiB0aGUgYyBzdHJpbmdcblxuICAgICAgd2hpbGUgKGJ1ZmZlciQkMVtpXSAhPT0gMHgwMCAmJiBpIDwgYnVmZmVyJCQxLmxlbmd0aCkge1xuICAgICAgICBpKys7XG4gICAgICB9IC8vIElmIGFyZSBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgdGhlcmUgaXMgYSBwcm9ibGVtIHdpdGggdGhlIGRvY3VtZW50XG5cblxuICAgICAgaWYgKGkgPj0gYnVmZmVyJCQxLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdCYWQgQlNPTiBEb2N1bWVudDogaWxsZWdhbCBDU3RyaW5nJyk7IC8vIFJldHVybiB0aGUgQyBzdHJpbmdcblxuICAgICAgdmFyIF9yZWdFeHBPcHRpb25zID0gYnVmZmVyJCQxLnRvU3RyaW5nKCd1dGY4JywgaW5kZXgsIGkpO1xuXG4gICAgICBpbmRleCA9IGkgKyAxOyAvLyBTZXQgdGhlIG9iamVjdFxuXG4gICAgICBvYmplY3RbbmFtZV0gPSBuZXcgcmVnZXhwKF9zb3VyY2UsIF9yZWdFeHBPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX1NZTUJPTCkge1xuICAgICAgdmFyIF9zdHJpbmdTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cbiAgICAgIGlmIChfc3RyaW5nU2l6ZSA8PSAwIHx8IF9zdHJpbmdTaXplID4gYnVmZmVyJCQxLmxlbmd0aCAtIGluZGV4IHx8IGJ1ZmZlciQkMVtpbmRleCArIF9zdHJpbmdTaXplIC0gMV0gIT09IDApIHRocm93IG5ldyBFcnJvcignYmFkIHN0cmluZyBsZW5ndGggaW4gYnNvbicpOyAvLyBzeW1ib2wgaXMgZGVwcmVjYXRlZCAtIHVwZ3JhZGUgdG8gc3RyaW5nLlxuXG4gICAgICBvYmplY3RbbmFtZV0gPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaW5kZXggKyBfc3RyaW5nU2l6ZSAtIDEpO1xuICAgICAgaW5kZXggPSBpbmRleCArIF9zdHJpbmdTaXplO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfVElNRVNUQU1QKSB7XG4gICAgICB2YXIgX2xvd0JpdHMyID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cbiAgICAgIHZhciBfaGlnaEJpdHMyID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyB0aW1lc3RhbXAoX2xvd0JpdHMyLCBfaGlnaEJpdHMyKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVkpIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBtaW5fa2V5KCk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9NQVhfS0VZKSB7XG4gICAgICBvYmplY3RbbmFtZV0gPSBuZXcgbWF4X2tleSgpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERSkge1xuICAgICAgdmFyIF9zdHJpbmdTaXplMiA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuXG4gICAgICBpZiAoX3N0cmluZ1NpemUyIDw9IDAgfHwgX3N0cmluZ1NpemUyID4gYnVmZmVyJCQxLmxlbmd0aCAtIGluZGV4IHx8IGJ1ZmZlciQkMVtpbmRleCArIF9zdHJpbmdTaXplMiAtIDFdICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzdHJpbmcgbGVuZ3RoIGluIGJzb24nKTtcbiAgICAgIHZhciBmdW5jdGlvblN0cmluZyA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpbmRleCArIF9zdHJpbmdTaXplMiAtIDEpOyAvLyBJZiB3ZSBhcmUgZXZhbHVhdGluZyB0aGUgZnVuY3Rpb25zXG5cbiAgICAgIGlmIChldmFsRnVuY3Rpb25zKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgY2FjaGUgZW5hYmxlZCBsZXQncyBsb29rIGZvciB0aGUgbWQ1IG9mIHRoZSBmdW5jdGlvbiBpbiB0aGUgY2FjaGVcbiAgICAgICAgaWYgKGNhY2hlRnVuY3Rpb25zKSB7XG4gICAgICAgICAgdmFyIGhhc2ggPSBjYWNoZUZ1bmN0aW9uc0NyYzMyID8gY3JjMzIoZnVuY3Rpb25TdHJpbmcpIDogZnVuY3Rpb25TdHJpbmc7IC8vIEdvdCB0byBkbyB0aGlzIHRvIGF2b2lkIFY4IGRlb3B0aW1pemluZyB0aGUgY2FsbCBkdWUgdG8gZmluZGluZyBldmFsXG5cbiAgICAgICAgICBvYmplY3RbbmFtZV0gPSBpc29sYXRlRXZhbFdpdGhIYXNoKGZ1bmN0aW9uQ2FjaGUsIGhhc2gsIGZ1bmN0aW9uU3RyaW5nLCBvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdFtuYW1lXSA9IGlzb2xhdGVFdmFsKGZ1bmN0aW9uU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W25hbWVdID0gbmV3IGNvZGUoZnVuY3Rpb25TdHJpbmcpO1xuICAgICAgfSAvLyBVcGRhdGUgcGFyc2UgaW5kZXggcG9zaXRpb25cblxuXG4gICAgICBpbmRleCA9IGluZGV4ICsgX3N0cmluZ1NpemUyO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERV9XX1NDT1BFKSB7XG4gICAgICB2YXIgdG90YWxTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIEVsZW1lbnQgY2Fubm90IGJlIHNob3J0ZXIgdGhhbiB0b3RhbFNpemUgKyBzdHJpbmdTaXplICsgZG9jdW1lbnRTaXplICsgdGVybWluYXRvclxuXG4gICAgICBpZiAodG90YWxTaXplIDwgNCArIDQgKyA0ICsgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvZGVfd19zY29wZSB0b3RhbCBzaXplIHNob3J0ZXIgbWluaW11bSBleHBlY3RlZCBsZW5ndGgnKTtcbiAgICAgIH0gLy8gR2V0IHRoZSBjb2RlIHN0cmluZyBzaXplXG5cblxuICAgICAgdmFyIF9zdHJpbmdTaXplMyA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0OyAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgc3RyaW5nXG5cblxuICAgICAgaWYgKF9zdHJpbmdTaXplMyA8PSAwIHx8IF9zdHJpbmdTaXplMyA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCB8fCBidWZmZXIkJDFbaW5kZXggKyBfc3RyaW5nU2l6ZTMgLSAxXSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdiYWQgc3RyaW5nIGxlbmd0aCBpbiBic29uJyk7IC8vIEphdmFzY3JpcHQgZnVuY3Rpb25cblxuICAgICAgdmFyIF9mdW5jdGlvblN0cmluZyA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpbmRleCArIF9zdHJpbmdTaXplMyAtIDEpOyAvLyBVcGRhdGUgcGFyc2UgaW5kZXggcG9zaXRpb25cblxuXG4gICAgICBpbmRleCA9IGluZGV4ICsgX3N0cmluZ1NpemUzOyAvLyBQYXJzZSB0aGUgZWxlbWVudFxuXG4gICAgICB2YXIgX2luZGV4MyA9IGluZGV4OyAvLyBEZWNvZGUgdGhlIHNpemUgb2YgdGhlIG9iamVjdCBkb2N1bWVudFxuXG4gICAgICB2YXIgX29iamVjdFNpemUyID0gYnVmZmVyJCQxW2luZGV4XSB8IGJ1ZmZlciQkMVtpbmRleCArIDFdIDw8IDggfCBidWZmZXIkJDFbaW5kZXggKyAyXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCArIDNdIDw8IDI0OyAvLyBEZWNvZGUgdGhlIHNjb3BlIG9iamVjdFxuXG5cbiAgICAgIHZhciBzY29wZU9iamVjdCA9IGRlc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwgX2luZGV4Mywgb3B0aW9ucywgZmFsc2UpOyAvLyBBZGp1c3QgdGhlIGluZGV4XG5cbiAgICAgIGluZGV4ID0gaW5kZXggKyBfb2JqZWN0U2l6ZTI7IC8vIENoZWNrIGlmIGZpZWxkIGxlbmd0aCBpcyB0byBzaG9ydFxuXG4gICAgICBpZiAodG90YWxTaXplIDwgNCArIDQgKyBfb2JqZWN0U2l6ZTIgKyBfc3RyaW5nU2l6ZTMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb2RlX3dfc2NvcGUgdG90YWwgc2l6ZSBpcyB0byBzaG9ydCwgdHJ1bmNhdGluZyBzY29wZScpO1xuICAgICAgfSAvLyBDaGVjayBpZiB0b3RhbFNpemUgZmllbGQgaXMgdG8gbG9uZ1xuXG5cbiAgICAgIGlmICh0b3RhbFNpemUgPiA0ICsgNCArIF9vYmplY3RTaXplMiArIF9zdHJpbmdTaXplMykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvZGVfd19zY29wZSB0b3RhbCBzaXplIGlzIHRvIGxvbmcsIGNsaXBzIG91dGVyIGRvY3VtZW50Jyk7XG4gICAgICB9IC8vIElmIHdlIGFyZSBldmFsdWF0aW5nIHRoZSBmdW5jdGlvbnNcblxuXG4gICAgICBpZiAoZXZhbEZ1bmN0aW9ucykge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGNhY2hlIGVuYWJsZWQgbGV0J3MgbG9vayBmb3IgdGhlIG1kNSBvZiB0aGUgZnVuY3Rpb24gaW4gdGhlIGNhY2hlXG4gICAgICAgIGlmIChjYWNoZUZ1bmN0aW9ucykge1xuICAgICAgICAgIHZhciBfaGFzaCA9IGNhY2hlRnVuY3Rpb25zQ3JjMzIgPyBjcmMzMihfZnVuY3Rpb25TdHJpbmcpIDogX2Z1bmN0aW9uU3RyaW5nOyAvLyBHb3QgdG8gZG8gdGhpcyB0byBhdm9pZCBWOCBkZW9wdGltaXppbmcgdGhlIGNhbGwgZHVlIHRvIGZpbmRpbmcgZXZhbFxuXG5cbiAgICAgICAgICBvYmplY3RbbmFtZV0gPSBpc29sYXRlRXZhbFdpdGhIYXNoKGZ1bmN0aW9uQ2FjaGUsIF9oYXNoLCBfZnVuY3Rpb25TdHJpbmcsIG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqZWN0W25hbWVdID0gaXNvbGF0ZUV2YWwoX2Z1bmN0aW9uU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iamVjdFtuYW1lXS5zY29wZSA9IHNjb3BlT2JqZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W25hbWVdID0gbmV3IGNvZGUoX2Z1bmN0aW9uU3RyaW5nLCBzY29wZU9iamVjdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9EQlBPSU5URVIpIHtcbiAgICAgIC8vIEdldCB0aGUgY29kZSBzdHJpbmcgc2l6ZVxuICAgICAgdmFyIF9zdHJpbmdTaXplNCA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0OyAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgc3RyaW5nXG5cblxuICAgICAgaWYgKF9zdHJpbmdTaXplNCA8PSAwIHx8IF9zdHJpbmdTaXplNCA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCB8fCBidWZmZXIkJDFbaW5kZXggKyBfc3RyaW5nU2l6ZTQgLSAxXSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdiYWQgc3RyaW5nIGxlbmd0aCBpbiBic29uJyk7IC8vIE5hbWVzcGFjZVxuXG4gICAgICBpZiAoIXZhbGlkYXRlVXRmOCQxKGJ1ZmZlciQkMSwgaW5kZXgsIGluZGV4ICsgX3N0cmluZ1NpemU0IC0gMSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFVURi04IHN0cmluZyBpbiBCU09OIGRvY3VtZW50Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lc3BhY2UgPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaW5kZXggKyBfc3RyaW5nU2l6ZTQgLSAxKTsgLy8gVXBkYXRlIHBhcnNlIGluZGV4IHBvc2l0aW9uXG5cbiAgICAgIGluZGV4ID0gaW5kZXggKyBfc3RyaW5nU2l6ZTQ7IC8vIFJlYWQgdGhlIG9pZFxuXG4gICAgICB2YXIgb2lkQnVmZmVyID0gQnVmZmVyJDQuYWxsb2MoMTIpO1xuICAgICAgYnVmZmVyJCQxLmNvcHkob2lkQnVmZmVyLCAwLCBpbmRleCwgaW5kZXggKyAxMik7XG5cbiAgICAgIHZhciBfb2lkID0gbmV3IG9iamVjdGlkKG9pZEJ1ZmZlcik7IC8vIFVwZGF0ZSB0aGUgaW5kZXhcblxuXG4gICAgICBpbmRleCA9IGluZGV4ICsgMTI7IC8vIFVwZ3JhZGUgdG8gREJSZWYgdHlwZVxuXG4gICAgICBvYmplY3RbbmFtZV0gPSBuZXcgZGJfcmVmKG5hbWVzcGFjZSwgX29pZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGV0ZWN0ZWQgdW5rbm93biBCU09OIHR5cGUgJyArIGVsZW1lbnRUeXBlLnRvU3RyaW5nKDE2KSArICcgZm9yIGZpZWxkbmFtZSBcIicgKyBuYW1lICsgJ1wiLCBhcmUgeW91IHVzaW5nIHRoZSBsYXRlc3QgQlNPTiBwYXJzZXI/Jyk7XG4gICAgfVxuICB9IC8vIENoZWNrIGlmIHRoZSBkZXNlcmlhbGl6YXRpb24gd2FzIGFnYWluc3QgYSB2YWxpZCBhcnJheS9vYmplY3RcblxuXG4gIGlmIChzaXplICE9PSBpbmRleCAtIHN0YXJ0SW5kZXgpIHtcbiAgICBpZiAoaXNBcnJheSkgdGhyb3cgbmV3IEVycm9yKCdjb3JydXB0IGFycmF5IGJzb24nKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvcnJ1cHQgb2JqZWN0IGJzb24nKTtcbiAgfSAvLyBjaGVjayBpZiBvYmplY3QncyAkIGtleXMgYXJlIHRob3NlIG9mIGEgREJSZWZcblxuXG4gIHZhciBkb2xsYXJLZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gay5zdGFydHNXaXRoKCckJyk7XG4gIH0pO1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICBkb2xsYXJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoWyckcmVmJywgJyRpZCcsICckZGInXS5pbmRleE9mKGspID09PSAtMSkgdmFsaWQgPSBmYWxzZTtcbiAgfSk7IC8vIGlmIGEgJGtleSBub3QgaW4gXCIkcmVmXCIsIFwiJGlkXCIsIFwiJGRiXCIsIGRvbid0IG1ha2UgYSBEQlJlZlxuXG4gIGlmICghdmFsaWQpIHJldHVybiBvYmplY3Q7XG5cbiAgaWYgKG9iamVjdFsnJGlkJ10gIT0gbnVsbCAmJiBvYmplY3RbJyRyZWYnXSAhPSBudWxsKSB7XG4gICAgdmFyIGNvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvYmplY3QpO1xuICAgIGRlbGV0ZSBjb3B5LiRyZWY7XG4gICAgZGVsZXRlIGNvcHkuJGlkO1xuICAgIGRlbGV0ZSBjb3B5LiRkYjtcbiAgICByZXR1cm4gbmV3IGRiX3JlZihvYmplY3QuJHJlZiwgb2JqZWN0LiRpZCwgb2JqZWN0LiRkYiB8fCBudWxsLCBjb3B5KTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG4vKipcbiAqIEVuc3VyZSBldmFsIGlzIGlzb2xhdGVkLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gaXNvbGF0ZUV2YWxXaXRoSGFzaChmdW5jdGlvbkNhY2hlLCBoYXNoLCBmdW5jdGlvblN0cmluZywgb2JqZWN0KSB7XG4gIC8vIENvbnRhaW5zIHRoZSB2YWx1ZSB3ZSBhcmUgZ29pbmcgdG8gc2V0XG4gIHZhciB2YWx1ZSA9IG51bGw7IC8vIENoZWNrIGZvciBjYWNoZSBoaXQsIGV2YWwgaWYgbWlzc2luZyBhbmQgcmV0dXJuIGNhY2hlZCBmdW5jdGlvblxuXG4gIGlmIChmdW5jdGlvbkNhY2hlW2hhc2hdID09IG51bGwpIHtcbiAgICBldmFsKCd2YWx1ZSA9ICcgKyBmdW5jdGlvblN0cmluZyk7XG4gICAgZnVuY3Rpb25DYWNoZVtoYXNoXSA9IHZhbHVlO1xuICB9IC8vIFNldCB0aGUgb2JqZWN0XG5cblxuICByZXR1cm4gZnVuY3Rpb25DYWNoZVtoYXNoXS5iaW5kKG9iamVjdCk7XG59XG4vKipcbiAqIEVuc3VyZSBldmFsIGlzIGlzb2xhdGVkLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gaXNvbGF0ZUV2YWwoZnVuY3Rpb25TdHJpbmcpIHtcbiAgLy8gQ29udGFpbnMgdGhlIHZhbHVlIHdlIGFyZSBnb2luZyB0byBzZXRcbiAgdmFyIHZhbHVlID0gbnVsbDsgLy8gRXZhbCB0aGUgZnVuY3Rpb25cblxuICBldmFsKCd2YWx1ZSA9ICcgKyBmdW5jdGlvblN0cmluZyk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIGRlc2VyaWFsaXplciA9IGRlc2VyaWFsaXplJDE7XG5cbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4vLyBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vXG4vLyAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4vLyAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy9cbi8vICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbi8vICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbi8vICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy9cbi8vICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgRmFpciBPYWtzIExhYnMsIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4vLyAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbi8vICAgIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuLy9cbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4vLyBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuLy8gQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRVxuLy8gTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuLy8gQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0Zcbi8vIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbi8vIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4vLyBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuLy8gUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4vL1xuLy9cbi8vIE1vZGlmaWNhdGlvbnMgdG8gd3JpdGVJRUVFNzU0IHRvIHN1cHBvcnQgbmVnYXRpdmUgemVyb2VzIG1hZGUgYnkgQnJpYW4gV2hpdGVcblxuZnVuY3Rpb24gcmVhZElFRUU3NTQoYnVmZmVyJCQxLCBvZmZzZXQsIGVuZGlhbiwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLFxuICAgICAgbSxcbiAgICAgIGJCRSA9IGVuZGlhbiA9PT0gJ2JpZycsXG4gICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxuICAgICAgbkJpdHMgPSAtNyxcbiAgICAgIGkgPSBiQkUgPyAwIDogbkJ5dGVzIC0gMSxcbiAgICAgIGQgPSBiQkUgPyAxIDogLTEsXG4gICAgICBzID0gYnVmZmVyJCQxW29mZnNldCArIGldO1xuICBpICs9IGQ7XG4gIGUgPSBzICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIHMgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gZUxlbjtcblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlciQkMVtvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7XG4gIH1cblxuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXIkJDFbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge1xuICB9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IChzID8gLTEgOiAxKSAqIEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfVxuXG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB3cml0ZUlFRUU3NTQoYnVmZmVyJCQxLCB2YWx1ZSwgb2Zmc2V0LCBlbmRpYW4sIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSxcbiAgICAgIG0sXG4gICAgICBjLFxuICAgICAgYkJFID0gZW5kaWFuID09PSAnYmlnJyxcbiAgICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXG4gICAgICBlTWF4ID0gKDEgPDwgZUxlbikgLSAxLFxuICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXG4gICAgICBydCA9IG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwLFxuICAgICAgaSA9IGJCRSA/IG5CeXRlcyAtIDEgOiAwLFxuICAgICAgZCA9IGJCRSA/IC0xIDogMSxcbiAgICAgIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMik7XG5cbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSkgbSA9IDA7XG5cbiAgd2hpbGUgKG1MZW4gPj0gOCkge1xuICAgIGJ1ZmZlciQkMVtvZmZzZXQgKyBpXSA9IG0gJiAweGZmO1xuICAgIGkgKz0gZDtcbiAgICBtIC89IDI1NjtcbiAgICBtTGVuIC09IDg7XG4gIH1cblxuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgaWYgKGlzTmFOKHZhbHVlKSkgZSArPSA4O1xuICBlTGVuICs9IG1MZW47XG5cbiAgd2hpbGUgKGVMZW4gPiAwKSB7XG4gICAgYnVmZmVyJCQxW29mZnNldCArIGldID0gZSAmIDB4ZmY7XG4gICAgaSArPSBkO1xuICAgIGUgLz0gMjU2O1xuICAgIGVMZW4gLT0gODtcbiAgfVxuXG4gIGJ1ZmZlciQkMVtvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn1cblxudmFyIGZsb2F0X3BhcnNlciA9IHtcbiAgcmVhZElFRUU3NTQ6IHJlYWRJRUVFNzU0LFxuICB3cml0ZUlFRUU3NTQ6IHdyaXRlSUVFRTc1NFxufTtcblxuZnVuY3Rpb24gX3R5cGVvZiQzKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQzID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMyA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDMob2JqKTsgfVxuXG52YXIgQnVmZmVyJDUgPSBidWZmZXIuQnVmZmVyO1xudmFyIHdyaXRlSUVFRTc1NCQxID0gZmxvYXRfcGFyc2VyLndyaXRlSUVFRTc1NDtcbnZhciBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmckMSA9IHV0aWxzLm5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZztcbnZhciByZWdleHAkMSA9IC9cXHgwMC87IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG52YXIgaWdub3JlS2V5cyA9IG5ldyBTZXQoWyckZGInLCAnJHJlZicsICckaWQnLCAnJGNsdXN0ZXJUaW1lJ10pOyAvLyBUbyBlbnN1cmUgdGhhdCAwLjQgb2Ygbm9kZSB3b3JrcyBjb3JyZWN0bHlcblxudmFyIGlzRGF0ZSQxID0gZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIF90eXBlb2YkMyhkKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59O1xuXG52YXIgaXNSZWdFeHAkMSA9IGZ1bmN0aW9uIGlzUmVnRXhwKGQpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG5mdW5jdGlvbiBzZXJpYWxpemVTdHJpbmcoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICAvLyBFbmNvZGUgU3RyaW5nIHR5cGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9TVFJJTkc7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzICsgMTtcbiAgYnVmZmVyJCQxW2luZGV4IC0gMV0gPSAwOyAvLyBXcml0ZSB0aGUgc3RyaW5nXG5cbiAgdmFyIHNpemUgPSBidWZmZXIkJDEud3JpdGUodmFsdWUsIGluZGV4ICsgNCwgJ3V0ZjgnKTsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIHN0cmluZyB0byBidWZmZXJcblxuICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgKyAxID4+IDI0ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4ICsgMl0gPSBzaXplICsgMSA+PiAxNiAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCArIDFdID0gc2l6ZSArIDEgPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICsgMSAmIDB4ZmY7IC8vIFVwZGF0ZSBpbmRleFxuXG4gIGluZGV4ID0gaW5kZXggKyA0ICsgc2l6ZTsgLy8gV3JpdGUgemVyb1xuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplTnVtYmVyKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcbiAgLy8gV2UgaGF2ZSBhbiBpbnRlZ2VyIHZhbHVlXG4gIGlmIChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUgJiYgdmFsdWUgPj0gY29uc3RhbnRzLkpTX0lOVF9NSU4gJiYgdmFsdWUgPD0gY29uc3RhbnRzLkpTX0lOVF9NQVgpIHtcbiAgICAvLyBJZiB0aGUgdmFsdWUgZml0cyBpbiAzMiBiaXRzIGVuY29kZSBhcyBpbnQsIGlmIGl0IGZpdHMgaW4gYSBkb3VibGVcbiAgICAvLyBlbmNvZGUgaXQgYXMgYSBkb3VibGUsIG90aGVyd2lzZSBsb25nXG4gICAgaWYgKHZhbHVlID49IGNvbnN0YW50cy5CU09OX0lOVDMyX01JTiAmJiB2YWx1ZSA8PSBjb25zdGFudHMuQlNPTl9JTlQzMl9NQVgpIHtcbiAgICAgIC8vIFNldCBpbnQgdHlwZSAzMiBiaXRzIG9yIGxlc3NcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfSU5UOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gICAgICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICAgICAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIGludCB2YWx1ZVxuXG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSAmIDB4ZmY7XG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSA+PiA4ICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDE2ICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDI0ICYgMHhmZjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID49IGNvbnN0YW50cy5KU19JTlRfTUlOICYmIHZhbHVlIDw9IGNvbnN0YW50cy5KU19JTlRfTUFYKSB7XG4gICAgICAvLyBFbmNvZGUgYXMgZG91YmxlXG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX05VTUJFUjsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuICAgICAgdmFyIF9udW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cbiAgICAgIGluZGV4ID0gaW5kZXggKyBfbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSBmbG9hdFxuXG4gICAgICB3cml0ZUlFRUU3NTQkMShidWZmZXIkJDEsIHZhbHVlLCBpbmRleCwgJ2xpdHRsZScsIDUyLCA4KTsgLy8gQWp1c3QgaW5kZXhcblxuICAgICAgaW5kZXggPSBpbmRleCArIDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldCBsb25nIHR5cGVcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfTE9ORzsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuICAgICAgdmFyIF9udW1iZXJPZldyaXR0ZW5CeXRlczIgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXG4gICAgICBpbmRleCA9IGluZGV4ICsgX251bWJlck9mV3JpdHRlbkJ5dGVzMjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG4gICAgICB2YXIgbG9uZ1ZhbCA9IGxvbmdfMS5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICAgIHZhciBsb3dCaXRzID0gbG9uZ1ZhbC5nZXRMb3dCaXRzKCk7XG4gICAgICB2YXIgaGlnaEJpdHMgPSBsb25nVmFsLmdldEhpZ2hCaXRzKCk7IC8vIEVuY29kZSBsb3cgYml0c1xuXG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gOCAmIDB4ZmY7XG4gICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzID4+IDE2ICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzICYgMHhmZjtcbiAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzID4+IDggJiAweGZmO1xuICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMTYgJiAweGZmO1xuICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMjQgJiAweGZmO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFbmNvZGUgYXMgZG91YmxlXG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVI7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgICB2YXIgX251bWJlck9mV3JpdHRlbkJ5dGVzMyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cbiAgICBpbmRleCA9IGluZGV4ICsgX251bWJlck9mV3JpdHRlbkJ5dGVzMztcbiAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSBmbG9hdFxuXG4gICAgd3JpdGVJRUVFNzU0JDEoYnVmZmVyJCQxLCB2YWx1ZSwgaW5kZXgsICdsaXR0bGUnLCA1MiwgOCk7IC8vIEFqdXN0IGluZGV4XG5cbiAgICBpbmRleCA9IGluZGV4ICsgODtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplTnVsbChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIFNldCBsb25nIHR5cGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9OVUxMOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVCb29sZWFuKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcbiAgLy8gV3JpdGUgdGhlIHR5cGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9CT09MRUFOOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gRW5jb2RlIHRoZSBib29sZWFuIHZhbHVlXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gdmFsdWUgPyAxIDogMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVEYXRlKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcbiAgLy8gV3JpdGUgdGhlIHR5cGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9EQVRFOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIGRhdGVcblxuICB2YXIgZGF0ZUluTWlsaXMgPSBsb25nXzEuZnJvbU51bWJlcih2YWx1ZS5nZXRUaW1lKCkpO1xuICB2YXIgbG93Qml0cyA9IGRhdGVJbk1pbGlzLmdldExvd0JpdHMoKTtcbiAgdmFyIGhpZ2hCaXRzID0gZGF0ZUluTWlsaXMuZ2V0SGlnaEJpdHMoKTsgLy8gRW5jb2RlIGxvdyBiaXRzXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gbG93Qml0cyAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzID4+IDI0ICYgMHhmZjsgLy8gRW5jb2RlIGhpZ2ggYml0c1xuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMjQgJiAweGZmO1xuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVJlZ0V4cChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIFdyaXRlIHRoZSB0eXBlXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfUkVHRVhQOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcblxuICBpZiAodmFsdWUuc291cmNlICYmIHZhbHVlLnNvdXJjZS5tYXRjaChyZWdleHAkMSkgIT0gbnVsbCkge1xuICAgIHRocm93IEVycm9yKCd2YWx1ZSAnICsgdmFsdWUuc291cmNlICsgJyBtdXN0IG5vdCBjb250YWluIG51bGwgYnl0ZXMnKTtcbiAgfSAvLyBBZGp1c3QgdGhlIGluZGV4XG5cblxuICBpbmRleCA9IGluZGV4ICsgYnVmZmVyJCQxLndyaXRlKHZhbHVlLnNvdXJjZSwgaW5kZXgsICd1dGY4Jyk7IC8vIFdyaXRlIHplcm9cblxuICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwOyAvLyBXcml0ZSB0aGUgcGFyYW1ldGVyc1xuXG4gIGlmICh2YWx1ZS5pZ25vcmVDYXNlKSBidWZmZXIkJDFbaW5kZXgrK10gPSAweDY5OyAvLyBpXG5cbiAgaWYgKHZhbHVlLmdsb2JhbCkgYnVmZmVyJCQxW2luZGV4KytdID0gMHg3MzsgLy8gc1xuXG4gIGlmICh2YWx1ZS5tdWx0aWxpbmUpIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4NmQ7IC8vIG1cbiAgLy8gQWRkIGVuZGluZyB6ZXJvXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMHgwMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVCU09OUmVnRXhwKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcbiAgLy8gV3JpdGUgdGhlIHR5cGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9SRUdFWFA7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBDaGVjayB0aGUgcGF0dGVybiBmb3IgMCBieXRlc1xuXG4gIGlmICh2YWx1ZS5wYXR0ZXJuLm1hdGNoKHJlZ2V4cCQxKSAhPSBudWxsKSB7XG4gICAgLy8gVGhlIEJTT04gc3BlYyBkb2Vzbid0IGFsbG93IGtleXMgd2l0aCBudWxsIGJ5dGVzIGJlY2F1c2Uga2V5cyBhcmVcbiAgICAvLyBudWxsLXRlcm1pbmF0ZWQuXG4gICAgdGhyb3cgRXJyb3IoJ3BhdHRlcm4gJyArIHZhbHVlLnBhdHRlcm4gKyAnIG11c3Qgbm90IGNvbnRhaW4gbnVsbCBieXRlcycpO1xuICB9IC8vIEFkanVzdCB0aGUgaW5kZXhcblxuXG4gIGluZGV4ID0gaW5kZXggKyBidWZmZXIkJDEud3JpdGUodmFsdWUucGF0dGVybiwgaW5kZXgsICd1dGY4Jyk7IC8vIFdyaXRlIHplcm9cblxuICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwOyAvLyBXcml0ZSB0aGUgb3B0aW9uc1xuXG4gIGluZGV4ID0gaW5kZXggKyBidWZmZXIkJDEud3JpdGUodmFsdWUub3B0aW9ucy5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpLCBpbmRleCwgJ3V0ZjgnKTsgLy8gQWRkIGVuZGluZyB6ZXJvXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMHgwMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVNaW5NYXgoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICAvLyBXcml0ZSB0aGUgdHlwZSBvZiBlaXRoZXIgbWluIG9yIG1heCBrZXlcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9OVUxMO1xuICB9IGVsc2UgaWYgKHZhbHVlLl9ic29udHlwZSA9PT0gJ01pbktleScpIHtcbiAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVk7XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9NQVhfS0VZO1xuICB9IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblxuICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0SWQoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICAvLyBXcml0ZSB0aGUgdHlwZVxuICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX09JRDsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIFdyaXRlIHRoZSBvYmplY3RJZCBpbnRvIHRoZSBzaGFyZWQgYnVmZmVyXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZS5pZCA9PT0gJ3N0cmluZycpIHtcbiAgICBidWZmZXIkJDEud3JpdGUodmFsdWUuaWQsIGluZGV4LCAnYmluYXJ5Jyk7XG4gIH0gZWxzZSBpZiAodmFsdWUuaWQgJiYgdmFsdWUuaWQuY29weSkge1xuICAgIHZhbHVlLmlkLmNvcHkoYnVmZmVyJCQxLCBpbmRleCwgMCwgMTIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29iamVjdCBbJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICddIGlzIG5vdCBhIHZhbGlkIE9iamVjdElkJyk7XG4gIH0gLy8gQWp1c3QgaW5kZXhcblxuXG4gIHJldHVybiBpbmRleCArIDEyO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVCdWZmZXIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICAvLyBXcml0ZSB0aGUgdHlwZVxuICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0JJTkFSWTsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIEdldCBzaXplIG9mIHRoZSBidWZmZXIgKGN1cnJlbnQgd3JpdGUgcG9pbnQpXG5cbiAgdmFyIHNpemUgPSB2YWx1ZS5sZW5ndGg7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gc2l6ZSAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDI0ICYgMHhmZjsgLy8gV3JpdGUgdGhlIGRlZmF1bHQgc3VidHlwZVxuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQ7IC8vIENvcHkgdGhlIGNvbnRlbnQgZm9ybSB0aGUgYmluYXJ5IGZpZWxkIHRvIHRoZSBidWZmZXJcblxuICB2YWx1ZS5jb3B5KGJ1ZmZlciQkMSwgaW5kZXgsIDAsIHNpemUpOyAvLyBBZGp1c3QgdGhlIGluZGV4XG5cbiAgaW5kZXggPSBpbmRleCArIHNpemU7XG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBpc0FycmF5LCBwYXRoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwYXRoW2ldID09PSB2YWx1ZSkgdGhyb3cgbmV3IEVycm9yKCdjeWNsaWMgZGVwZW5kZW5jeSBkZXRlY3RlZCcpO1xuICB9IC8vIFB1c2ggdmFsdWUgdG8gc3RhY2tcblxuXG4gIHBhdGgucHVzaCh2YWx1ZSk7IC8vIFdyaXRlIHRoZSB0eXBlXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBjb25zdGFudHMuQlNPTl9EQVRBX0FSUkFZIDogY29uc3RhbnRzLkJTT05fREFUQV9PQkpFQ1Q7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuICB2YXIgZW5kSW5kZXggPSBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgdmFsdWUsIGNoZWNrS2V5cywgaW5kZXgsIGRlcHRoICsgMSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQsIHBhdGgpOyAvLyBQb3Agc3RhY2tcblxuICBwYXRoLnBvcCgpO1xuICByZXR1cm4gZW5kSW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZURlY2ltYWwxMjgoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0RFQ0lNQUwxMjg7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSB0aGUgZGF0YSBmcm9tIHRoZSB2YWx1ZVxuXG4gIHZhbHVlLmJ5dGVzLmNvcHkoYnVmZmVyJCQxLCBpbmRleCwgMCwgMTYpO1xuICByZXR1cm4gaW5kZXggKyAxNjtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplTG9uZyhidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIFdyaXRlIHRoZSB0eXBlXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlLl9ic29udHlwZSA9PT0gJ0xvbmcnID8gY29uc3RhbnRzLkJTT05fREFUQV9MT05HIDogY29uc3RhbnRzLkJTT05fREFUQV9USU1FU1RBTVA7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSB0aGUgZGF0ZVxuXG4gIHZhciBsb3dCaXRzID0gdmFsdWUuZ2V0TG93Qml0cygpO1xuICB2YXIgaGlnaEJpdHMgPSB2YWx1ZS5nZXRIaWdoQml0cygpOyAvLyBFbmNvZGUgbG93IGJpdHNcblxuICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gbG93Qml0cyA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gbG93Qml0cyA+PiAxNiAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyA+PiAyNCAmIDB4ZmY7XG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplSW50MzIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuICAvLyBTZXQgaW50IHR5cGUgMzIgYml0cyBvciBsZXNzXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfSU5UOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIGludCB2YWx1ZVxuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gdmFsdWUgPj4gOCAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gdmFsdWUgPj4gMjQgJiAweGZmO1xuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZURvdWJsZShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIEVuY29kZSBhcyBkb3VibGVcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVI7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cbiAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSBmbG9hdFxuXG4gIHdyaXRlSUVFRTc1NCQxKGJ1ZmZlciQkMSwgdmFsdWUudmFsdWUsIGluZGV4LCAnbGl0dGxlJywgNTIsIDgpOyAvLyBBZGp1c3QgaW5kZXhcblxuICBpbmRleCA9IGluZGV4ICsgODtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVGdW5jdGlvbihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBpc0FycmF5KSB7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERTsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIEZ1bmN0aW9uIHN0cmluZ1xuXG4gIHZhciBmdW5jdGlvblN0cmluZyA9IG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQxKHZhbHVlKTsgLy8gV3JpdGUgdGhlIHN0cmluZ1xuXG4gIHZhciBzaXplID0gYnVmZmVyJCQxLndyaXRlKGZ1bmN0aW9uU3RyaW5nLCBpbmRleCArIDQsICd1dGY4JykgKyAxOyAvLyBXcml0ZSB0aGUgc2l6ZSBvZiB0aGUgc3RyaW5nIHRvIGJ1ZmZlclxuXG4gIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4ICsgMV0gPSBzaXplID4+IDggJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXggKyAyXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuICBpbmRleCA9IGluZGV4ICsgNCArIHNpemUgLSAxOyAvLyBXcml0ZSB6ZXJvXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVDb2RlKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBpc0FycmF5KSB7XG4gIGlmICh2YWx1ZS5zY29wZSAmJiBfdHlwZW9mJDModmFsdWUuc2NvcGUpID09PSAnb2JqZWN0Jykge1xuICAgIC8vIFdyaXRlIHRoZSB0eXBlXG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9DT0RFX1dfU0NPUEU7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cbiAgICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuICAgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBTdGFydGluZyBpbmRleFxuXG4gICAgdmFyIHN0YXJ0SW5kZXggPSBpbmRleDsgLy8gU2VyaWFsaXplIHRoZSBmdW5jdGlvblxuICAgIC8vIEdldCB0aGUgZnVuY3Rpb24gc3RyaW5nXG5cbiAgICB2YXIgZnVuY3Rpb25TdHJpbmcgPSB0eXBlb2YgdmFsdWUuY29kZSA9PT0gJ3N0cmluZycgPyB2YWx1ZS5jb2RlIDogdmFsdWUuY29kZS50b1N0cmluZygpOyAvLyBJbmRleCBhZGp1c3RtZW50XG5cbiAgICBpbmRleCA9IGluZGV4ICsgNDsgLy8gV3JpdGUgc3RyaW5nIGludG8gYnVmZmVyXG5cbiAgICB2YXIgY29kZVNpemUgPSBidWZmZXIkJDEud3JpdGUoZnVuY3Rpb25TdHJpbmcsIGluZGV4ICsgNCwgJ3V0ZjgnKSArIDE7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cbiAgICBidWZmZXIkJDFbaW5kZXhdID0gY29kZVNpemUgJiAweGZmO1xuICAgIGJ1ZmZlciQkMVtpbmRleCArIDFdID0gY29kZVNpemUgPj4gOCAmIDB4ZmY7XG4gICAgYnVmZmVyJCQxW2luZGV4ICsgMl0gPSBjb2RlU2l6ZSA+PiAxNiAmIDB4ZmY7XG4gICAgYnVmZmVyJCQxW2luZGV4ICsgM10gPSBjb2RlU2l6ZSA+PiAyNCAmIDB4ZmY7IC8vIFdyaXRlIGVuZCAwXG5cbiAgICBidWZmZXIkJDFbaW5kZXggKyA0ICsgY29kZVNpemUgLSAxXSA9IDA7IC8vIFdyaXRlIHRoZVxuXG4gICAgaW5kZXggPSBpbmRleCArIGNvZGVTaXplICsgNDsgLy9cbiAgICAvLyBTZXJpYWxpemUgdGhlIHNjb3BlIHZhbHVlXG5cbiAgICB2YXIgZW5kSW5kZXggPSBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgdmFsdWUuc2NvcGUsIGNoZWNrS2V5cywgaW5kZXgsIGRlcHRoICsgMSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuICAgIGluZGV4ID0gZW5kSW5kZXggLSAxOyAvLyBXcml0IHRoZSB0b3RhbFxuXG4gICAgdmFyIHRvdGFsU2l6ZSA9IGVuZEluZGV4IC0gc3RhcnRJbmRleDsgLy8gV3JpdGUgdGhlIHRvdGFsIHNpemUgb2YgdGhlIG9iamVjdFxuXG4gICAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSB0b3RhbFNpemUgJiAweGZmO1xuICAgIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gdG90YWxTaXplID4+IDggJiAweGZmO1xuICAgIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gdG90YWxTaXplID4+IDE2ICYgMHhmZjtcbiAgICBidWZmZXIkJDFbc3RhcnRJbmRleCsrXSA9IHRvdGFsU2l6ZSA+PiAyNCAmIDB4ZmY7IC8vIFdyaXRlIHRyYWlsaW5nIHplcm9cblxuICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9DT0RFOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gICAgdmFyIF9udW1iZXJPZldyaXR0ZW5CeXRlczQgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXG4gICAgaW5kZXggPSBpbmRleCArIF9udW1iZXJPZldyaXR0ZW5CeXRlczQ7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gRnVuY3Rpb24gc3RyaW5nXG5cbiAgICB2YXIgX2Z1bmN0aW9uU3RyaW5nID0gdmFsdWUuY29kZS50b1N0cmluZygpOyAvLyBXcml0ZSB0aGUgc3RyaW5nXG5cblxuICAgIHZhciBzaXplID0gYnVmZmVyJCQxLndyaXRlKF9mdW5jdGlvblN0cmluZywgaW5kZXggKyA0LCAndXRmOCcpICsgMTsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIHN0cmluZyB0byBidWZmZXJcblxuICAgIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICYgMHhmZjtcbiAgICBidWZmZXIkJDFbaW5kZXggKyAxXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG4gICAgYnVmZmVyJCQxW2luZGV4ICsgMl0gPSBzaXplID4+IDE2ICYgMHhmZjtcbiAgICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuICAgIGluZGV4ID0gaW5kZXggKyA0ICsgc2l6ZSAtIDE7IC8vIFdyaXRlIHplcm9cblxuICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUJpbmFyeShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIFdyaXRlIHRoZSB0eXBlXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfQklOQVJZOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gRXh0cmFjdCB0aGUgYnVmZmVyXG5cbiAgdmFyIGRhdGEgPSB2YWx1ZS52YWx1ZSh0cnVlKTsgLy8gQ2FsY3VsYXRlIHNpemVcblxuICB2YXIgc2l6ZSA9IHZhbHVlLnBvc2l0aW9uOyAvLyBBZGQgdGhlIGRlcHJlY2F0ZWQgMDIgdHlwZSA0IGJ5dGVzIG9mIHNpemUgdG8gdG90YWxcblxuICBpZiAodmFsdWUuc3ViX3R5cGUgPT09IGJpbmFyeS5TVUJUWVBFX0JZVEVfQVJSQVkpIHNpemUgPSBzaXplICsgNDsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIHN0cmluZyB0byBidWZmZXJcblxuICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gc2l6ZSA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gc2l6ZSA+PiAxNiAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBXcml0ZSB0aGUgc3VidHlwZSB0byB0aGUgYnVmZmVyXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gdmFsdWUuc3ViX3R5cGU7IC8vIElmIHdlIGhhdmUgYmluYXJ5IHR5cGUgMiB0aGUgNCBmaXJzdCBieXRlcyBhcmUgdGhlIHNpemVcblxuICBpZiAodmFsdWUuc3ViX3R5cGUgPT09IGJpbmFyeS5TVUJUWVBFX0JZVEVfQVJSQVkpIHtcbiAgICBzaXplID0gc2l6ZSAtIDQ7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gc2l6ZSAmIDB4ZmY7XG4gICAgYnVmZmVyJCQxW2luZGV4KytdID0gc2l6ZSA+PiA4ICYgMHhmZjtcbiAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDE2ICYgMHhmZjtcbiAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDI0ICYgMHhmZjtcbiAgfSAvLyBXcml0ZSB0aGUgZGF0YSB0byB0aGUgb2JqZWN0XG5cblxuICBkYXRhLmNvcHkoYnVmZmVyJCQxLCBpbmRleCwgMCwgdmFsdWUucG9zaXRpb24pOyAvLyBBZGp1c3QgdGhlIGluZGV4XG5cbiAgaW5kZXggPSBpbmRleCArIHZhbHVlLnBvc2l0aW9uO1xuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVN5bWJvbChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG4gIC8vIFdyaXRlIHRoZSB0eXBlXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfU1lNQk9MOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIHN0cmluZ1xuXG4gIHZhciBzaXplID0gYnVmZmVyJCQxLndyaXRlKHZhbHVlLnZhbHVlLCBpbmRleCArIDQsICd1dGY4JykgKyAxOyAvLyBXcml0ZSB0aGUgc2l6ZSBvZiB0aGUgc3RyaW5nIHRvIGJ1ZmZlclxuXG4gIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICYgMHhmZjtcbiAgYnVmZmVyJCQxW2luZGV4ICsgMV0gPSBzaXplID4+IDggJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXggKyAyXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuICBpbmRleCA9IGluZGV4ICsgNCArIHNpemUgLSAxOyAvLyBXcml0ZSB6ZXJvXG5cbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMHgwMDtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVEQlJlZihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpc0FycmF5KSB7XG4gIC8vIFdyaXRlIHRoZSB0eXBlXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfT0JKRUNUOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG4gIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG4gIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcbiAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcbiAgdmFyIHN0YXJ0SW5kZXggPSBpbmRleDtcbiAgdmFyIGVuZEluZGV4O1xuICB2YXIgb3V0cHV0ID0ge1xuICAgICRyZWY6IHZhbHVlLmNvbGxlY3Rpb24gfHwgdmFsdWUubmFtZXNwYWNlLFxuICAgIC8vIFwibmFtZXNwYWNlXCIgd2FzIHdoYXQgbGlicmFyeSAxLnggY2FsbGVkIFwiY29sbGVjdGlvblwiXG4gICAgJGlkOiB2YWx1ZS5vaWRcbiAgfTtcbiAgaWYgKHZhbHVlLmRiICE9IG51bGwpIG91dHB1dC4kZGIgPSB2YWx1ZS5kYjtcbiAgb3V0cHV0ID0gT2JqZWN0LmFzc2lnbihvdXRwdXQsIHZhbHVlLmZpZWxkcyk7XG4gIGVuZEluZGV4ID0gc2VyaWFsaXplSW50byhidWZmZXIkJDEsIG91dHB1dCwgZmFsc2UsIGluZGV4LCBkZXB0aCArIDEsIHNlcmlhbGl6ZUZ1bmN0aW9ucyk7IC8vIENhbGN1bGF0ZSBvYmplY3Qgc2l6ZVxuXG4gIHZhciBzaXplID0gZW5kSW5kZXggLSBzdGFydEluZGV4OyAvLyBXcml0ZSB0aGUgc2l6ZVxuXG4gIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gc2l6ZSAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gc2l6ZSA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSBzaXplID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSBzaXplID4+IDI0ICYgMHhmZjsgLy8gU2V0IGluZGV4XG5cbiAgcmV0dXJuIGVuZEluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgb2JqZWN0LCBjaGVja0tleXMsIHN0YXJ0aW5nSW5kZXgsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgcGF0aCkge1xuICBzdGFydGluZ0luZGV4ID0gc3RhcnRpbmdJbmRleCB8fCAwO1xuICBwYXRoID0gcGF0aCB8fCBbXTsgLy8gUHVzaCB0aGUgb2JqZWN0IHRvIHRoZSBwYXRoXG5cbiAgcGF0aC5wdXNoKG9iamVjdCk7IC8vIFN0YXJ0IHBsYWNlIHRvIHNlcmlhbGl6ZSBpbnRvXG5cbiAgdmFyIGluZGV4ID0gc3RhcnRpbmdJbmRleCArIDQ7IC8vIFNwZWNpYWwgY2FzZSBpc0FycmF5XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIC8vIEdldCBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gJycgKyBpO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2ldOyAvLyBJcyB0aGVyZSBhbiBvdmVycmlkZSB2YWx1ZVxuXG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUudG9CU09OKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9CU09OICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b0JTT04gaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0JTT04oKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGUgPSBfdHlwZW9mJDModmFsdWUpO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVTdHJpbmcoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplTnVtYmVyKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCb29sZWFuKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgaXNEYXRlJDEodmFsdWUpKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGF0ZShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplTnVsbChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnT2JqZWN0SWQnIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElEJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU9iamVjdElkKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChCdWZmZXIkNS5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCdWZmZXIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwIHx8IGlzUmVnRXhwJDEodmFsdWUpKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplUmVnRXhwKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZVsnX2Jzb250eXBlJ10gPT0gbnVsbCkge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU9iamVjdChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgdHJ1ZSwgcGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RlY2ltYWwxMjgnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGVjaW1hbDEyOChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnTG9uZycgfHwgdmFsdWVbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUxvbmcoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RvdWJsZScpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEb3VibGUoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXJpYWxpemVGdW5jdGlvbnMpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVGdW5jdGlvbihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdDb2RlJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUNvZGUoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdCaW5hcnknKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplQmluYXJ5KGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplU3ltYm9sKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEQlJlZicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEQlJlZihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnQlNPTlJlZ0V4cCcpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCU09OUmVnRXhwKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdJbnQzMicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVJbnQzMihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnTWluS2V5JyB8fCB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdNYXhLZXknKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplTWluTWF4KGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVbJ19ic29udHlwZSddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlY29nbml6ZWQgb3IgaW52YWxpZCBfYnNvbnR5cGU6ICcgKyB2YWx1ZVsnX2Jzb250eXBlJ10pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtYXApIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBvYmplY3QuZW50cmllcygpO1xuICAgIHZhciBkb25lID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgIC8vIFVucGFjayB0aGUgbmV4dCBlbnRyeVxuICAgICAgdmFyIGVudHJ5ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgZG9uZSA9IGVudHJ5LmRvbmU7IC8vIEFyZSB3ZSBkb25lLCB0aGVuIHNraXAgYW5kIHRlcm1pbmF0ZVxuXG4gICAgICBpZiAoZG9uZSkgY29udGludWU7IC8vIEdldCB0aGUgZW50cnkgdmFsdWVzXG5cbiAgICAgIHZhciBfa2V5ID0gZW50cnkudmFsdWVbMF07XG4gICAgICB2YXIgX3ZhbHVlID0gZW50cnkudmFsdWVbMV07IC8vIENoZWNrIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZVxuXG4gICAgICB2YXIgX3R5cGUgPSBfdHlwZW9mJDMoX3ZhbHVlKTsgLy8gQ2hlY2sgdGhlIGtleSBhbmQgdGhyb3cgZXJyb3IgaWYgaXQncyBpbGxlZ2FsXG5cblxuICAgICAgaWYgKHR5cGVvZiBfa2V5ID09PSAnc3RyaW5nJyAmJiAhaWdub3JlS2V5cy5oYXMoX2tleSkpIHtcbiAgICAgICAgaWYgKF9rZXkubWF0Y2gocmVnZXhwJDEpICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGUgQlNPTiBzcGVjIGRvZXNuJ3QgYWxsb3cga2V5cyB3aXRoIG51bGwgYnl0ZXMgYmVjYXVzZSBrZXlzIGFyZVxuICAgICAgICAgIC8vIG51bGwtdGVybWluYXRlZC5cbiAgICAgICAgICB0aHJvdyBFcnJvcigna2V5ICcgKyBfa2V5ICsgJyBtdXN0IG5vdCBjb250YWluIG51bGwgYnl0ZXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGVja0tleXMpIHtcbiAgICAgICAgICBpZiAoJyQnID09PSBfa2V5WzBdKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigna2V5ICcgKyBfa2V5ICsgXCIgbXVzdCBub3Qgc3RhcnQgd2l0aCAnJCdcIik7XG4gICAgICAgICAgfSBlbHNlIGlmICh+X2tleS5pbmRleE9mKCcuJykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdrZXkgJyArIF9rZXkgKyBcIiBtdXN0IG5vdCBjb250YWluICcuJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKF90eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN0cmluZyhidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVOdW1iZXIoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUJvb2xlYW4oYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBpc0RhdGUkMShfdmFsdWUpKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGF0ZShidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUgPT09IG51bGwgfHwgX3ZhbHVlID09PSB1bmRlZmluZWQgJiYgaWdub3JlVW5kZWZpbmVkID09PSBmYWxzZSkge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElkJyB8fCBfdmFsdWVbJ19ic29udHlwZSddID09PSAnT2JqZWN0SUQnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplT2JqZWN0SWQoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoQnVmZmVyJDUuaXNCdWZmZXIoX3ZhbHVlKSkge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUJ1ZmZlcihidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgaXNSZWdFeHAkMShfdmFsdWUpKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplUmVnRXhwKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF90eXBlID09PSAnb2JqZWN0JyAmJiBfdmFsdWVbJ19ic29udHlwZSddID09IG51bGwpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgZmFsc2UsIHBhdGgpO1xuICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PT0gJ29iamVjdCcgJiYgX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RlY2ltYWwxMjgnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGVjaW1hbDEyOChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnTG9uZycgfHwgX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ1RpbWVzdGFtcCcpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVMb25nKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEb3VibGUnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRG91YmxlKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdDb2RlJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUNvZGUoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgc2VyaWFsaXplRnVuY3Rpb25zKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRnVuY3Rpb24oYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnQmluYXJ5Jykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUJpbmFyeShidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnU3ltYm9sJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN5bWJvbChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnREJSZWYnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplREJSZWYoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4LCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0JTT05SZWdFeHAnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplQlNPTlJlZ0V4cChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnSW50MzInKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplSW50MzIoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ01pbktleScgfHwgX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ01heEtleScpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVNaW5NYXgoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF92YWx1ZVsnX2Jzb250eXBlJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBvciBpbnZhbGlkIF9ic29udHlwZTogJyArIF92YWx1ZVsnX2Jzb250eXBlJ10pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBEaWQgd2UgcHJvdmlkZSBhIGN1c3RvbSBzZXJpYWxpemF0aW9uIG1ldGhvZFxuICAgIGlmIChvYmplY3QudG9CU09OKSB7XG4gICAgICBpZiAodHlwZW9mIG9iamVjdC50b0JTT04gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvQlNPTiBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgb2JqZWN0ID0gb2JqZWN0LnRvQlNPTigpO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsICYmIF90eXBlb2YkMyhvYmplY3QpICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9CU09OIGZ1bmN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuICAgIH0gLy8gSXRlcmF0ZSBvdmVyIGFsbCB0aGUga2V5c1xuXG5cbiAgICBmb3IgKHZhciBfa2V5MiBpbiBvYmplY3QpIHtcbiAgICAgIHZhciBfdmFsdWUyID0gb2JqZWN0W19rZXkyXTsgLy8gSXMgdGhlcmUgYW4gb3ZlcnJpZGUgdmFsdWVcblxuICAgICAgaWYgKF92YWx1ZTIgJiYgX3ZhbHVlMi50b0JTT04pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBfdmFsdWUyLnRvQlNPTiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9CU09OIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIF92YWx1ZTIgPSBfdmFsdWUyLnRvQlNPTigpO1xuICAgICAgfSAvLyBDaGVjayB0aGUgdHlwZSBvZiB0aGUgdmFsdWVcblxuXG4gICAgICB2YXIgX3R5cGUyID0gX3R5cGVvZiQzKF92YWx1ZTIpOyAvLyBDaGVjayB0aGUga2V5IGFuZCB0aHJvdyBlcnJvciBpZiBpdCdzIGlsbGVnYWxcblxuXG4gICAgICBpZiAodHlwZW9mIF9rZXkyID09PSAnc3RyaW5nJyAmJiAhaWdub3JlS2V5cy5oYXMoX2tleTIpKSB7XG4gICAgICAgIGlmIChfa2V5Mi5tYXRjaChyZWdleHAkMSkgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBCU09OIHNwZWMgZG9lc24ndCBhbGxvdyBrZXlzIHdpdGggbnVsbCBieXRlcyBiZWNhdXNlIGtleXMgYXJlXG4gICAgICAgICAgLy8gbnVsbC10ZXJtaW5hdGVkLlxuICAgICAgICAgIHRocm93IEVycm9yKCdrZXkgJyArIF9rZXkyICsgJyBtdXN0IG5vdCBjb250YWluIG51bGwgYnl0ZXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGVja0tleXMpIHtcbiAgICAgICAgICBpZiAoJyQnID09PSBfa2V5MlswXSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2tleSAnICsgX2tleTIgKyBcIiBtdXN0IG5vdCBzdGFydCB3aXRoICckJ1wiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKH5fa2V5Mi5pbmRleE9mKCcuJykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdrZXkgJyArIF9rZXkyICsgXCIgbXVzdCBub3QgY29udGFpbiAnLidcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfdHlwZTIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplU3RyaW5nKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3R5cGUyID09PSAnbnVtYmVyJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bWJlcihidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF90eXBlMiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplQm9vbGVhbihidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZTIgaW5zdGFuY2VvZiBEYXRlIHx8IGlzRGF0ZSQxKF92YWx1ZTIpKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGF0ZShidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZTIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaWdub3JlVW5kZWZpbmVkID09PSBmYWxzZSkgaW5kZXggPSBzZXJpYWxpemVOdWxsKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMiA9PT0gbnVsbCkge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElkJyB8fCBfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElEJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU9iamVjdElkKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoQnVmZmVyJDUuaXNCdWZmZXIoX3ZhbHVlMikpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCdWZmZXIoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUyIGluc3RhbmNlb2YgUmVnRXhwIHx8IGlzUmVnRXhwJDEoX3ZhbHVlMikpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVSZWdFeHAoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdHlwZTIgPT09ICdvYmplY3QnICYmIF92YWx1ZTJbJ19ic29udHlwZSddID09IG51bGwpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBmYWxzZSwgcGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKF90eXBlMiA9PT0gJ29iamVjdCcgJiYgX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdEZWNpbWFsMTI4Jykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZURlY2ltYWwxMjgoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0xvbmcnIHx8IF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUxvbmcoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0RvdWJsZScpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEb3VibGUoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0NvZGUnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplQ29kZShidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3ZhbHVlMiA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXJpYWxpemVGdW5jdGlvbnMpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVGdW5jdGlvbihidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdCaW5hcnknKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplQmluYXJ5KGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICAgIGluZGV4ID0gc2VyaWFsaXplU3ltYm9sKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdEQlJlZicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEQlJlZihidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCwgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnQlNPTlJlZ0V4cCcpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCU09OUmVnRXhwKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdJbnQzMicpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVJbnQzMihidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnTWluS2V5JyB8fCBfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ01heEtleScpIHtcbiAgICAgICAgaW5kZXggPSBzZXJpYWxpemVNaW5NYXgoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3ZhbHVlMlsnX2Jzb250eXBlJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBvciBpbnZhbGlkIF9ic29udHlwZTogJyArIF92YWx1ZTJbJ19ic29udHlwZSddKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVtb3ZlIHRoZSBwYXRoXG5cblxuICBwYXRoLnBvcCgpOyAvLyBGaW5hbCBwYWRkaW5nIGJ5dGUgZm9yIG9iamVjdFxuXG4gIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4MDA7IC8vIEZpbmFsIHNpemVcblxuICB2YXIgc2l6ZSA9IGluZGV4IC0gc3RhcnRpbmdJbmRleDsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIG9iamVjdFxuXG4gIGJ1ZmZlciQkMVtzdGFydGluZ0luZGV4KytdID0gc2l6ZSAmIDB4ZmY7XG4gIGJ1ZmZlciQkMVtzdGFydGluZ0luZGV4KytdID0gc2l6ZSA+PiA4ICYgMHhmZjtcbiAgYnVmZmVyJCQxW3N0YXJ0aW5nSW5kZXgrK10gPSBzaXplID4+IDE2ICYgMHhmZjtcbiAgYnVmZmVyJCQxW3N0YXJ0aW5nSW5kZXgrK10gPSBzaXplID4+IDI0ICYgMHhmZjtcbiAgcmV0dXJuIGluZGV4O1xufVxuXG52YXIgc2VyaWFsaXplciA9IHNlcmlhbGl6ZUludG87XG5cbmZ1bmN0aW9uIF90eXBlb2YkNChvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNCA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDQgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ0KG9iaik7IH1cblxudmFyIEJ1ZmZlciQ2ID0gYnVmZmVyLkJ1ZmZlcjtcbnZhciBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmckMiA9IHV0aWxzLm5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZzsgLy8gVG8gZW5zdXJlIHRoYXQgMC40IG9mIG5vZGUgd29ya3MgY29ycmVjdGx5XG5cbmZ1bmN0aW9uIGlzRGF0ZSQyKGQpIHtcbiAgcmV0dXJuIF90eXBlb2YkNChkKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU9iamVjdFNpemUob2JqZWN0LCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCkge1xuICB2YXIgdG90YWxMZW5ndGggPSA0ICsgMTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGNhbGN1bGF0ZUVsZW1lbnQoaS50b1N0cmluZygpLCBvYmplY3RbaV0sIHNlcmlhbGl6ZUZ1bmN0aW9ucywgdHJ1ZSwgaWdub3JlVW5kZWZpbmVkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UgaGF2ZSB0b0JTT04gZGVmaW5lZCwgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAgaWYgKG9iamVjdC50b0JTT04pIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdC50b0JTT04oKTtcbiAgICB9IC8vIENhbGN1bGF0ZSBzaXplXG5cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGNhbGN1bGF0ZUVsZW1lbnQoa2V5LCBvYmplY3Rba2V5XSwgc2VyaWFsaXplRnVuY3Rpb25zLCBmYWxzZSwgaWdub3JlVW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG90YWxMZW5ndGg7XG59XG4vKipcbiAqIEBpZ25vcmVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FsY3VsYXRlRWxlbWVudChuYW1lLCB2YWx1ZSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpc0FycmF5LCBpZ25vcmVVbmRlZmluZWQpIHtcbiAgLy8gSWYgd2UgaGF2ZSB0b0JTT04gZGVmaW5lZCwgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgb2JqZWN0XG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0JTT04pIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRvQlNPTigpO1xuICB9XG5cbiAgc3dpdGNoIChfdHlwZW9mJDQodmFsdWUpKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiAxICsgQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSArIDQgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLCAndXRmOCcpICsgMTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlICYmIHZhbHVlID49IGNvbnN0YW50cy5KU19JTlRfTUlOICYmIHZhbHVlIDw9IGNvbnN0YW50cy5KU19JTlRfTUFYKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSBjb25zdGFudHMuQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gY29uc3RhbnRzLkJTT05fSU5UMzJfTUFYKSB7XG4gICAgICAgICAgLy8gMzIgYml0XG4gICAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAoNCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gNjQgYml0XG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDggKyAxKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICBpZiAoaXNBcnJheSB8fCAhaWdub3JlVW5kZWZpbmVkKSByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDE7XG4gICAgICByZXR1cm4gMDtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAoMSArIDEpO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ01pbktleScgfHwgdmFsdWVbJ19ic29udHlwZSddID09PSAnTWF4S2V5Jykge1xuICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDE7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElkJyB8fCB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdPYmplY3RJRCcpIHtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAoMTIgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IGlzRGF0ZSQyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICg4ICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBCdWZmZXIkNiAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDYuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDEgKyA0ICsgMSkgKyB2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0xvbmcnIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RvdWJsZScgfHwgdmFsdWVbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICg4ICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RlY2ltYWwxMjgnKSB7XG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDE2ICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0NvZGUnKSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBzaXplIGRlcGVuZGluZyBvbiB0aGUgYXZhaWxhYmlsaXR5IG9mIGEgc2NvcGVcbiAgICAgICAgaWYgKHZhbHVlLnNjb3BlICE9IG51bGwgJiYgT2JqZWN0LmtleXModmFsdWUuc2NvcGUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyA0ICsgNCArIEJ1ZmZlciQ2LmJ5dGVMZW5ndGgodmFsdWUuY29kZS50b1N0cmluZygpLCAndXRmOCcpICsgMSArIGNhbGN1bGF0ZU9iamVjdFNpemUodmFsdWUuc2NvcGUsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyA0ICsgQnVmZmVyJDYuYnl0ZUxlbmd0aCh2YWx1ZS5jb2RlLnRvU3RyaW5nKCksICd1dGY4JykgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0JpbmFyeScpIHtcbiAgICAgICAgLy8gQ2hlY2sgd2hhdCBraW5kIG9mIHN1YnR5cGUgd2UgaGF2ZVxuICAgICAgICBpZiAodmFsdWUuc3ViX3R5cGUgPT09IGJpbmFyeS5TVUJUWVBFX0JZVEVfQVJSQVkpIHtcbiAgICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICh2YWx1ZS5wb3NpdGlvbiArIDEgKyA0ICsgMSArIDQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKHZhbHVlLnBvc2l0aW9uICsgMSArIDQgKyAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgQnVmZmVyJDYuYnl0ZUxlbmd0aCh2YWx1ZS52YWx1ZSwgJ3V0ZjgnKSArIDQgKyAxICsgMTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnREJSZWYnKSB7XG4gICAgICAgIC8vIFNldCB1cCBjb3JyZWN0IG9iamVjdCBmb3Igc2VyaWFsaXphdGlvblxuICAgICAgICB2YXIgb3JkZXJlZF92YWx1ZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAkcmVmOiB2YWx1ZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICRpZDogdmFsdWUub2lkXG4gICAgICAgIH0sIHZhbHVlLmZpZWxkcyk7IC8vIEFkZCBkYiByZWZlcmVuY2UgaWYgaXQgZXhpc3RzXG5cbiAgICAgICAgaWYgKHZhbHVlLmRiICE9IG51bGwpIHtcbiAgICAgICAgICBvcmRlcmVkX3ZhbHVlc1snJGRiJ10gPSB2YWx1ZS5kYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIGNhbGN1bGF0ZU9iamVjdFNpemUob3JkZXJlZF92YWx1ZXMsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAxICsgQnVmZmVyJDYuYnl0ZUxlbmd0aCh2YWx1ZS5zb3VyY2UsICd1dGY4JykgKyAxICsgKHZhbHVlLmdsb2JhbCA/IDEgOiAwKSArICh2YWx1ZS5pZ25vcmVDYXNlID8gMSA6IDApICsgKHZhbHVlLm11bHRpbGluZSA/IDEgOiAwKSArIDE7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0JTT05SZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIEJ1ZmZlciQ2LmJ5dGVMZW5ndGgodmFsdWUucGF0dGVybiwgJ3V0ZjgnKSArIDEgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLm9wdGlvbnMsICd1dGY4JykgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyBjYWxjdWxhdGVPYmplY3RTaXplKHZhbHVlLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCkgKyAxO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgLy8gV1RGIGZvciAwLjQuWCB3aGVyZSB0eXBlb2YgL3NvbWVyZWdleHAvID09PSAnZnVuY3Rpb24nXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScgfHwgU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLnNvdXJjZSwgJ3V0ZjgnKSArIDEgKyAodmFsdWUuZ2xvYmFsID8gMSA6IDApICsgKHZhbHVlLmlnbm9yZUNhc2UgPyAxIDogMCkgKyAodmFsdWUubXVsdGlsaW5lID8gMSA6IDApICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXJpYWxpemVGdW5jdGlvbnMgJiYgdmFsdWUuc2NvcGUgIT0gbnVsbCAmJiBPYmplY3Qua2V5cyh2YWx1ZS5zY29wZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIDQgKyA0ICsgQnVmZmVyJDYuYnl0ZUxlbmd0aChub3JtYWxpemVkRnVuY3Rpb25TdHJpbmckMih2YWx1ZSksICd1dGY4JykgKyAxICsgY2FsY3VsYXRlT2JqZWN0U2l6ZSh2YWx1ZS5zY29wZSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlcmlhbGl6ZUZ1bmN0aW9ucykge1xuICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIDQgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQyKHZhbHVlKSwgJ3V0ZjgnKSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbnZhciBjYWxjdWxhdGVfc2l6ZSA9IGNhbGN1bGF0ZU9iamVjdFNpemU7XG5cbnZhciBCdWZmZXIkNyA9IGJ1ZmZlci5CdWZmZXI7XG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCwgaWYgYSBVaW50OEFycmF5IGlzIHBhc3NlZCBpbiwgaXQgaXMgd3JhcHBlZCBpbiBhIEJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcnxVaW50OEFycmF5fSBwb3RlbnRpYWxCdWZmZXIgVGhlIHBvdGVudGlhbCBidWZmZXJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IHRoZSBpbnB1dCBpZiBwb3RlbnRpYWxCdWZmZXIgaXMgYSBidWZmZXIsIG9yIGEgYnVmZmVyIHRoYXRcbiAqIHdyYXBzIGEgcGFzc2VkIGluIFVpbnQ4QXJyYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYW55dGhpbmcgb3RoZXIgdGhhbiBhIEJ1ZmZlciBvciBVaW50OEFycmF5IGlzIHBhc3NlZCBpblxuICovXG5cbnZhciBlbnN1cmVfYnVmZmVyID0gZnVuY3Rpb24gZW5zdXJlQnVmZmVyKHBvdGVudGlhbEJ1ZmZlcikge1xuICBpZiAocG90ZW50aWFsQnVmZmVyIGluc3RhbmNlb2YgQnVmZmVyJDcpIHtcbiAgICByZXR1cm4gcG90ZW50aWFsQnVmZmVyO1xuICB9XG5cbiAgaWYgKHBvdGVudGlhbEJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gQnVmZmVyJDcuZnJvbShwb3RlbnRpYWxCdWZmZXIuYnVmZmVyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ011c3QgdXNlIGVpdGhlciBCdWZmZXIgb3IgVWludDhBcnJheScpO1xufTtcblxudmFyIEJ1ZmZlciQ4ID0gYnVmZmVyLkJ1ZmZlcjsgLy8gUGFydHMgb2YgdGhlIHBhcnNlclxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuLy8gRGVmYXVsdCBNYXggU2l6ZVxuXG52YXIgTUFYU0laRSA9IDEwMjQgKiAxMDI0ICogMTc7IC8vIEN1cnJlbnQgSW50ZXJuYWwgVGVtcG9yYXJ5IFNlcmlhbGl6YXRpb24gQnVmZmVyXG5cbnZhciBidWZmZXIkMSA9IEJ1ZmZlciQ4LmFsbG9jKE1BWFNJWkUpO1xuLyoqXG4gKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBpbnRlcm5hbCBzZXJpYWxpemF0aW9uIGJ1ZmZlci5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBUaGUgZGVzaXJlZCBzaXplIGZvciB0aGUgaW50ZXJuYWwgc2VyaWFsaXphdGlvbiBidWZmZXJcbiAqL1xuXG5mdW5jdGlvbiBzZXRJbnRlcm5hbEJ1ZmZlclNpemUoc2l6ZSkge1xuICAvLyBSZXNpemUgdGhlIGludGVybmFsIHNlcmlhbGl6YXRpb24gYnVmZmVyIGlmIG5lZWRlZFxuICBpZiAoYnVmZmVyJDEubGVuZ3RoIDwgc2l6ZSkge1xuICAgIGJ1ZmZlciQxID0gQnVmZmVyJDguYWxsb2Moc2l6ZSk7XG4gIH1cbn1cbi8qKlxuICogU2VyaWFsaXplIGEgSmF2YXNjcmlwdCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0aGUgSmF2YXNjcmlwdCBvYmplY3QgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jaGVja0tleXNdIHRoZSBzZXJpYWxpemVyIHdpbGwgY2hlY2sgaWYga2V5cyBhcmUgdmFsaWQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucz1mYWxzZV0gc2VyaWFsaXplIHRoZSBqYXZhc2NyaXB0IGZ1bmN0aW9ucyAqKihkZWZhdWx0OmZhbHNlKSoqLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ9dHJ1ZV0gaWdub3JlIHVuZGVmaW5lZCBmaWVsZHMgKiooZGVmYXVsdDp0cnVlKSoqLlxuICogQHJldHVybiB7QnVmZmVyfSByZXR1cm5zIHRoZSBCdWZmZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgb2JqZWN0LlxuICovXG5cblxuZnVuY3Rpb24gc2VyaWFsaXplJDEob2JqZWN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBVbnBhY2sgdGhlIG9wdGlvbnNcblxuICB2YXIgY2hlY2tLZXlzID0gdHlwZW9mIG9wdGlvbnMuY2hlY2tLZXlzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNoZWNrS2V5cyA6IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplRnVuY3Rpb25zID0gdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA6IGZhbHNlO1xuICB2YXIgaWdub3JlVW5kZWZpbmVkID0gdHlwZW9mIG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA6IHRydWU7XG4gIHZhciBtaW5JbnRlcm5hbEJ1ZmZlclNpemUgPSB0eXBlb2Ygb3B0aW9ucy5taW5JbnRlcm5hbEJ1ZmZlclNpemUgPT09ICdudW1iZXInID8gb3B0aW9ucy5taW5JbnRlcm5hbEJ1ZmZlclNpemUgOiBNQVhTSVpFOyAvLyBSZXNpemUgdGhlIGludGVybmFsIHNlcmlhbGl6YXRpb24gYnVmZmVyIGlmIG5lZWRlZFxuXG4gIGlmIChidWZmZXIkMS5sZW5ndGggPCBtaW5JbnRlcm5hbEJ1ZmZlclNpemUpIHtcbiAgICBidWZmZXIkMSA9IEJ1ZmZlciQ4LmFsbG9jKG1pbkludGVybmFsQnVmZmVyU2l6ZSk7XG4gIH0gLy8gQXR0ZW1wdCB0byBzZXJpYWxpemVcblxuXG4gIHZhciBzZXJpYWxpemF0aW9uSW5kZXggPSBzZXJpYWxpemVyKGJ1ZmZlciQxLCBvYmplY3QsIGNoZWNrS2V5cywgMCwgMCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQsIFtdKTsgLy8gQ3JlYXRlIHRoZSBmaW5hbCBidWZmZXJcblxuICB2YXIgZmluaXNoZWRCdWZmZXIgPSBCdWZmZXIkOC5hbGxvYyhzZXJpYWxpemF0aW9uSW5kZXgpOyAvLyBDb3B5IGludG8gdGhlIGZpbmlzaGVkIGJ1ZmZlclxuXG4gIGJ1ZmZlciQxLmNvcHkoZmluaXNoZWRCdWZmZXIsIDAsIDAsIGZpbmlzaGVkQnVmZmVyLmxlbmd0aCk7IC8vIFJldHVybiB0aGUgYnVmZmVyXG5cbiAgcmV0dXJuIGZpbmlzaGVkQnVmZmVyO1xufVxuLyoqXG4gKiBTZXJpYWxpemUgYSBKYXZhc2NyaXB0IG9iamVjdCB1c2luZyBhIHByZWRlZmluZWQgQnVmZmVyIGFuZCBpbmRleCBpbnRvIHRoZSBidWZmZXIsIHVzZWZ1bCB3aGVuIHByZS1hbGxvY2F0aW5nIHRoZSBzcGFjZSBmb3Igc2VyaWFsaXphdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRoZSBKYXZhc2NyaXB0IG9iamVjdCB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIHRoZSBCdWZmZXIgeW91IHByZS1hbGxvY2F0ZWQgdG8gc3RvcmUgdGhlIHNlcmlhbGl6ZWQgQlNPTiBvYmplY3QuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmNoZWNrS2V5c10gdGhlIHNlcmlhbGl6ZXIgd2lsbCBjaGVjayBpZiBrZXlzIGFyZSB2YWxpZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zPWZhbHNlXSBzZXJpYWxpemUgdGhlIGphdmFzY3JpcHQgZnVuY3Rpb25zICoqKGRlZmF1bHQ6ZmFsc2UpKiouXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVVuZGVmaW5lZD10cnVlXSBpZ25vcmUgdW5kZWZpbmVkIGZpZWxkcyAqKihkZWZhdWx0OnRydWUpKiouXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaW5kZXhdIHRoZSBpbmRleCBpbiB0aGUgYnVmZmVyIHdoZXJlIHdlIHdpc2ggdG8gc3RhcnQgc2VyaWFsaXppbmcgaW50by5cbiAqIEByZXR1cm4ge051bWJlcn0gcmV0dXJucyB0aGUgaW5kZXggcG9pbnRpbmcgdG8gdGhlIGxhc3Qgd3JpdHRlbiBieXRlIGluIHRoZSBidWZmZXIuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXJpYWxpemVXaXRoQnVmZmVyQW5kSW5kZXgob2JqZWN0LCBmaW5hbEJ1ZmZlciwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gVW5wYWNrIHRoZSBvcHRpb25zXG5cbiAgdmFyIGNoZWNrS2V5cyA9IHR5cGVvZiBvcHRpb25zLmNoZWNrS2V5cyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5jaGVja0tleXMgOiBmYWxzZTtcbiAgdmFyIHNlcmlhbGl6ZUZ1bmN0aW9ucyA9IHR5cGVvZiBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMgOiBmYWxzZTtcbiAgdmFyIGlnbm9yZVVuZGVmaW5lZCA9IHR5cGVvZiBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQgOiB0cnVlO1xuICB2YXIgc3RhcnRJbmRleCA9IHR5cGVvZiBvcHRpb25zLmluZGV4ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuaW5kZXggOiAwOyAvLyBBdHRlbXB0IHRvIHNlcmlhbGl6ZVxuXG4gIHZhciBzZXJpYWxpemF0aW9uSW5kZXggPSBzZXJpYWxpemVyKGJ1ZmZlciQxLCBvYmplY3QsIGNoZWNrS2V5cywgMCwgMCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuICBidWZmZXIkMS5jb3B5KGZpbmFsQnVmZmVyLCBzdGFydEluZGV4LCAwLCBzZXJpYWxpemF0aW9uSW5kZXgpOyAvLyBSZXR1cm4gdGhlIGluZGV4XG5cbiAgcmV0dXJuIHN0YXJ0SW5kZXggKyBzZXJpYWxpemF0aW9uSW5kZXggLSAxO1xufVxuLyoqXG4gKiBEZXNlcmlhbGl6ZSBkYXRhIGFzIEJTT04uXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciB0aGUgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgc2V0IG9mIEJTT04gZG9jdW1lbnRzLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmV2YWxGdW5jdGlvbnM9ZmFsc2VdIGV2YWx1YXRlIGZ1bmN0aW9ucyBpbiB0aGUgQlNPTiBkb2N1bWVudCBzY29wZWQgdG8gdGhlIG9iamVjdCBkZXNlcmlhbGl6ZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuY2FjaGVGdW5jdGlvbnM9ZmFsc2VdIGNhY2hlIGV2YWx1YXRlZCBmdW5jdGlvbnMgZm9yIHJldXNlLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmNhY2hlRnVuY3Rpb25zQ3JjMzI9ZmFsc2VdIHVzZSBhIGNyYzMyIGNvZGUgZm9yIGNhY2hpbmcsIG90aGVyd2lzZSB1c2UgdGhlIHN0cmluZyBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucHJvbW90ZUxvbmdzPXRydWVdIHdoZW4gZGVzZXJpYWxpemluZyBhIExvbmcgd2lsbCBmaXQgaXQgaW50byBhIE51bWJlciBpZiBpdCdzIHNtYWxsZXIgdGhhbiA1MyBiaXRzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucHJvbW90ZUJ1ZmZlcnM9ZmFsc2VdIHdoZW4gZGVzZXJpYWxpemluZyBhIEJpbmFyeSB3aWxsIHJldHVybiBpdCBhcyBhIG5vZGUuanMgQnVmZmVyIGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb21vdGVWYWx1ZXM9ZmFsc2VdIHdoZW4gZGVzZXJpYWxpemluZyB3aWxsIHByb21vdGUgQlNPTiB2YWx1ZXMgdG8gdGhlaXIgTm9kZS5qcyBjbG9zZXN0IGVxdWl2YWxlbnQgdHlwZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZmllbGRzQXNSYXc9bnVsbF0gYWxsb3cgdG8gc3BlY2lmeSBpZiB0aGVyZSB3aGF0IGZpZWxkcyB3ZSB3aXNoIHRvIHJldHVybiBhcyB1bnNlcmlhbGl6ZWQgcmF3IGJ1ZmZlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5ic29uUmVnRXhwPWZhbHNlXSByZXR1cm4gQlNPTiByZWd1bGFyIGV4cHJlc3Npb25zIGFzIEJTT05SZWdFeHAgaW5zdGFuY2VzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd09iamVjdFNtYWxsZXJUaGFuQnVmZmVyU2l6ZT1mYWxzZV0gYWxsb3dzIHRoZSBidWZmZXIgdG8gYmUgbGFyZ2VyIHRoYW4gdGhlIHBhcnNlZCBCU09OIG9iamVjdFxuICogQHJldHVybiB7T2JqZWN0fSByZXR1cm5zIHRoZSBkZXNlcmlhbGl6ZWQgSmF2YXNjcmlwdCBPYmplY3QuXG4gKi9cblxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZSQyKGJ1ZmZlciQkMSwgb3B0aW9ucykge1xuICBidWZmZXIkJDEgPSBlbnN1cmVfYnVmZmVyKGJ1ZmZlciQkMSk7XG4gIHJldHVybiBkZXNlcmlhbGl6ZXIoYnVmZmVyJCQxLCBvcHRpb25zKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBic29uIHNpemUgZm9yIGEgcGFzc2VkIGluIEphdmFzY3JpcHQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdGhlIEphdmFzY3JpcHQgb2JqZWN0IHRvIGNhbGN1bGF0ZSB0aGUgQlNPTiBieXRlIHNpemUgZm9yLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnM9ZmFsc2VdIHNlcmlhbGl6ZSB0aGUgamF2YXNjcmlwdCBmdW5jdGlvbnMgKiooZGVmYXVsdDpmYWxzZSkqKi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaWdub3JlVW5kZWZpbmVkPXRydWVdIGlnbm9yZSB1bmRlZmluZWQgZmllbGRzICoqKGRlZmF1bHQ6dHJ1ZSkqKi5cbiAqIEByZXR1cm4ge051bWJlcn0gcmV0dXJucyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBCU09OIG9iamVjdCB3aWxsIHRha2UgdXAuXG4gKi9cblxuXG5mdW5jdGlvbiBjYWxjdWxhdGVPYmplY3RTaXplJDEob2JqZWN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgc2VyaWFsaXplRnVuY3Rpb25zID0gdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA6IGZhbHNlO1xuICB2YXIgaWdub3JlVW5kZWZpbmVkID0gdHlwZW9mIG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA6IHRydWU7XG4gIHJldHVybiBjYWxjdWxhdGVfc2l6ZShvYmplY3QsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkKTtcbn1cbi8qKlxuICogRGVzZXJpYWxpemUgc3RyZWFtIGRhdGEgYXMgQlNPTiBkb2N1bWVudHMuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgdGhlIGJ1ZmZlciBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIHNldCBvZiBCU09OIGRvY3VtZW50cy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEluZGV4IHRoZSBzdGFydCBpbmRleCBpbiB0aGUgZGF0YSBCdWZmZXIgd2hlcmUgdGhlIGRlc2VyaWFsaXphdGlvbiBpcyB0byBzdGFydC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXJPZkRvY3VtZW50cyBudW1iZXIgb2YgZG9jdW1lbnRzIHRvIGRlc2VyaWFsaXplLlxuICogQHBhcmFtIHtBcnJheX0gZG9jdW1lbnRzIGFuIGFycmF5IHdoZXJlIHRvIHN0b3JlIHRoZSBkZXNlcmlhbGl6ZWQgZG9jdW1lbnRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRvY1N0YXJ0SW5kZXggdGhlIGluZGV4IGluIHRoZSBkb2N1bWVudHMgYXJyYXkgZnJvbSB3aGVyZSB0byBzdGFydCBpbnNlcnRpbmcgZG9jdW1lbnRzLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBhZGRpdGlvbmFsIG9wdGlvbnMgdXNlZCBmb3IgdGhlIGRlc2VyaWFsaXphdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5ldmFsRnVuY3Rpb25zPWZhbHNlXSBldmFsdWF0ZSBmdW5jdGlvbnMgaW4gdGhlIEJTT04gZG9jdW1lbnQgc2NvcGVkIHRvIHRoZSBvYmplY3QgZGVzZXJpYWxpemVkLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmNhY2hlRnVuY3Rpb25zPWZhbHNlXSBjYWNoZSBldmFsdWF0ZWQgZnVuY3Rpb25zIGZvciByZXVzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5jYWNoZUZ1bmN0aW9uc0NyYzMyPWZhbHNlXSB1c2UgYSBjcmMzMiBjb2RlIGZvciBjYWNoaW5nLCBvdGhlcndpc2UgdXNlIHRoZSBzdHJpbmcgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb21vdGVMb25ncz10cnVlXSB3aGVuIGRlc2VyaWFsaXppbmcgYSBMb25nIHdpbGwgZml0IGl0IGludG8gYSBOdW1iZXIgaWYgaXQncyBzbWFsbGVyIHRoYW4gNTMgYml0c1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb21vdGVCdWZmZXJzPWZhbHNlXSB3aGVuIGRlc2VyaWFsaXppbmcgYSBCaW5hcnkgd2lsbCByZXR1cm4gaXQgYXMgYSBub2RlLmpzIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5wcm9tb3RlVmFsdWVzPWZhbHNlXSB3aGVuIGRlc2VyaWFsaXppbmcgd2lsbCBwcm9tb3RlIEJTT04gdmFsdWVzIHRvIHRoZWlyIE5vZGUuanMgY2xvc2VzdCBlcXVpdmFsZW50IHR5cGVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmZpZWxkc0FzUmF3PW51bGxdIGFsbG93IHRvIHNwZWNpZnkgaWYgdGhlcmUgd2hhdCBmaWVsZHMgd2Ugd2lzaCB0byByZXR1cm4gYXMgdW5zZXJpYWxpemVkIHJhdyBidWZmZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuYnNvblJlZ0V4cD1mYWxzZV0gcmV0dXJuIEJTT04gcmVndWxhciBleHByZXNzaW9ucyBhcyBCU09OUmVnRXhwIGluc3RhbmNlcy5cbiAqIEByZXR1cm4ge051bWJlcn0gcmV0dXJucyB0aGUgbmV4dCBpbmRleCBpbiB0aGUgYnVmZmVyIGFmdGVyIGRlc2VyaWFsaXphdGlvbiAqKngqKiBudW1iZXJzIG9mIGRvY3VtZW50cy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplU3RyZWFtKGRhdGEsIHN0YXJ0SW5kZXgsIG51bWJlck9mRG9jdW1lbnRzLCBkb2N1bWVudHMsIGRvY1N0YXJ0SW5kZXgsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGFsbG93T2JqZWN0U21hbGxlclRoYW5CdWZmZXJTaXplOiB0cnVlXG4gIH0sIG9wdGlvbnMpO1xuICBkYXRhID0gZW5zdXJlX2J1ZmZlcihkYXRhKTtcbiAgdmFyIGluZGV4ID0gc3RhcnRJbmRleDsgLy8gTG9vcCBvdmVyIGFsbCBkb2N1bWVudHNcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mRG9jdW1lbnRzOyBpKyspIHtcbiAgICAvLyBGaW5kIHNpemUgb2YgdGhlIGRvY3VtZW50XG4gICAgdmFyIHNpemUgPSBkYXRhW2luZGV4XSB8IGRhdGFbaW5kZXggKyAxXSA8PCA4IHwgZGF0YVtpbmRleCArIDJdIDw8IDE2IHwgZGF0YVtpbmRleCArIDNdIDw8IDI0OyAvLyBVcGRhdGUgb3B0aW9ucyB3aXRoIGluZGV4XG5cbiAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7IC8vIFBhcnNlIHRoZSBkb2N1bWVudCBhdCB0aGlzIHBvaW50XG5cbiAgICBkb2N1bWVudHNbZG9jU3RhcnRJbmRleCArIGldID0gZGVzZXJpYWxpemVyKGRhdGEsIG9wdGlvbnMpOyAvLyBBZGp1c3QgaW5kZXggYnkgdGhlIGRvY3VtZW50IHNpemVcblxuICAgIGluZGV4ID0gaW5kZXggKyBzaXplO1xuICB9IC8vIFJldHVybiBvYmplY3QgY29udGFpbmluZyBlbmQgaW5kZXggb2YgcGFyc2luZyBhbmQgbGlzdCBvZiBkb2N1bWVudHNcblxuXG4gIHJldHVybiBpbmRleDtcbn1cblxudmFyIGJzb24gPSB7XG4gIC8vIGNvbnN0YW50c1xuICAvLyBOT1RFOiB0aGlzIGlzIGRvbmUgdGhpcyB3YXkgYmVjYXVzZSByb2xsdXAgY2FuJ3QgcmVzb2x2ZSBhbiBgT2JqZWN0LmFzc2lnbmBlZCBleHBvcnRcbiAgQlNPTl9JTlQzMl9NQVg6IGNvbnN0YW50cy5CU09OX0lOVDMyX01BWCxcbiAgQlNPTl9JTlQzMl9NSU46IGNvbnN0YW50cy5CU09OX0lOVDMyX01JTixcbiAgQlNPTl9JTlQ2NF9NQVg6IGNvbnN0YW50cy5CU09OX0lOVDY0X01BWCxcbiAgQlNPTl9JTlQ2NF9NSU46IGNvbnN0YW50cy5CU09OX0lOVDY0X01JTixcbiAgSlNfSU5UX01BWDogY29uc3RhbnRzLkpTX0lOVF9NQVgsXG4gIEpTX0lOVF9NSU46IGNvbnN0YW50cy5KU19JTlRfTUlOLFxuICBCU09OX0RBVEFfTlVNQkVSOiBjb25zdGFudHMuQlNPTl9EQVRBX05VTUJFUixcbiAgQlNPTl9EQVRBX1NUUklORzogY29uc3RhbnRzLkJTT05fREFUQV9TVFJJTkcsXG4gIEJTT05fREFUQV9PQkpFQ1Q6IGNvbnN0YW50cy5CU09OX0RBVEFfT0JKRUNULFxuICBCU09OX0RBVEFfQVJSQVk6IGNvbnN0YW50cy5CU09OX0RBVEFfQVJSQVksXG4gIEJTT05fREFUQV9CSU5BUlk6IGNvbnN0YW50cy5CU09OX0RBVEFfQklOQVJZLFxuICBCU09OX0RBVEFfVU5ERUZJTkVEOiBjb25zdGFudHMuQlNPTl9EQVRBX1VOREVGSU5FRCxcbiAgQlNPTl9EQVRBX09JRDogY29uc3RhbnRzLkJTT05fREFUQV9PSUQsXG4gIEJTT05fREFUQV9CT09MRUFOOiBjb25zdGFudHMuQlNPTl9EQVRBX0JPT0xFQU4sXG4gIEJTT05fREFUQV9EQVRFOiBjb25zdGFudHMuQlNPTl9EQVRBX0RBVEUsXG4gIEJTT05fREFUQV9OVUxMOiBjb25zdGFudHMuQlNPTl9EQVRBX05VTEwsXG4gIEJTT05fREFUQV9SRUdFWFA6IGNvbnN0YW50cy5CU09OX0RBVEFfUkVHRVhQLFxuICBCU09OX0RBVEFfREJQT0lOVEVSOiBjb25zdGFudHMuQlNPTl9EQVRBX0RCUE9JTlRFUixcbiAgQlNPTl9EQVRBX0NPREU6IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERSxcbiAgQlNPTl9EQVRBX1NZTUJPTDogY29uc3RhbnRzLkJTT05fREFUQV9TWU1CT0wsXG4gIEJTT05fREFUQV9DT0RFX1dfU0NPUEU6IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERV9XX1NDT1BFLFxuICBCU09OX0RBVEFfSU5UOiBjb25zdGFudHMuQlNPTl9EQVRBX0lOVCxcbiAgQlNPTl9EQVRBX1RJTUVTVEFNUDogY29uc3RhbnRzLkJTT05fREFUQV9USU1FU1RBTVAsXG4gIEJTT05fREFUQV9MT05HOiBjb25zdGFudHMuQlNPTl9EQVRBX0xPTkcsXG4gIEJTT05fREFUQV9ERUNJTUFMMTI4OiBjb25zdGFudHMuQlNPTl9EQVRBX0RFQ0lNQUwxMjgsXG4gIEJTT05fREFUQV9NSU5fS0VZOiBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVksXG4gIEJTT05fREFUQV9NQVhfS0VZOiBjb25zdGFudHMuQlNPTl9EQVRBX01BWF9LRVksXG4gIEJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVDogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVCxcbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTjogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfRlVOQ1RJT04sXG4gIEJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWTogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWSxcbiAgQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlEOiBjb25zdGFudHMuQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlELFxuICBCU09OX0JJTkFSWV9TVUJUWVBFX01ENTogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1LFxuICBCU09OX0JJTkFSWV9TVUJUWVBFX1VTRVJfREVGSU5FRDogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfVVNFUl9ERUZJTkVELFxuICAvLyB3cmFwcGVkIHR5cGVzXG4gIENvZGU6IGNvZGUsXG4gIE1hcDogbWFwLFxuICBCU09OU3ltYm9sOiBzeW1ib2wsXG4gIERCUmVmOiBkYl9yZWYsXG4gIEJpbmFyeTogYmluYXJ5LFxuICBPYmplY3RJZDogb2JqZWN0aWQsXG4gIExvbmc6IGxvbmdfMSxcbiAgVGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gIERvdWJsZTogZG91YmxlXzEsXG4gIEludDMyOiBpbnRfMzIsXG4gIE1pbktleTogbWluX2tleSxcbiAgTWF4S2V5OiBtYXhfa2V5LFxuICBCU09OUmVnRXhwOiByZWdleHAsXG4gIERlY2ltYWwxMjg6IGRlY2ltYWwxMjgsXG4gIC8vIG1ldGhvZHNcbiAgc2VyaWFsaXplOiBzZXJpYWxpemUkMSxcbiAgc2VyaWFsaXplV2l0aEJ1ZmZlckFuZEluZGV4OiBzZXJpYWxpemVXaXRoQnVmZmVyQW5kSW5kZXgsXG4gIGRlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZSQyLFxuICBjYWxjdWxhdGVPYmplY3RTaXplOiBjYWxjdWxhdGVPYmplY3RTaXplJDEsXG4gIGRlc2VyaWFsaXplU3RyZWFtOiBkZXNlcmlhbGl6ZVN0cmVhbSxcbiAgc2V0SW50ZXJuYWxCdWZmZXJTaXplOiBzZXRJbnRlcm5hbEJ1ZmZlclNpemUsXG4gIC8vIGxlZ2FjeSBzdXBwb3J0XG4gIE9iamVjdElEOiBvYmplY3RpZCxcbiAgLy8gRXh0ZW5kZWQgSlNPTlxuICBFSlNPTjogZXh0ZW5kZWRfanNvblxufTtcbnZhciBic29uXzEgPSBic29uLkJTT05fSU5UMzJfTUFYO1xudmFyIGJzb25fMiA9IGJzb24uQlNPTl9JTlQzMl9NSU47XG52YXIgYnNvbl8zID0gYnNvbi5CU09OX0lOVDY0X01BWDtcbnZhciBic29uXzQgPSBic29uLkJTT05fSU5UNjRfTUlOO1xudmFyIGJzb25fNSA9IGJzb24uSlNfSU5UX01BWDtcbnZhciBic29uXzYgPSBic29uLkpTX0lOVF9NSU47XG52YXIgYnNvbl83ID0gYnNvbi5CU09OX0RBVEFfTlVNQkVSO1xudmFyIGJzb25fOCA9IGJzb24uQlNPTl9EQVRBX1NUUklORztcbnZhciBic29uXzkgPSBic29uLkJTT05fREFUQV9PQkpFQ1Q7XG52YXIgYnNvbl8xMCA9IGJzb24uQlNPTl9EQVRBX0FSUkFZO1xudmFyIGJzb25fMTEgPSBic29uLkJTT05fREFUQV9CSU5BUlk7XG52YXIgYnNvbl8xMiA9IGJzb24uQlNPTl9EQVRBX1VOREVGSU5FRDtcbnZhciBic29uXzEzID0gYnNvbi5CU09OX0RBVEFfT0lEO1xudmFyIGJzb25fMTQgPSBic29uLkJTT05fREFUQV9CT09MRUFOO1xudmFyIGJzb25fMTUgPSBic29uLkJTT05fREFUQV9EQVRFO1xudmFyIGJzb25fMTYgPSBic29uLkJTT05fREFUQV9OVUxMO1xudmFyIGJzb25fMTcgPSBic29uLkJTT05fREFUQV9SRUdFWFA7XG52YXIgYnNvbl8xOCA9IGJzb24uQlNPTl9EQVRBX0RCUE9JTlRFUjtcbnZhciBic29uXzE5ID0gYnNvbi5CU09OX0RBVEFfQ09ERTtcbnZhciBic29uXzIwID0gYnNvbi5CU09OX0RBVEFfU1lNQk9MO1xudmFyIGJzb25fMjEgPSBic29uLkJTT05fREFUQV9DT0RFX1dfU0NPUEU7XG52YXIgYnNvbl8yMiA9IGJzb24uQlNPTl9EQVRBX0lOVDtcbnZhciBic29uXzIzID0gYnNvbi5CU09OX0RBVEFfVElNRVNUQU1QO1xudmFyIGJzb25fMjQgPSBic29uLkJTT05fREFUQV9MT05HO1xudmFyIGJzb25fMjUgPSBic29uLkJTT05fREFUQV9ERUNJTUFMMTI4O1xudmFyIGJzb25fMjYgPSBic29uLkJTT05fREFUQV9NSU5fS0VZO1xudmFyIGJzb25fMjcgPSBic29uLkJTT05fREFUQV9NQVhfS0VZO1xudmFyIGJzb25fMjggPSBic29uLkJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVDtcbnZhciBic29uXzI5ID0gYnNvbi5CU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OO1xudmFyIGJzb25fMzAgPSBic29uLkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWTtcbnZhciBic29uXzMxID0gYnNvbi5CU09OX0JJTkFSWV9TVUJUWVBFX1VVSUQ7XG52YXIgYnNvbl8zMiA9IGJzb24uQlNPTl9CSU5BUllfU1VCVFlQRV9NRDU7XG52YXIgYnNvbl8zMyA9IGJzb24uQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQ7XG52YXIgYnNvbl8zNCA9IGJzb24uQ29kZTtcbnZhciBic29uXzM1ID0gYnNvbi5CU09OU3ltYm9sO1xudmFyIGJzb25fMzYgPSBic29uLkRCUmVmO1xudmFyIGJzb25fMzcgPSBic29uLkJpbmFyeTtcbnZhciBic29uXzM4ID0gYnNvbi5PYmplY3RJZDtcbnZhciBic29uXzM5ID0gYnNvbi5Mb25nO1xudmFyIGJzb25fNDAgPSBic29uLlRpbWVzdGFtcDtcbnZhciBic29uXzQxID0gYnNvbi5Eb3VibGU7XG52YXIgYnNvbl80MiA9IGJzb24uSW50MzI7XG52YXIgYnNvbl80MyA9IGJzb24uTWluS2V5O1xudmFyIGJzb25fNDQgPSBic29uLk1heEtleTtcbnZhciBic29uXzQ1ID0gYnNvbi5CU09OUmVnRXhwO1xudmFyIGJzb25fNDYgPSBic29uLkRlY2ltYWwxMjg7XG52YXIgYnNvbl80NyA9IGJzb24uc2VyaWFsaXplO1xudmFyIGJzb25fNDggPSBic29uLnNlcmlhbGl6ZVdpdGhCdWZmZXJBbmRJbmRleDtcbnZhciBic29uXzQ5ID0gYnNvbi5kZXNlcmlhbGl6ZTtcbnZhciBic29uXzUwID0gYnNvbi5jYWxjdWxhdGVPYmplY3RTaXplO1xudmFyIGJzb25fNTEgPSBic29uLmRlc2VyaWFsaXplU3RyZWFtO1xudmFyIGJzb25fNTIgPSBic29uLnNldEludGVybmFsQnVmZmVyU2l6ZTtcbnZhciBic29uXzUzID0gYnNvbi5PYmplY3RJRDtcbnZhciBic29uXzU0ID0gYnNvbi5FSlNPTjtcblxuZXhwb3J0IGRlZmF1bHQgYnNvbjtcbmV4cG9ydCB7IGJzb25fMSBhcyBCU09OX0lOVDMyX01BWCwgYnNvbl8yIGFzIEJTT05fSU5UMzJfTUlOLCBic29uXzMgYXMgQlNPTl9JTlQ2NF9NQVgsIGJzb25fNCBhcyBCU09OX0lOVDY0X01JTiwgYnNvbl81IGFzIEpTX0lOVF9NQVgsIGJzb25fNiBhcyBKU19JTlRfTUlOLCBic29uXzcgYXMgQlNPTl9EQVRBX05VTUJFUiwgYnNvbl84IGFzIEJTT05fREFUQV9TVFJJTkcsIGJzb25fOSBhcyBCU09OX0RBVEFfT0JKRUNULCBic29uXzEwIGFzIEJTT05fREFUQV9BUlJBWSwgYnNvbl8xMSBhcyBCU09OX0RBVEFfQklOQVJZLCBic29uXzEyIGFzIEJTT05fREFUQV9VTkRFRklORUQsIGJzb25fMTMgYXMgQlNPTl9EQVRBX09JRCwgYnNvbl8xNCBhcyBCU09OX0RBVEFfQk9PTEVBTiwgYnNvbl8xNSBhcyBCU09OX0RBVEFfREFURSwgYnNvbl8xNiBhcyBCU09OX0RBVEFfTlVMTCwgYnNvbl8xNyBhcyBCU09OX0RBVEFfUkVHRVhQLCBic29uXzE4IGFzIEJTT05fREFUQV9EQlBPSU5URVIsIGJzb25fMTkgYXMgQlNPTl9EQVRBX0NPREUsIGJzb25fMjAgYXMgQlNPTl9EQVRBX1NZTUJPTCwgYnNvbl8yMSBhcyBCU09OX0RBVEFfQ09ERV9XX1NDT1BFLCBic29uXzIyIGFzIEJTT05fREFUQV9JTlQsIGJzb25fMjMgYXMgQlNPTl9EQVRBX1RJTUVTVEFNUCwgYnNvbl8yNCBhcyBCU09OX0RBVEFfTE9ORywgYnNvbl8yNSBhcyBCU09OX0RBVEFfREVDSU1BTDEyOCwgYnNvbl8yNiBhcyBCU09OX0RBVEFfTUlOX0tFWSwgYnNvbl8yNyBhcyBCU09OX0RBVEFfTUFYX0tFWSwgYnNvbl8yOCBhcyBCU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQsIGJzb25fMjkgYXMgQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTiwgYnNvbl8zMCBhcyBCU09OX0JJTkFSWV9TVUJUWVBFX0JZVEVfQVJSQVksIGJzb25fMzEgYXMgQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlELCBic29uXzMyIGFzIEJTT05fQklOQVJZX1NVQlRZUEVfTUQ1LCBic29uXzMzIGFzIEJTT05fQklOQVJZX1NVQlRZUEVfVVNFUl9ERUZJTkVELCBic29uXzM0IGFzIENvZGUsIGJzb25fMzUgYXMgQlNPTlN5bWJvbCwgYnNvbl8zNiBhcyBEQlJlZiwgYnNvbl8zNyBhcyBCaW5hcnksIGJzb25fMzggYXMgT2JqZWN0SWQsIGJzb25fMzkgYXMgTG9uZywgYnNvbl80MCBhcyBUaW1lc3RhbXAsIGJzb25fNDEgYXMgRG91YmxlLCBic29uXzQyIGFzIEludDMyLCBic29uXzQzIGFzIE1pbktleSwgYnNvbl80NCBhcyBNYXhLZXksIGJzb25fNDUgYXMgQlNPTlJlZ0V4cCwgYnNvbl80NiBhcyBEZWNpbWFsMTI4LCBic29uXzQ3IGFzIHNlcmlhbGl6ZSwgYnNvbl80OCBhcyBzZXJpYWxpemVXaXRoQnVmZmVyQW5kSW5kZXgsIGJzb25fNDkgYXMgZGVzZXJpYWxpemUsIGJzb25fNTAgYXMgY2FsY3VsYXRlT2JqZWN0U2l6ZSwgYnNvbl81MSBhcyBkZXNlcmlhbGl6ZVN0cmVhbSwgYnNvbl81MiBhcyBzZXRJbnRlcm5hbEJ1ZmZlclNpemUsIGJzb25fNTMgYXMgT2JqZWN0SUQsIGJzb25fNTQgYXMgRUpTT04gfTtcbiIsIlxuZXhwb3J0cy5zbGVlcCA9ICh0aW1lKSA9PiBuZXcgUHJvbWlzZShcbiAgcmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSwgdGltZSlcbik7IiwiXG5yZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5jb25zdCB7IHBhcnNlSlNPTiB9ID0gcmVxdWlyZSgnLi9jb252ZXJzaW9uJyk7XG5jb25zdCB7IGVuY3J5cHQsIGRlY3J5cHQgfSA9IHJlcXVpcmUoJy4vY3J5cHRvJyk7XG5cblxuXG5jb25zdCBtYWtlRW5jcnlwdGVkUXVlcnkgPSBleHBvcnRzLm1ha2VFbmNyeXB0ZWRRdWVyeSA9IGZ1bmN0aW9uICh0b2tlbiwgcXVlcnksIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIG1peDogZW5jcnlwdCxcbiAgICBqb2luOiBkZWZhdWx0RW5jcnlwdE9wdGlvbnMuam9pblxuICB9LCBvcHRpb25zKTtcbiAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5nZXRDdXJyZW50U3RhbXAoKTtcbiAgY29uc3QgW2tleSwgZW5jcnlwdGVkUXVlcnldID0gZW5jcnlwdChKU09OLnN0cmluZ2lmeShxdWVyeSkpLnNwbGl0KG9wdHMuam9pbik7XG4gIGNvbnN0IG1peGVkID0gb3B0cy5taXgoYHRva2VuPSR7dG9rZW59JmtleT0ke2tleX0mdGltZXN0YW1wPSR7dGltZXN0YW1wfWApO1xuICByZXR1cm4ge1xuICAgIGNyZWRlbnRpYWw6IGVuY3J5cHQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdG9rZW4sIG1peGVkLCB0aW1lc3RhbXBcbiAgICB9KSksIGVuY3J5cHRlZFF1ZXJ5XG4gIH07XG59O1xuXG5jb25zdCBleHRyYWN0Q3JlZGVudGlhbCA9IGV4cG9ydHMuZXh0cmFjdENyZWRlbnRpYWwgPSBmdW5jdGlvbiAoY3JlZGVudGlhbCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGNyZWRlbnRpYWwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVkZW50aWFsIG11c3QgYmUgc3RyaW5nIScpO1xuICB9XG4gIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICByZW1peDogZGVjcnlwdCxcbiAgICBleHBpcmU6IDYwXG4gIH0sIG9wdGlvbnMpO1xuICBjb25zdCBjdXJyZW50ID0gRGF0ZS5nZXRDdXJyZW50U3RhbXAoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHRva2VuLCBtaXhlZCwgdGltZXN0YW1wIH0gPSBwYXJzZUpTT04oZGVjcnlwdChjcmVkZW50aWFsKSk7XG4gICAgY29uc3Qgb3JpZ2luID0gcXVlcnlzdHJpbmcucGFyc2Uob3B0cy5yZW1peChtaXhlZCkpO1xuICAgIGlmIChcbiAgICAgIG9yaWdpbi50b2tlbiAhPT0gdG9rZW4gfHxcbiAgICAgIG9yaWdpbi50aW1lc3RhbXAudG9TdHJpbmcoKSAhPT0gdGltZXN0YW1wLnRvU3RyaW5nKCkgfHxcbiAgICAgIGN1cnJlbnQgLSB0aW1lc3RhbXAgPiBvcHRzLmV4cGlyZVxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBvcmlnaW47XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuY29uc3QgZXh0cmFjdFF1ZXJ5ID0gZXhwb3J0cy5leHRyYWN0UXVlcnkgPSBmdW5jdGlvbiAoY3JlZGVudGlhbCwgZW5jcnlwdGVkUXVlcnksIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHJlbWl4OiBkZWNyeXB0LFxuICAgIGpvaW46IGRlZmF1bHRFbmNyeXB0T3B0aW9ucy5qb2luLFxuICAgIGV4cGlyZTogNjBcbiAgfSwgb3B0aW9ucyk7XG4gIGNvbnN0IG9yaWdpbiA9IGV4dHJhY3RDcmVkZW50aWFsKGNyZWRlbnRpYWwsIG9wdHMucmVtaXgsIG9wdHMuZXhwaXJlKTtcbiAgaWYgKG9yaWdpbikge1xuICAgIGNvbnN0IHsgdG9rZW4sIGtleSwgdGltZXN0YW1wIH0gPSBvcmlnaW47XG4gICAgcmV0dXJuIHsgdG9rZW4sIGtleSwgcXVlcnk6IHBhcnNlSlNPTihkZWNyeXB0KGtleSArIG9wdHMuam9pbiArIGVuY3J5cHRlZFF1ZXJ5KSksIHRpbWVzdGFtcCB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=