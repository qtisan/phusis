module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=require("buffer")},function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function i(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},s={};function a(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=f(e,(0|e)<0?-1:0,!0),i&&(s[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=f(e,e<0?-1:0,!1),i&&(o[e]=n),n)}function u(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return O}else{if(e<=-b)return w;if(e+1>=b)return B}return e<0?u(-e,t).neg():f(e%p|0,e/p|0,t)}function f(e,t,n){return new r(e,t,n)}r.fromInt=a,r.fromNumber=u,r.fromBits=f;var l=Math.pow;function _(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return _(e.substring(1),t,n).neg();for(var i=u(l(n,8)),o=g,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),f=parseInt(e.substring(s,s+a),n);if(a<8){var c=u(l(n,a));o=o.mul(c).add(u(f))}else o=(o=o.mul(i)).add(u(f))}return o.unsigned=t,o}function c(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?_(e,t):f(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=_,r.fromValue=c;var p=4294967296,h=p*p,b=h/2,d=a(1<<24),g=a(0);r.ZERO=g;var y=a(0,!0);r.UZERO=y;var m=a(1);r.ONE=m;var N=a(1,!0);r.UONE=N;var S=a(-1);r.NEG_ONE=S;var B=f(-1,2147483647,!1);r.MAX_VALUE=B;var O=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=O;var w=f(0,-2147483648,!1);r.MIN_VALUE=w;var E=r.prototype;E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},E.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(w)){var t=u(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=u(l(e,6),this.unsigned),o=this,s="";;){var a=o.div(i),f=(o.sub(a.mul(i)).toInt()>>>0).toString(e);if((o=a).isZero())return f+s;for(;f.length<6;)f="0"+f;s=""+f+s}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(w)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},E.isZero=function(){return 0===this.high&&0===this.low},E.eqz=E.isZero,E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return 1==(1&this.low)},E.isEven=function(){return 0==(1&this.low)},E.equals=function(e){return i(e)||(e=c(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},E.eq=E.equals,E.notEquals=function(e){return!this.eq(e)},E.neq=E.notEquals,E.ne=E.notEquals,E.lessThan=function(e){return this.comp(e)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(e){return this.comp(e)<=0},E.lte=E.lessThanOrEqual,E.le=E.lessThanOrEqual,E.greaterThan=function(e){return this.comp(e)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(e){return this.comp(e)>=0},E.gte=E.greaterThanOrEqual,E.ge=E.greaterThanOrEqual,E.compare=function(e){if(i(e)||(e=c(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(w)?w:this.not().add(m)},E.neg=E.negate,E.add=function(e){i(e)||(e=c(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,s=e.high>>>16,a=65535&e.high,u=e.low>>>16,l=0,_=0,p=0,h=0;return p+=(h+=o+(65535&e.low))>>>16,_+=(p+=r+u)>>>16,l+=(_+=n+a)>>>16,l+=t+s,f((p&=65535)<<16|(h&=65535),(l&=65535)<<16|(_&=65535),this.unsigned)},E.subtract=function(e){return i(e)||(e=c(e)),this.add(e.neg())},E.sub=E.subtract,E.multiply=function(e){if(this.isZero())return g;if(i(e)||(e=c(e)),n)return f(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(w))return e.isOdd()?w:g;if(e.eq(w))return this.isOdd()?w:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(d)&&e.lt(d))return u(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,o=this.low>>>16,s=65535&this.low,a=e.high>>>16,l=65535&e.high,_=e.low>>>16,p=65535&e.low,h=0,b=0,y=0,m=0;return y+=(m+=s*p)>>>16,b+=(y+=o*p)>>>16,y&=65535,b+=(y+=s*_)>>>16,h+=(b+=r*p)>>>16,b&=65535,h+=(b+=o*_)>>>16,b&=65535,h+=(b+=s*l)>>>16,h+=t*p+r*_+o*l+s*a,f((y&=65535)<<16|(m&=65535),(h&=65535)<<16|(b&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(e){if(i(e)||(e=c(e)),e.isZero())throw Error("division by zero");var t,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return N;o=y}else{if(this.eq(w))return e.eq(m)||e.eq(S)?w:e.eq(w)?m:(t=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?m:S:(r=this.sub(e.mul(t)),o=t.add(r.div(e)));if(e.eq(w))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=g}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:l(2,s-48),_=u(t),p=_.mul(e);p.isNegative()||p.gt(r);)p=(_=u(t-=a,this.unsigned)).mul(e);_.isZero()&&(_=m),o=o.add(_),r=r.sub(p)}return o},E.div=E.divide,E.modulo=function(e){return i(e)||(e=c(e)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},E.mod=E.modulo,E.rem=E.modulo,E.not=function(){return f(~this.low,~this.high,this.unsigned)},E.and=function(e){return i(e)||(e=c(e)),f(this.low&e.low,this.high&e.high,this.unsigned)},E.or=function(e){return i(e)||(e=c(e)),f(this.low|e.low,this.high|e.high,this.unsigned)},E.xor=function(e){return i(e)||(e=c(e)),f(this.low^e.low,this.high^e.high,this.unsigned)},E.shiftLeft=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):f(0,this.low<<e-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):f(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(e){if(i(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?f(this.low>>>e|t<<32-e,t>>>e,this.unsigned):f(32===e?t:t>>>e-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.shr_u=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},E.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},E.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e,t){e.exports=require("crypto")},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,i=n;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},function(e,t,n){const{createHash:r}=n(2),i={bit:6,map:"Q4KmX-EDCRopBTGS7as2rWVtuiYnHxz8LOPA0yZk3j6_qwehN9IlUJ51FMbvgfcd",cipher:"moerae_app_cipher"},o=t.encodeByMap=function(e,t){const n=Object.assign({bit:5,map:"jtzy_7qfkblovewangxum5dsrh86e3p9",cipher:"moerae_crypto",mixed:e=>e,join:"."},t);if(n.map.length<Math.pow(2,n.bit))throw new Error(`not enough characters in options.map, got ${n.map.length}, expected ${Math.pow(2,n.bit)}.`);if("function"!=typeof n.mixed)throw new Error(`options.mixed must be a function, but got ${typeof n.mixed}.`);let r=e,i="",o=null,s=null,a=0,u=0,f=n.cipher;const l=[],_=[];/^[0-9a-fA-F]+$/.test(r)||(r=Buffer.from(e).toString("hex"));for(let e=0;e<r.length;e+=8)l.push(r.substr(e,8));a=l[l.length-1].length,l.forEach(e=>{let t=parseInt(e,16).toString(2);for(;t.length<32;)t="0"+t;i+=t}),i=n.mixed(i);for(let e=0;e<i.length;e+=n.bit){const t=i.substr(e,n.bit);_.push(n.map[parseInt(t,2)]),u=t.length}return s=_.join(""),"string"==typeof f?(o=(f=Buffer.from(`##${a}##${u}##${n.cipher}`).toString("base64"))[f.length-1]+f.substr(1,f.length-2)+f[0],n.join?o+n.join+s:{key:o,code:s}):s},s=t.decodeByMap=function(e,t){const n=Object.assign({bit:5,map:"jtzy_7qfkblovewangxum5dsrh86e3p9",remix:e=>e,join:".",isHex:!1},t);if(n.map.length<Math.pow(2,n.bit))throw new Error(`not enough characters in options.map, got ${n.map.length}, expected ${Math.pow(2,n.bit)}.`);if("function"!=typeof n.remix)throw new Error(`options.remix must be a function, but got ${typeof n.remix}.`);const{bit:r,map:i,remix:o,join:s,isHex:a}=n;let u=null,f=null,l=null,_=null,c=null;if("object"==typeof e&&e.key&&e.code)u=e.key,f=e.code;else{if("string"!=typeof e||"string"!=typeof s)throw new Error("code must be a object with [key] & [code] or a string join key & code with options.join!");{const t=e.indexOf(s);u=e.substr(0,t),f=e.substr(t+s.length)}}c=(u=Buffer.from(u[u.length-1]+u.substr(1,u.length-2)+u[0],"base64").toString()).split("##"),l=parseInt(c[1]),_=parseInt(c[2]),u=c.slice(3).join("");let p="",h="";for(let e=0;e<f.length;e++){let t=parseInt(i.indexOf(f[e])).toString(2);for(;t.length<(e===f.length-1?_:r);)t="0"+t;p+=t}p=o(p);for(let e=0;e<p.length;e+=32){let t=parseInt(p.substr(e,32),2).toString(16);for(;t.length<(p.length<=e+32?l:8);)t="0"+t;h+=t}return a?h:Buffer.from(h,"hex").toString()};t.encrypt=function(e){return o(e,i)},t.decrypt=function(e){return s(e,i)},t.md5=function(e){return r("md5").update(e).digest("hex")}},function(e,t,n){var r=n(2);e.exports=function(){return r.randomBytes(16)}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(7)),r(n(4)),r(n(8)),r(n(15)),r(n(16))},function(e,t){function n(e){const t=[];let n=0;e+="A";for(let r=0;r<e.length;r++)e[r].toLowerCase()===e[r]&&r!==e.length-1||(t.push(e.substring(n,r).toLowerCase()),n=r);return t}function r(e,t){const n=e.split(t);for(let e=0;e<n.length;e++)if(0!==e){const t=n[e];n[e]=t[0].toUpperCase()+t.slice(1)}return n.join("")}t.parseJSON=e=>{try{return JSON.parse(e)}catch(e){return null}},t.camelToHyphenate=e=>n(e).join("-"),t.hyphenateToCamel=e=>r(e,"-"),t.underscoreToCamel=e=>r(e,"_"),t.camelToUnderscore=e=>n(e).join("_"),t.hyphenateToUnderscore=e=>e.split("-").join("_"),t.underscoreToHyphenate=e=>e.split("_").join("-");const i="zero^one^two^three^four^five^six^seven^eight^nine^ten^eleven^twelve^thirteen^fourteen^fifteen^sixteen^seventeen^eighteen^nineteen^^twenty^thirty^forty^fifty^sixty^seventy^eighty^ninety^hundred^^thousand^million^billion^trillion^quadrillion^quintillion".split("^"),o=[];for(let e=0;e<1e3;e++)o[e]=e<20?i[e]:e<100?i[19+Math.floor(e/10)]+(e%10==0?"":"-"+o[e%10]):i[Math.floor(e/100)]+" "+i[29]+(e%100==0?"":" and "+o[e%100]);const s=["","十","百","千","万","亿","点",""],a=["","拾","佰","仟","万","亿","点",""],u=["零","一","二","三","四","五","六","七","八","九"],f=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"];t.num2en=e=>{if(!/^\d*(\.\d*)?$/.test(e))return"Number is wrong!";const t=e.toString().split(".")[0].split(",").join("");let n,r="";for(let e=0;e<Math.ceil(t.length/3);e++)n=parseInt(t.substring(t.length-3*e-3,t.length-3*e),10),r=(0==e&&n>0&&n<100&&parseInt(t.substring(0,length-3),10)>0?" and ":"")+(0==n&&(e>0||0!=t.toString(10))?"":o[n])+(0==n?"":" "+(void 0===i[30+e]?"undefined":i[30+e]))+(0==e||0==n||n>0&&""==r?"":", ")+r;if(e.toString().split(".")[1]){let t=e.toString().split(".")[1].split(",").join("");for(let e=0;e<t.length;e++)n=parseInt(t.substring(e,e+1),10),r+=(0==e?(""==r?i[0]:"")+"point ":"")+(0==n&&0!=e&&!parseInt(t.substring(e+1),10)>0?"":o[n]+" ")}return r.trim()},t.num2cn=(e,t)=>{if(!/^\d*(\.\d*)?$/.test(e))return"Number is wrong!";const n=t?f:u,r=t?[...a]:[...s],i=e.toString().replace(/(^0*)/g,"").split(".");let o=0,l="",_=i[0];for(let e=_.length-1;e>=0;e--){switch(o){case 0:l=r[7]+l;break;case 4:new RegExp("0{4}\\d{"+(_.length-e-1)+"}$").test(_)||(l=r[4]+l);break;case 8:l=r[5]+l,r[7]=r[5],o=0}o%4==2&&0!=_[e+2]&&0==_[e+1]&&(l=n[0]+l),0!=_[e]&&(l=n[_[e]]+r[o%4]+l),o++}if(i.length>1){l+=r[6];for(let e=0;e<i[1].length;e++)l+=n[i[1][e]]}return l},t.list2Tree=(e,t)=>{const n={id:"id",parent:"parent_id",children:"children",...t},r=[],i=function(e){const t={...e};return function e(n,r){let i=null;if(n&&n.length)for(const[,o]of n.entries()){if(r(o)){i=o;break}if(i=e(o[t.children],r))break}return i}}(n),o=[...e];for(;o.length;)for(let e=o.length-1;e>=0;e--){const t=o[e];if(null==t[n.parent]||""===t[n.parent]||0==t[n.parent]||0==t[n.parent])r.push({...t,[n.children]:[]}),o.splice(e,1);else{const s=i(r,e=>t[n.parent]===e[n.id]);s&&(s[n.children]=s[n.children]||[],s[n.children].push({...t}),o.splice(e,1))}}return r}},function(e,t,n){const r=n(9),i=n(10),o=n(11),{ObjectID:s}=n(14),{encodeByMap:a}=n(4);t.genSerial=e=>{e=e||"";let t=(new Date).getTime().toString(),n=Math.floor(10*Math.random()),r=t.length;if(r<15){let e=15-r;for(;e-- >0;)t+="0"}return e+Math.random().toString().slice(2,8)+t.slice(0,n)+Math.random().toString().slice(5,10)+t.slice(n)+Math.random().toString().slice(9,14)+n},t.genUUID=(e,t)=>{switch(e=e||"timestamp"){case"timestamp":return r();case"namespace":return o(t=t||"http://phusis.imqx.com",o.URL);case"random":return i();default:return r()}},t.genId=()=>a((new s).toString(),{cipher:null,mixed:e=>e.substr(1)})},function(e,t,n){var r,i,o=n(5),s=n(3),a=0,u=0;e.exports=function(e,t,n){var f=t&&n||0,l=t||[],_=(e=e||{}).node||r,c=void 0!==e.clockseq?e.clockseq:i;if(null==_||null==c){var p=o();null==_&&(_=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==c&&(c=i=16383&(p[6]<<8|p[7]))}var h=void 0!==e.msecs?e.msecs:(new Date).getTime(),b=void 0!==e.nsecs?e.nsecs:u+1,d=h-a+(b-u)/1e4;if(d<0&&void 0===e.clockseq&&(c=c+1&16383),(d<0||h>a)&&void 0===e.nsecs&&(b=0),b>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=h,u=b,i=c;var g=(1e4*(268435455&(h+=122192928e5))+b)%4294967296;l[f++]=g>>>24&255,l[f++]=g>>>16&255,l[f++]=g>>>8&255,l[f++]=255&g;var y=h/4294967296*1e4&268435455;l[f++]=y>>>8&255,l[f++]=255&y,l[f++]=y>>>24&15|16,l[f++]=y>>>16&255,l[f++]=c>>>8|128,l[f++]=255&c;for(var m=0;m<6;++m)l[f+m]=_[m];return t||s(l)}},function(e,t,n){var r=n(5),i=n(3);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},function(e,t,n){var r=n(12),i=n(13);e.exports=r("v5",80,i)},function(e,t,n){var r=n(3);e.exports=function(e,t,n){var i=function(e,i,o,s){var a=o&&s||0;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(e)),"string"==typeof i&&(i=function(e){var t=[];return e.replace(/[a-fA-F0-9]{2}/g,function(e){t.push(parseInt(e,16))}),t}(i)),!Array.isArray(e))throw TypeError("value must be an array of bytes");if(!Array.isArray(i)||16!==i.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");var u=n(i.concat(e));if(u[6]=15&u[6]|t,u[8]=63&u[8]|128,o)for(var f=0;f<16;++f)o[a+f]=u[f];return o||r(u)};try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e){return"function"==typeof Buffer.from?Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")):Array.isArray(e)?e=new Buffer(e):"string"==typeof e&&(e=new Buffer(e,"utf8")),r.createHash("sha1").update(e).digest()}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"BSON_INT32_MAX",function(){return bson_1}),__webpack_require__.d(__webpack_exports__,"BSON_INT32_MIN",function(){return bson_2}),__webpack_require__.d(__webpack_exports__,"BSON_INT64_MAX",function(){return bson_3}),__webpack_require__.d(__webpack_exports__,"BSON_INT64_MIN",function(){return bson_4}),__webpack_require__.d(__webpack_exports__,"JS_INT_MAX",function(){return bson_5}),__webpack_require__.d(__webpack_exports__,"JS_INT_MIN",function(){return bson_6}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_NUMBER",function(){return bson_7}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_STRING",function(){return bson_8}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_OBJECT",function(){return bson_9}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_ARRAY",function(){return bson_10}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_BINARY",function(){return bson_11}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_UNDEFINED",function(){return bson_12}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_OID",function(){return bson_13}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_BOOLEAN",function(){return bson_14}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DATE",function(){return bson_15}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_NULL",function(){return bson_16}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_REGEXP",function(){return bson_17}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DBPOINTER",function(){return bson_18}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_CODE",function(){return bson_19}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_SYMBOL",function(){return bson_20}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_CODE_W_SCOPE",function(){return bson_21}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_INT",function(){return bson_22}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_TIMESTAMP",function(){return bson_23}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_LONG",function(){return bson_24}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_DECIMAL128",function(){return bson_25}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_MIN_KEY",function(){return bson_26}),__webpack_require__.d(__webpack_exports__,"BSON_DATA_MAX_KEY",function(){return bson_27}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_DEFAULT",function(){return bson_28}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_FUNCTION",function(){return bson_29}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_BYTE_ARRAY",function(){return bson_30}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_UUID",function(){return bson_31}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_MD5",function(){return bson_32}),__webpack_require__.d(__webpack_exports__,"BSON_BINARY_SUBTYPE_USER_DEFINED",function(){return bson_33}),__webpack_require__.d(__webpack_exports__,"Code",function(){return bson_34}),__webpack_require__.d(__webpack_exports__,"BSONSymbol",function(){return bson_35}),__webpack_require__.d(__webpack_exports__,"DBRef",function(){return bson_36}),__webpack_require__.d(__webpack_exports__,"Binary",function(){return bson_37}),__webpack_require__.d(__webpack_exports__,"ObjectId",function(){return bson_38}),__webpack_require__.d(__webpack_exports__,"Long",function(){return bson_39}),__webpack_require__.d(__webpack_exports__,"Timestamp",function(){return bson_40}),__webpack_require__.d(__webpack_exports__,"Double",function(){return bson_41}),__webpack_require__.d(__webpack_exports__,"Int32",function(){return bson_42}),__webpack_require__.d(__webpack_exports__,"MinKey",function(){return bson_43}),__webpack_require__.d(__webpack_exports__,"MaxKey",function(){return bson_44}),__webpack_require__.d(__webpack_exports__,"BSONRegExp",function(){return bson_45}),__webpack_require__.d(__webpack_exports__,"Decimal128",function(){return bson_46}),__webpack_require__.d(__webpack_exports__,"serialize",function(){return bson_47}),__webpack_require__.d(__webpack_exports__,"serializeWithBufferAndIndex",function(){return bson_48}),__webpack_require__.d(__webpack_exports__,"deserialize",function(){return bson_49}),__webpack_require__.d(__webpack_exports__,"calculateObjectSize",function(){return bson_50}),__webpack_require__.d(__webpack_exports__,"deserializeStream",function(){return bson_51}),__webpack_require__.d(__webpack_exports__,"setInternalBufferSize",function(){return bson_52}),__webpack_require__.d(__webpack_exports__,"ObjectID",function(){return bson_53}),__webpack_require__.d(__webpack_exports__,"EJSON",function(){return bson_54});var long__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),long__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__),buffer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),buffer__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__),commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var map=createCommonjsModule(function(e){if(void 0!==commonjsGlobal.Map)e.exports=commonjsGlobal.Map,e.exports.Map=commonjsGlobal.Map;else{var t=function(e){this._keys=[],this._values={};for(var t=0;t<e.length;t++)if(null!=e[t]){var n=e[t],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};t.prototype.clear=function(){this._keys=[],this._values={}},t.prototype.delete=function(e){var t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)},t.prototype.entries=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?[n,e._values[n].v]:void 0,done:void 0===n}}}},t.prototype.forEach=function(e,t){t=t||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];e.call(t,this._values[r].v,r,t)}},t.prototype.get=function(e){return this._values[e]?this._values[e].v:void 0},t.prototype.has=function(e){return null!=this._values[e]},t.prototype.keys=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?n:void 0,done:void 0===n}}}},t.prototype.set=function(e,t){return this._values[e]?(this._values[e].v=t,this):(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1},this)},t.prototype.values=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?e._values[n].v:void 0,done:void 0===n}}}},Object.defineProperty(t.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),e.exports=t}}),map_1=map.Map;long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.toExtendedJSON=function(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}},long__WEBPACK_IMPORTED_MODULE_0___default.a.fromExtendedJSON=function(e,t){var n=long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n},Object.defineProperty(long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype,"_bsontype",{value:"Long"});var long_1=long__WEBPACK_IMPORTED_MODULE_0___default.a;function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Double=function(){function e(t){_classCallCheck(this,e),this.value=t}return _createClass(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseFloat(t.$numberDouble):new e(parseFloat(t.$numberDouble))}}]),e}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Timestamp=function(e){function t(e,n){var r;return _classCallCheck$1(this,t),r=long_1.isLong(e)?_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e.low,e.high)):_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e,n)),_possibleConstructorReturn(r)}return _inherits(t,long_1),_createClass$1(t,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(e){return new t(long_1.fromInt(e))}},{key:"fromNumber",value:function(e){return new t(long_1.fromNumber(e))}},{key:"fromBits",value:function(e,n){return new t(e,n)}},{key:"fromString",value:function(e,n){return new t(long_1.fromString(e,n))}},{key:"fromExtendedJSON",value:function(e){return new t(e.$timestamp.i,e.$timestamp.t)}}]),t}();Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,require$$0={};function normalizedFunctionString(e){return e.toString().replace("function(","function (")}function insecureRandomBytes(e){for(var t=new Uint8Array(e),n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(e){return window.crypto.getRandomValues(new Uint8Array(e))};else{try{randomBytes=require$$0.randomBytes}catch(e){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}"function"==typeof global.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global.clearTimeout&&(cachedClearTimeout=clearTimeout);var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(e,t){this.fun=e,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(e){var t=.001*performanceNow.call(performance),n=Math.floor(t),r=Math.floor(t%1*1e9);return e&&(n-=e[0],(r-=e[1])<0&&(n--,r+=1e9)),[n,r]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},inherits;inherits="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e};var inherits$1=inherits;function _typeof$1(e){return(_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var formatRegExp=/%[sdj%]/g;function format(e){if(!isString(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(inspect(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global.process))return function(){return deprecate(e,t).apply(this,arguments)};var n=!1;return function(){return n||(console.error(t),n=!0),e.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){debugs[e]=function(){var t=format.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else debugs[e]=function(){};return debugs[e]}function inspect(e,t){var n={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),isBoolean(t)?n.showHidden=t:t&&_extend(n,t),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,e,n.depth)}function stylizeWithColor(e,t){var n=inspect.styles[t];return n?"["+inspect.colors[n][0]+"m"+e+"["+inspect.colors[n][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function formatValue(e,t,n){if(e.customInspect&&t&&isFunction(t.inspect)&&t.inspect!==inspect&&(!t.constructor||t.constructor.prototype!==t)){var r=t.inspect(n,e);return isString(r)||(r=formatValue(e,r,n)),r}var i=formatPrimitive(e,t);if(i)return i;var o=Object.keys(t),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(t)),isError(t)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(t);if(0===o.length){if(isFunction(t)){var a=t.name?": "+t.name:"";return e.stylize("[Function"+a+"]","special")}if(isRegExp(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(isDate(t))return e.stylize(Date.prototype.toString.call(t),"date");if(isError(t))return formatError(t)}var u,f="",l=!1,_=["{","}"];(isArray(t)&&(l=!0,_=["[","]"]),isFunction(t))&&(f=" [Function"+(t.name?": "+t.name:"")+"]");return isRegExp(t)&&(f=" "+RegExp.prototype.toString.call(t)),isDate(t)&&(f=" "+Date.prototype.toUTCString.call(t)),isError(t)&&(f=" "+formatError(t)),0!==o.length||l&&0!=t.length?n<0?isRegExp(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=l?formatArray(e,t,n,s,o):o.map(function(r){return formatProperty(e,t,n,s,r,l)}),e.seen.pop(),reduceToSingleString(u,f,_)):_[0]+f+_[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)hasOwnProperty(t,String(s))?o.push(formatProperty(e,t,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,t,n,r,i,!0))}),o}function formatProperty(e,t,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(u.value)<0?(a=isNull(n)?formatValue(e,u.value,null):formatValue(e,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function reduceToSingleString(e,t,n){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"===_typeof$1(e)}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"===_typeof$1(e)&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof$1(e)||void 0===e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var e=new Date,t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],t].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(e,t){if(!t||!isObject(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog};function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),e}var Buffer$1=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(e){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(e){return e.toString("hex")}function makeObjectIdError(e,t){var n=e[t];return new TypeError('ObjectId string "'.concat(e,'" contains invalid character "').concat(n,'" with character code (').concat(e.charCodeAt(t),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function e(t){if(_classCallCheck$2(this,e),t instanceof e)return t;if(null==t||"number"==typeof t)return this.id=e.generate(t),void(e.cacheHexString&&(this.__id=this.toString("hex")));var n=e.isValid(t);if(!n&&null!=t)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(n&&"string"==typeof t&&24===t.length&&hasBufferType)return new e(Buffer$1.from(t,"hex"));if(n&&"string"==typeof t&&24===t.length)return e.createFromHexString(t);if(null==t||12!==t.length){if(null!=t&&t.toHexString)return e.createFromHexString(t.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=t,e.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(e,[{key:"toHexString",value:function(){if(e.cacheHexString&&this.__id)return this.__id;var t="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return t=convertToHex(this.id),e.cacheHexString&&(this.__id=t),t;for(var n=0;n<this.id.length;n++){var r=hexTable[this.id.charCodeAt(n)];if("string"!=typeof r)throw makeObjectIdError(this.id,n);t+=r}return e.cacheHexString&&(this.__id=t),t}},{key:"toString",value:function(e){return this.id&&this.id.copy?this.id.toString("string"==typeof e?e:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(t){return t instanceof e?this.toString()===t.toString():"string"==typeof t&&e.isValid(t)&&12===t.length&&this.id instanceof _Buffer?t===this.id.toString("binary"):"string"==typeof t&&e.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&e.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof e||t.toHexString))&&t.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return e.index=(e.index+1)%16777215}},{key:"generate",value:function(t){"number"!=typeof t&&(t=~~(Date.now()/1e3));var n=e.getInc(),r=Buffer$1.alloc(12);return r[3]=255&t,r[2]=t>>8&255,r[1]=t>>16&255,r[0]=t>>24&255,r[4]=PROCESS_UNIQUE[0],r[5]=PROCESS_UNIQUE[1],r[6]=PROCESS_UNIQUE[2],r[7]=PROCESS_UNIQUE[3],r[8]=PROCESS_UNIQUE[4],r[11]=255&n,r[10]=n>>8&255,r[9]=n>>16&255,r}},{key:"createPk",value:function(){return new e}},{key:"createFromTime",value:function(t){var n=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return n[3]=255&t,n[2]=t>>8&255,n[1]=t>>16&255,n[0]=t>>24&255,new e(n)}},{key:"createFromHexString",value:function(t){if(void 0===t||null!=t&&24!==t.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new e(Buffer$1.from(t,"hex"));for(var n=new _Buffer(12),r=0,i=0;i<24;)n[r++]=decodeLookup[t.charCodeAt(i++)]<<4|decodeLookup[t.charCodeAt(i++)];return new e(n)}},{key:"isValid",value:function(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&checkForHexRegExp.test(t):t instanceof e||(t instanceof _Buffer&&12===t.length||!!t.toHexString&&(12===t.id.length||24===t.id.length&&checkForHexRegExp.test(t.id)))))}},{key:"fromExtendedJSON",value:function(t){return new e(t.$oid)}}]),e}();ObjectId.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1(function(e){return ObjectId.generate(e)},"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(e){this.id[3]=255&e,this.id[2]=e>>8&255,this.id[1]=e>>16&255,this.id[0]=e>>24&255}}),ObjectId.prototype[util.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),e}function alphabetize(e){return e.split("").sort().join("")}var BSONRegExp=function(){function e(t,n){_classCallCheck$3(this,e),this.pattern=t||"",this.options=n?alphabetize(n):"";for(var r=0;r<this.options.length;r++)if("i"!==this.options[r]&&"m"!==this.options[r]&&"x"!==this.options[r]&&"l"!==this.options[r]&&"s"!==this.options[r]&&"u"!==this.options[r])throw new Error("The regular expression option [".concat(this.options[r],"] is not supported"))}return _createClass$3(e,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$regularExpression.pattern,t.$regularExpression.options.split("").sort().join(""))}}]),e}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$4(e,t,n){return t&&_defineProperties$4(e.prototype,t),n&&_defineProperties$4(e,n),e}var BSONSymbol=function(){function e(t){_classCallCheck$4(this,e),this.value=t}return _createClass$4(e,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$symbol)}}]),e}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$5(e,t,n){return t&&_defineProperties$5(e.prototype,t),n&&_defineProperties$5(e,n),e}var Int32=function(){function e(t){_classCallCheck$5(this,e),this.value=t}return _createClass$5(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseInt(t.$numberInt,10):new e(t.$numberInt)}}]),e}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$6(e,t,n){return t&&_defineProperties$6(e.prototype,t),n&&_defineProperties$6(e,n),e}var Code=function(){function e(t,n){_classCallCheck$6(this,e),this.code=t,this.scope=n}return _createClass$6(e,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$code,t.$scope)}}]),e}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(e){return!isNaN(parseInt(e,10))}function divideu128(e){var t=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function multiply64x2(e,t){if(!e&&!t)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=e.shiftRightUnsigned(32),r=new long_1(e.getLowBits(),0),i=t.shiftRightUnsigned(32),o=new long_1(t.getLowBits(),0),s=n.multiply(i),a=n.multiply(o),u=r.multiply(i),f=r.multiply(o);return s=s.add(a.shiftRightUnsigned(32)),a=new long_1(a.getLowBits(),0).add(u).add(f.shiftRightUnsigned(32)),{high:s=s.add(a.shiftRightUnsigned(32)),low:f=a.shiftLeft(32).add(new long_1(f.getLowBits(),0))}}function lessThan(e,t){var n=e.high>>>0,r=t.high>>>0;return n<r||n===r&&e.low>>>0<t.low>>>0}function invalidErr(e,t){throw new TypeError('"'.concat(e,'" is not a valid Decimal128 string - ').concat(t))}function Decimal128(e){this.bytes=e}Decimal128.fromString=function(e){var t,n=!1,r=!1,i=!1,o=0,s=0,a=0,u=0,f=0,l=[0],_=0,c=0,p=0,h=0,b=0,d=0,g=[0,0],y=[0,0],m=0;if(e.length>=7e3)throw new TypeError(e+" not a valid Decimal128 string");var N=e.match(PARSE_STRING_REGEXP),S=e.match(PARSE_INF_REGEXP),B=e.match(PARSE_NAN_REGEXP);if(!N&&!S&&!B||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(N){var O=N[2],w=N[4],E=N[5],A=N[6];w&&void 0===A&&invalidErr(e,"missing exponent power"),w&&void 0===O&&invalidErr(e,"missing exponent base"),void 0===w&&(E||A)&&invalidErr(e,"missing e before exponent")}if("+"!==e[m]&&"-"!==e[m]||(n="-"===e[m++]),!isDigit(e[m])&&"."!==e[m]){if("i"===e[m]||"I"===e[m])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(e[m])||"."===e[m];)"."!==e[m]?(_<34&&("0"!==e[m]||i)&&(i||(f=s),i=!0,l[c++]=parseInt(e[m],10),_+=1),i&&(a+=1),r&&(u+=1),s+=1,m+=1):(r&&invalidErr(e,"contains multiple periods"),r=!0,m+=1);if(r&&!s)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[m]||"E"===e[m]){var v=e.substr(++m).match(EXPONENT_REGEX);if(!v||!v[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));b=parseInt(v[0],10),m+=v[0].length}if(e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(p=0,_){if(h=_-1,1!==(o=a))for(;"0"===e[f+o-1];)o-=1}else p=0,h=0,l[0]=0,a=1,_=1,o=0;for(b<=u&&u-b>16384?b=EXPONENT_MIN:b-=u;b>EXPONENT_MAX;){if((h+=1)-p>MAX_DIGITS){if(l.join("").match(/^0+$/)){b=EXPONENT_MAX;break}invalidErr(e,"overflow")}b-=1}for(;b<EXPONENT_MIN||_<a;){if(0===h&&o<_){b=EXPONENT_MIN,o=0;break}if(_<a?a-=1:h-=1,b<EXPONENT_MAX)b+=1;else{if(l.join("").match(/^0+$/)){b=EXPONENT_MAX;break}invalidErr(e,"overflow")}}if(h-p+1<o){var T=s;r&&(f+=1,T+=1),n&&(f+=1,T+=1);var I=parseInt(e[f+h+1],10),D=0;if(I>=5&&(D=1,5===I))for(D=l[h]%2==1,d=f+h+2;d<T;d++)if(parseInt(e[d],10)){D=1;break}if(D)for(var $=h;$>=0;$--)if(++l[$]>9&&(l[$]=0,0===$)){if(!(b<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));b+=1,l[$]=1}}if(g=long_1.fromNumber(0),y=long_1.fromNumber(0),0===o)g=long_1.fromNumber(0),y=long_1.fromNumber(0);else if(h-p<17){var x=p;for(y=long_1.fromNumber(l[x++]),g=new long_1(0,0);x<=h;x++)y=(y=y.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[x]))}else{var R=p;for(g=long_1.fromNumber(l[R++]);R<=h-17;R++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[R]));for(y=long_1.fromNumber(l[R++]);R<=h;R++)y=(y=y.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[R]))}var k=multiply64x2(g,long_1.fromString("100000000000000000"));k.low=k.low.add(y),lessThan(k.low,y)&&(k.high=k.high.add(long_1.fromNumber(1))),t=b+EXPONENT_BIAS;var M={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};k.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(M.high=M.high.or(long_1.fromNumber(3).shiftLeft(61)),M.high=M.high.or(long_1.fromNumber(t).and(long_1.fromNumber(16383).shiftLeft(47))),M.high=M.high.or(k.high.and(long_1.fromNumber(0x7fffffffffff)))):(M.high=M.high.or(long_1.fromNumber(16383&t).shiftLeft(49)),M.high=M.high.or(k.high.and(long_1.fromNumber(562949953421311)))),M.low=k.low,n&&(M.high=M.high.or(long_1.fromString("9223372036854775808")));var P=Buffer$2.alloc(16);return m=0,P[m++]=255&M.low.low,P[m++]=M.low.low>>8&255,P[m++]=M.low.low>>16&255,P[m++]=M.low.low>>24&255,P[m++]=255&M.low.high,P[m++]=M.low.high>>8&255,P[m++]=M.low.high>>16&255,P[m++]=M.low.high>>24&255,P[m++]=255&M.high.low,P[m++]=M.high.low>>8&255,P[m++]=M.high.low>>16&255,P[m++]=M.high.low>>24&255,P[m++]=255&M.high.high,P[m++]=M.high.high>>8&255,P[m++]=M.high.high>>16&255,P[m++]=M.high.high>>24&255,new Decimal128(P)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var e,t,n,r,i,o,s=0,a=new Array(36),u=0;u<a.length;u++)a[u]=0;var f,l,_,c,p,h=0,b=!1,d={parts:new Array(4)},g=[];h=0;var y=this.bytes;if(r=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,n=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,t=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,e=y[h++]|y[h++]<<8|y[h++]<<16|y[h++]<<24,h=0,{low:new long_1(r,n),high:new long_1(t,e)}.high.lessThan(long_1.ZERO)&&g.push("-"),(i=e>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return g.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=e>>15&EXPONENT_MASK,_=8+(e>>14&1)}else _=e>>14&7,o=e>>17&EXPONENT_MASK;if(f=o-EXPONENT_BIAS,d.parts[0]=(16383&e)+((15&_)<<14),d.parts[1]=t,d.parts[2]=n,d.parts[3]=r,0===d.parts[0]&&0===d.parts[1]&&0===d.parts[2]&&0===d.parts[3])b=!0;else for(p=3;p>=0;p--){var m=0,N=divideu128(d);if(d=N.quotient,m=N.rem.low)for(c=8;c>=0;c--)a[9*p+c]=m%10,m=Math.floor(m/10)}if(b)s=1,a[h]=0;else for(s=36;!a[h];)s-=1,h+=1;if((l=s-1+f)>=34||l<=-7||f>0){if(s>34)return g.push(0),f>0?g.push("E+"+f):f<0&&g.push("E"+f),g.join("");g.push(a[h++]),(s-=1)&&g.push(".");for(var S=0;S<s;S++)g.push(a[h++]);g.push("E"),l>0?g.push("+"+l):g.push(l)}else if(f>=0)for(var B=0;B<s;B++)g.push(a[h++]);else{var O=s+f;if(O>0)for(var w=0;w<O;w++)g.push(a[h++]);else g.push("0");for(g.push(".");O++<0;)g.push("0");for(var E=0;E<s-Math.max(O-1,0);E++)g.push(a[h++])}return g.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(e){return Decimal128.fromString(e.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$7(e,t,n){return t&&_defineProperties$7(e.prototype,t),n&&_defineProperties$7(e,n),e}var MinKey=function(){function e(){_classCallCheck$7(this,e)}return _createClass$7(e,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$8(e,t,n){return t&&_defineProperties$8(e.prototype,t),n&&_defineProperties$8(e,n),e}var MaxKey=function(){function e(){_classCallCheck$8(this,e)}return _createClass$8(e,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$9(e,t,n){return t&&_defineProperties$9(e.prototype,t),n&&_defineProperties$9(e,n),e}var DBRef=function(){function e(t,n,r,i){_classCallCheck$9(this,e);var o=t.split(".");2===o.length&&(r=o.shift(),t=o.shift()),this.collection=t,this.oid=n,this.db=r,this.fields=i||{}}return _createClass$9(e,[{key:"toJSON",value:function(){var e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}},{key:"toExtendedJSON",value:function(){var e={$ref:this.collection,$id:this.oid};return this.db&&(e.$db=this.db),e=Object.assign(e,this.fields)}}],[{key:"fromExtendedJSON",value:function(t){var n=Object.assign({},t);return["$ref","$id","$db"].forEach(function(e){return delete n[e]}),new e(t.$ref,t.$id,t.$db,n)}}]),e}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(e){this.collection=e},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$a(e,t,n){return t&&_defineProperties$a(e.prototype,t),n&&_defineProperties$a(e,n),e}var Buffer$3=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,Binary=function(){function e(t,n){if(_classCallCheck$a(this,e),!(null==t||"string"==typeof t||Buffer$3.isBuffer(t)||t instanceof Uint8Array||Array.isArray(t)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==n?BSON_BINARY_SUBTYPE_DEFAULT:n,this.position=0,null==t||t instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(e.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE)):this.buffer=new Array(e.BUFFER_SIZE);else{if("string"==typeof t)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(t);else{if("undefined"==typeof Uint8Array&&!Array.isArray(t))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(t)}else this.buffer=t;this.position=t.length}}return _createClass$a(e,[{key:"put",value:function(t){if(null!=t.length&&"number"!=typeof t&&1!==t.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof t&&t<0||t>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var n=null;if(n="string"==typeof t?t.charCodeAt(0):null!=t.length?t[0]:t,this.buffer.length>this.position)this.buffer[this.position++]=n;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var r=Buffer$3.alloc(e.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=n}else{var i=null;i=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE+this.buffer.length)):new Array(e.BUFFER_SIZE+this.buffer.length);for(var o=0;o<this.buffer.length;o++)i[o]=this.buffer[o];this.buffer=i,this.buffer[this.position++]=n}}},{key:"write",value:function(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+e.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+e.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(e)&&Buffer$3.isBuffer(this.buffer))e.copy(this.buffer,t,0,e.length),this.position=t+e.length>this.position?t+e.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof e&&Buffer$3.isBuffer(this.buffer))this.buffer.write(e,t,"binary"),this.position=t+e.length>this.position?t+e.length:this.position;else if(isUint8Array(e)||Array.isArray(e)&&"string"!=typeof e){for(var i=0;i<e.length;i++)this.buffer[t++]=e[i];this.position=t>this.position?t:this.position}else if("string"==typeof e){for(var o=0;o<e.length;o++)this.buffer[t++]=e.charCodeAt(o);this.position=t>this.position?t:this.position}}},{key:"read",value:function(e,t){if(t=t&&t>0?t:this.position,this.buffer.slice)return this.buffer.slice(e,e+t);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t)):new Array(t),r=0;r<t;r++)n[r]=this.buffer[e++];return n}},{key:"value",value:function(e){if((e=null!=e&&e)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(e){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var t=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)t[n]=this.buffer[n];return t}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(e){return null!=this.buffer?this.buffer.slice(0,this.position).toString(e):""}},{key:"toExtendedJSON",value:function(){var e=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),t=Number(this.sub_type).toString(16);return{$binary:{base64:e,subType:1===t.length?"0"+t:t}}}}],[{key:"fromExtendedJSON",value:function(t){var n=t.$binary.subType?parseInt(t.$binary.subType,16):0;return new e(Buffer$3.from(t.$binary.base64,"base64"),n)}}]),e}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)}function writeStringToArray(e){for(var t="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e.length)):new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function convertArraytoUtf8BinaryString(e,t,n){for(var r="",i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(e){return(_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(e,t,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(n>=BSON_INT32_MIN&&n<=BSON_INT32_MAX)return new int_32(n);if(n>=BSON_INT64_MIN&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter(function(e){return e.startsWith("$")&&null!=n[e]}),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var a=n.$date,u=new Date;return"string"==typeof a?u.setTime(Date.parse(a)):long_1.isLong(a)?u.setTime(a.toNumber()):"number"==typeof a&&r.relaxed&&u.setTime(a),u}if(null!=n.$code){var f=Object.assign({},n);return n.$scope&&(f.$scope=deserializeValue(e,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var l=n.$ref?n:n.$dbPointer;if(l instanceof db_ref)return l;var _=Object.keys(l).filter(function(e){return e.startsWith("$")}),c=!0;if(_.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(c=!1)}),c)return db_ref.fromExtendedJSON(l)}return n}function parse(e,t){var n=this;return"boolean"==typeof(t=Object.assign({},{relaxed:!0},t)).relaxed&&(t.strict=!t.relaxed),"boolean"==typeof t.strict&&(t.relaxed=!t.strict),JSON.parse(e,function(e,r){return deserializeValue(n,e,r,t)})}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(e,t,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==t||"object"!==_typeof$2(t)||Array.isArray(t)||(r=t,t=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(e)?serializeArray(e,r):serializeDocument(e,r);return JSON.stringify(i,t,n)}function serialize(e,t){return t=t||{},JSON.parse(stringify(e,t))}function deserialize(e,t){return t=t||{},parse(JSON.stringify(e),t)}function serializeArray(e,t){return e.map(function(e){return serializeValue(e,t)})}function getISOString(e){var t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function serializeValue(e,t){if(Array.isArray(e))return serializeArray(e,t);if(void 0===e)return null;if(e instanceof Date){var n=e.getTime(),r=n>-1&&n<2534023188e5;return t.relaxed&&r?{$date:getISOString(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){var i=e>=BSON_INT64_MIN&&e<=BSON_INT64_MAX;if(e>=BSON_INT32_MIN&&e<=BSON_INT32_MAX)return{$numberInt:e.toString()};if(i)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){var o=e.flags;return void 0===o&&(o=e.toString().match(/[gimuy]*$/)[0]),new regexp(e.source,o).toExtendedJSON()}return null!=e&&"object"===_typeof$2(e)?serializeDocument(e,t):e}var BSON_TYPE_MAPPINGS={Binary:function(e){return new binary(e.value(),e.subtype)},Code:function(e){return new code(e.code,e.scope)},DBRef:function(e){return new db_ref(e.collection||e.namespace,e.oid,e.db,e.fields)},Decimal128:function(e){return new decimal128(e.bytes)},Double:function(e){return new double_1(e.value)},Int32:function(e){return new int_32(e.value)},Long:function(e){return long_1.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(e){return new objectid(e)},ObjectId:function(e){return new objectid(e)},BSONRegExp:function(e){return new regexp(e.pattern,e.options)},Symbol:function(e){return new symbol(e.value)},Timestamp:function(e){return timestamp.fromBits(e.low,e.high)}};function serializeDocument(e,t){if(null==e||"object"!==_typeof$2(e))throw new Error("not an object instance");var n=e._bsontype;if(void 0===n){var r={};for(var i in e)r[i]=serializeValue(e[i],t);return r}if("string"==typeof n){var o=e;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,t)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,t),o.db,o.fields)),o.toExtendedJSON(t)}throw new Error("_bsontype must be a string, but was: "+_typeof$2(n))}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(e,t,n){for(var r=0,i=t;i<n;i+=1){var o=e[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(e,t,n){var r=(t=null==t?{}:t)&&t.index?t.index:0,i=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(t.allowObjectSmallerThanBufferSize&&e.length<i)throw new Error("buffer length ".concat(e.length," must be >= bson size ").concat(i));if(!t.allowObjectSmallerThanBufferSize&&e.length!==i)throw new Error("buffer length ".concat(e.length," must === bson size ").concat(i));if(i+r>e.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(e),")"));if(0!==e[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(e,r,t,n)}function deserializeObject(e,t,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var a=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,f=null!=n.raw&&n.raw,l="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,_=null!=n.promoteBuffers&&n.promoteBuffers,c=null==n.promoteLongs||n.promoteLongs,p=null==n.promoteValues||n.promoteValues,h=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var b=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(b<5||b>e.length)throw new Error("corrupt bson message");for(var d=r?[]:{},g=0;;){var y=e[t++];if(0===y)break;for(var m=t;0!==e[m]&&m<e.length;)m++;if(m>=Buffer$4.byteLength(e))throw new Error("Bad BSON Document: illegal CString");var N=r?g++:e.toString("utf8",t,m);if(t=m+1,y===constants.BSON_DATA_STRING){var S=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(S<=0||S>e.length-t||0!==e[t+S-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+S-1))throw new Error("Invalid UTF-8 string in BSON document");var B=e.toString("utf8",t,t+S-1);d[N]=B,t+=S}else if(y===constants.BSON_DATA_OID){var O=Buffer$4.alloc(12);e.copy(O,0,t,t+12),d[N]=new objectid(O),t+=12}else if(y===constants.BSON_DATA_INT&&!1===p)d[N]=new int_32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(y===constants.BSON_DATA_INT)d[N]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(y===constants.BSON_DATA_NUMBER&&!1===p)d[N]=new double_1(e.readDoubleLE(t)),t+=8;else if(y===constants.BSON_DATA_NUMBER)d[N]=e.readDoubleLE(t),t+=8;else if(y===constants.BSON_DATA_DATE){var w=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,E=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;d[N]=new Date(new long_1(w,E).toNumber())}else if(y===constants.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");d[N]=1===e[t++]}else if(y===constants.BSON_DATA_OBJECT){var A=t,v=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(v<=0||v>e.length-t)throw new Error("bad embedded document length in bson");d[N]=f?e.slice(t,t+v):deserializeObject(e,A,n,!1),t+=v}else if(y===constants.BSON_DATA_ARRAY){var T=t,I=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,D=n,$=t+I;if(u&&u[N]){for(var x in D={},n)D[x]=n[x];D.raw=!0}if(d[N]=deserializeObject(e,T,D,!0),0!==e[(t+=I)-1])throw new Error("invalid array terminator byte");if(t!==$)throw new Error("corrupted array bson")}else if(y===constants.BSON_DATA_UNDEFINED)d[N]=void 0;else if(y===constants.BSON_DATA_NULL)d[N]=null;else if(y===constants.BSON_DATA_LONG){var R=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,k=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,M=new long_1(R,k);d[N]=c&&!0===p&&M.lessThanOrEqual(JS_INT_MAX_LONG)&&M.greaterThanOrEqual(JS_INT_MIN_LONG)?M.toNumber():M}else if(y===constants.BSON_DATA_DECIMAL128){var P=Buffer$4.alloc(16);e.copy(P,0,t,t+16),t+=16;var C=new decimal128(P);d[N]=C.toObject?C.toObject():C}else if(y===constants.BSON_DATA_BINARY){var U=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,j=U,z=e[t++];if(U<0)throw new Error("Negative binary type element size found");if(U>Buffer$4.byteLength(e))throw new Error("Binary type size larger than document size");if(null!=e.slice){if(z===binary.SUBTYPE_BYTE_ARRAY){if((U=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U>j-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(U<j-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}d[N]=_&&p?e.slice(t,t+U):new binary(e.slice(t,t+U),z)}else{var L="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(U)):new Array(U);if(z===binary.SUBTYPE_BYTE_ARRAY){if((U=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U>j-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(U<j-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(m=0;m<U;m++)L[m]=e[t+m];d[N]=_&&p?L:new binary(L,z)}t+=U}else if(y===constants.BSON_DATA_REGEXP&&!1===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var Y=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var F=e.toString("utf8",t,m);t=m+1;var q=new Array(F.length);for(m=0;m<F.length;m++)switch(F[m]){case"m":q[m]="m";break;case"s":q[m]="g";break;case"i":q[m]="i"}d[N]=new RegExp(Y,q.join(""))}else if(y===constants.BSON_DATA_REGEXP&&!0===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var J=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var X=e.toString("utf8",t,m);t=m+1,d[N]=new regexp(J,X)}else if(y===constants.BSON_DATA_SYMBOL){var K=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(K<=0||K>e.length-t||0!==e[t+K-1])throw new Error("bad string length in bson");d[N]=e.toString("utf8",t,t+K-1),t+=K}else if(y===constants.BSON_DATA_TIMESTAMP){var H=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,G=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;d[N]=new timestamp(H,G)}else if(y===constants.BSON_DATA_MIN_KEY)d[N]=new min_key;else if(y===constants.BSON_DATA_MAX_KEY)d[N]=new max_key;else if(y===constants.BSON_DATA_CODE){var W=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(W<=0||W>e.length-t||0!==e[t+W-1])throw new Error("bad string length in bson");var V=e.toString("utf8",t,t+W-1);if(i)if(o){var Z=s?a(V):V;d[N]=isolateEvalWithHash(functionCache,Z,V,d)}else d[N]=isolateEval(V);else d[N]=new code(V);t+=W}else if(y===constants.BSON_DATA_CODE_W_SCOPE){var Q=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var ee=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ee<=0||ee>e.length-t||0!==e[t+ee-1])throw new Error("bad string length in bson");var te=e.toString("utf8",t,t+ee-1),ne=t+=ee,re=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,ie=deserializeObject(e,ne,n,!1);if(t+=re,Q<8+re+ee)throw new Error("code_w_scope total size is to short, truncating scope");if(Q>8+re+ee)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var oe=s?a(te):te;d[N]=isolateEvalWithHash(functionCache,oe,te,d)}else d[N]=isolateEval(te);d[N].scope=ie}else d[N]=new code(te,ie)}else{if(y!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+y.toString(16)+' for fieldname "'+N+'", are you using the latest BSON parser?');var se=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(se<=0||se>e.length-t||0!==e[t+se-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+se-1))throw new Error("Invalid UTF-8 string in BSON document");var ae=e.toString("utf8",t,t+se-1);t+=se;var ue=Buffer$4.alloc(12);e.copy(ue,0,t,t+12);var fe=new objectid(ue);t+=12,d[N]=new db_ref(ae,fe)}}if(b!==t-h){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var le=Object.keys(d).filter(function(e){return e.startsWith("$")}),_e=!0;if(le.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(_e=!1)}),!_e)return d;if(null!=d.$id&&null!=d.$ref){var ce=Object.assign({},d);return delete ce.$ref,delete ce.$id,delete ce.$db,new db_ref(d.$ref,d.$id,d.$db||null,ce)}return d}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(e,t,n,r,i){var o,s,a="big"===n,u=8*i-r-1,f=(1<<u)-1,l=f>>1,_=-7,c=a?0:i-1,p=a?1:-1,h=e[t+c];for(c+=p,o=h&(1<<-_)-1,h>>=-_,_+=u;_>0;o=256*o+e[t+c],c+=p,_-=8);for(s=o&(1<<-_)-1,o>>=-_,_+=r;_>0;s=256*s+e[t+c],c+=p,_-=8);if(0===o)o=1-l;else{if(o===f)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(e,t,n,r,i,o){var s,a,u,f="big"===r,l=8*o-i-1,_=(1<<l)-1,c=_>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=f?o-1:0,b=f?-1:1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=_):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+c>=1?p/u:p*Math.pow(2,1-c))*u>=2&&(s++,u/=2),s+c>=_?(a=0,s=_):s+c>=1?(a=(t*u-1)*Math.pow(2,i),s+=c):(a=t*Math.pow(2,c-1)*Math.pow(2,i),s=0)),isNaN(t)&&(a=0);i>=8;)e[n+h]=255&a,h+=b,a/=256,i-=8;for(s=s<<i|a,isNaN(t)&&(s+=8),l+=i;l>0;)e[n+h]=255&s,h+=b,s/=256,l-=8;e[n+h-b]|=128*d}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(e){return(_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$5=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(e){return"object"===_typeof$3(e)&&"[object Date]"===Object.prototype.toString.call(e)},isRegExp$1=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function serializeString(e,t,n,r,i){e[r++]=constants.BSON_DATA_STRING;var o=i?e.write(t,r,"ascii"):e.write(t,r,"utf8");e[(r=r+o+1)-1]=0;var s=e.write(n,r+4,"utf8");return e[r+3]=s+1>>24&255,e[r+2]=s+1>>16&255,e[r+1]=s+1>>8&255,e[r]=s+1&255,r=r+4+s,e[r++]=0,r}function serializeNumber(e,t,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8}else{e[r++]=constants.BSON_DATA_LONG,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),a=o.getHighBits();e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255}else e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8;return r}function serializeNull(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NULL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeBoolean(e,t,n,r,i){return e[r++]=constants.BSON_DATA_BOOLEAN,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function serializeDate(e,t,n,r,i){e[r++]=constants.BSON_DATA_DATE,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),a=o.getHighBits();return e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function serializeRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=e.write(n.source,r,"utf8"),e[r++]=0,n.ignoreCase&&(e[r++]=105),n.global&&(e[r++]=115),n.multiline&&(e[r++]=109),e[r++]=0,r}function serializeBSONRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=e.write(n.pattern,r,"utf8"),e[r++]=0,r+=e.write(n.options.split("").sort().join(""),r,"utf8"),e[r++]=0,r}function serializeMinMax(e,t,n,r,i){return null===n?e[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=constants.BSON_DATA_MIN_KEY:e[r++]=constants.BSON_DATA_MAX_KEY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeObjectId(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_OID,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function serializeBuffer(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.length;return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(e,r,0,o),r+=o}function serializeObject(e,t,n,r,i,o,s,a,u,f){for(var l=0;l<f.length;l++)if(f[l]===n)throw new Error("cyclic dependency detected");f.push(n),e[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var _=serializeInto(e,n,i,r,o+1,s,a,f);return f.pop(),_}function serializeDecimal128(e,t,n,r,i){return e[r++]=constants.BSON_DATA_DECIMAL128,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function serializeLong(e,t,n,r,i){e[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function serializeInt32(e,t,n,r,i){return e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function serializeDouble(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n.value,r,"little",52,8),r+=8}function serializeFunction(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_CODE,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a=normalizedFunctionString$1(n),u=e.write(a,r+4,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function serializeCode(e,t,n,r,i,o,s,a,u){if(n.scope&&"object"===_typeof$3(n.scope)){e[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var f=r,l="string"==typeof n.code?n.code:n.code.toString();r+=4;var _=e.write(l,r+4,"utf8")+1;e[r]=255&_,e[r+1]=_>>8&255,e[r+2]=_>>16&255,e[r+3]=_>>24&255,e[r+4+_-1]=0,r=r+_+4;var c=serializeInto(e,n.scope,i,r,o+1,s,a);r=c-1;var p=c-f;e[f++]=255&p,e[f++]=p>>8&255,e[f++]=p>>16&255,e[f++]=p>>24&255,e[r++]=0}else{e[r++]=constants.BSON_DATA_CODE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var h=n.code.toString(),b=e.write(h,r+4,"utf8")+1;e[r]=255&b,e[r+1]=b>>8&255,e[r+2]=b>>16&255,e[r+3]=b>>24&255,r=r+4+b-1,e[r++]=0}return r}function serializeBinary(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255),o.copy(e,r,0,n.position),r+=n.position}function serializeSymbol(e,t,n,r,i){e[r++]=constants.BSON_DATA_SYMBOL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=e.write(n.value,r+4,"utf8")+1;return e[r]=255&o,e[r+1]=o>>8&255,e[r+2]=o>>16&255,e[r+3]=o>>24&255,r=r+4+o-1,e[r++]=0,r}function serializeDBRef(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_OBJECT,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a,u=r,f={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(f.$db=n.db);var l=(a=serializeInto(e,f=Object.assign(f,n.fields),!1,r,i+1,o))-u;return e[u++]=255&l,e[u++]=l>>8&255,e[u++]=l>>16&255,e[u++]=l>>24&255,a}function serializeInto(e,t,n,r,i,o,s,a){r=r||0,(a=a||[]).push(t);var u=r+4;if(Array.isArray(t))for(var f=0;f<t.length;f++){var l=""+f,_=t[f];if(_&&_.toBSON){if("function"!=typeof _.toBSON)throw new TypeError("toBSON is not a function");_=_.toBSON()}var c=_typeof$3(_);if("string"===c)u=serializeString(e,l,_,u,!0);else if("number"===c)u=serializeNumber(e,l,_,u,!0);else if("boolean"===c)u=serializeBoolean(e,l,_,u,!0);else if(_ instanceof Date||isDate$1(_))u=serializeDate(e,l,_,u,!0);else if(void 0===_)u=serializeNull(e,l,_,u,!0);else if(null===_)u=serializeNull(e,l,_,u,!0);else if("ObjectId"===_._bsontype||"ObjectID"===_._bsontype)u=serializeObjectId(e,l,_,u,!0);else if(Buffer$5.isBuffer(_))u=serializeBuffer(e,l,_,u,!0);else if(_ instanceof RegExp||isRegExp$1(_))u=serializeRegExp(e,l,_,u,!0);else if("object"===c&&null==_._bsontype)u=serializeObject(e,l,_,u,n,i,o,s,!0,a);else if("object"===c&&"Decimal128"===_._bsontype)u=serializeDecimal128(e,l,_,u,!0);else if("Long"===_._bsontype||"Timestamp"===_._bsontype)u=serializeLong(e,l,_,u,!0);else if("Double"===_._bsontype)u=serializeDouble(e,l,_,u,!0);else if("function"==typeof _&&o)u=serializeFunction(e,l,_,u,n,i,o,!0);else if("Code"===_._bsontype)u=serializeCode(e,l,_,u,n,i,o,s,!0);else if("Binary"===_._bsontype)u=serializeBinary(e,l,_,u,!0);else if("Symbol"===_._bsontype)u=serializeSymbol(e,l,_,u,!0);else if("DBRef"===_._bsontype)u=serializeDBRef(e,l,_,u,i,o,!0);else if("BSONRegExp"===_._bsontype)u=serializeBSONRegExp(e,l,_,u,!0);else if("Int32"===_._bsontype)u=serializeInt32(e,l,_,u,!0);else if("MinKey"===_._bsontype||"MaxKey"===_._bsontype)u=serializeMinMax(e,l,_,u,!0);else if(void 0!==_._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+_._bsontype)}else if(t instanceof map)for(var p=t.entries(),h=!1;!h;){var b=p.next();if(!(h=b.done)){var d=b.value[0],g=b.value[1],y=_typeof$3(g);if("string"==typeof d&&!ignoreKeys.has(d)){if(null!=d.match(regexp$1))throw Error("key "+d+" must not contain null bytes");if(n){if("$"===d[0])throw Error("key "+d+" must not start with '$'");if(~d.indexOf("."))throw Error("key "+d+" must not contain '.'")}}if("string"===y)u=serializeString(e,d,g,u);else if("number"===y)u=serializeNumber(e,d,g,u);else if("boolean"===y)u=serializeBoolean(e,d,g,u);else if(g instanceof Date||isDate$1(g))u=serializeDate(e,d,g,u);else if(null===g||void 0===g&&!1===s)u=serializeNull(e,d,g,u);else if("ObjectId"===g._bsontype||"ObjectID"===g._bsontype)u=serializeObjectId(e,d,g,u);else if(Buffer$5.isBuffer(g))u=serializeBuffer(e,d,g,u);else if(g instanceof RegExp||isRegExp$1(g))u=serializeRegExp(e,d,g,u);else if("object"===y&&null==g._bsontype)u=serializeObject(e,d,g,u,n,i,o,s,!1,a);else if("object"===y&&"Decimal128"===g._bsontype)u=serializeDecimal128(e,d,g,u);else if("Long"===g._bsontype||"Timestamp"===g._bsontype)u=serializeLong(e,d,g,u);else if("Double"===g._bsontype)u=serializeDouble(e,d,g,u);else if("Code"===g._bsontype)u=serializeCode(e,d,g,u,n,i,o,s);else if("function"==typeof g&&o)u=serializeFunction(e,d,g,u,n,i,o);else if("Binary"===g._bsontype)u=serializeBinary(e,d,g,u);else if("Symbol"===g._bsontype)u=serializeSymbol(e,d,g,u);else if("DBRef"===g._bsontype)u=serializeDBRef(e,d,g,u,i,o);else if("BSONRegExp"===g._bsontype)u=serializeBSONRegExp(e,d,g,u);else if("Int32"===g._bsontype)u=serializeInt32(e,d,g,u);else if("MinKey"===g._bsontype||"MaxKey"===g._bsontype)u=serializeMinMax(e,d,g,u);else if(void 0!==g._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+g._bsontype)}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!==_typeof$3(t))throw new TypeError("toBSON function did not return an object")}for(var m in t){var N=t[m];if(N&&N.toBSON){if("function"!=typeof N.toBSON)throw new TypeError("toBSON is not a function");N=N.toBSON()}var S=_typeof$3(N);if("string"==typeof m&&!ignoreKeys.has(m)){if(null!=m.match(regexp$1))throw Error("key "+m+" must not contain null bytes");if(n){if("$"===m[0])throw Error("key "+m+" must not start with '$'");if(~m.indexOf("."))throw Error("key "+m+" must not contain '.'")}}if("string"===S)u=serializeString(e,m,N,u);else if("number"===S)u=serializeNumber(e,m,N,u);else if("boolean"===S)u=serializeBoolean(e,m,N,u);else if(N instanceof Date||isDate$1(N))u=serializeDate(e,m,N,u);else if(void 0===N)!1===s&&(u=serializeNull(e,m,N,u));else if(null===N)u=serializeNull(e,m,N,u);else if("ObjectId"===N._bsontype||"ObjectID"===N._bsontype)u=serializeObjectId(e,m,N,u);else if(Buffer$5.isBuffer(N))u=serializeBuffer(e,m,N,u);else if(N instanceof RegExp||isRegExp$1(N))u=serializeRegExp(e,m,N,u);else if("object"===S&&null==N._bsontype)u=serializeObject(e,m,N,u,n,i,o,s,!1,a);else if("object"===S&&"Decimal128"===N._bsontype)u=serializeDecimal128(e,m,N,u);else if("Long"===N._bsontype||"Timestamp"===N._bsontype)u=serializeLong(e,m,N,u);else if("Double"===N._bsontype)u=serializeDouble(e,m,N,u);else if("Code"===N._bsontype)u=serializeCode(e,m,N,u,n,i,o,s);else if("function"==typeof N&&o)u=serializeFunction(e,m,N,u,n,i,o);else if("Binary"===N._bsontype)u=serializeBinary(e,m,N,u);else if("Symbol"===N._bsontype)u=serializeSymbol(e,m,N,u);else if("DBRef"===N._bsontype)u=serializeDBRef(e,m,N,u,i,o);else if("BSONRegExp"===N._bsontype)u=serializeBSONRegExp(e,m,N,u);else if("Int32"===N._bsontype)u=serializeInt32(e,m,N,u);else if("MinKey"===N._bsontype||"MaxKey"===N._bsontype)u=serializeMinMax(e,m,N,u);else if(void 0!==N._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+N._bsontype)}}a.pop(),e[u++]=0;var B=u-r;return e[r++]=255&B,e[r++]=B>>8&255,e[r++]=B>>16&255,e[r++]=B>>24&255,u}var serializer=serializeInto;function _typeof$4(e){return(_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$6=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(e){return"object"===_typeof$4(e)&&"[object Date]"===Object.prototype.toString.call(e)}function calculateObjectSize(e,t,n){var r=5;if(Array.isArray(e))for(var i=0;i<e.length;i++)r+=calculateElement(i.toString(),e[i],t,!0,n);else for(var o in e.toBSON&&(e=e.toBSON()),e)r+=calculateElement(o,e[o],t,!1,n);return r}function calculateElement(e,t,n,r,i){switch(t&&t.toBSON&&(t=t.toBSON()),_typeof$4(t)){case"string":return 1+Buffer$6.byteLength(e,"utf8")+1+4+Buffer$6.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=constants.JS_INT_MIN&&t<=constants.JS_INT_MAX&&t>=constants.BSON_INT32_MIN&&t<=constants.BSON_INT32_MAX?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+5:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||isDate$2(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+6+t.length;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&Object.keys(t.scope).length>0?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1+calculateObjectSize(t.scope,n,i):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+Buffer$6.byteLength(t.value,"utf8")+4+1+1;if("DBRef"===t._bsontype){var o=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(o.$db=t.db),(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+calculateObjectSize(o,n,i)}return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.pattern,"utf8")+1+Buffer$6.byteLength(t.options,"utf8")+1:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+calculateObjectSize(t,n,i)+1;case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(n&&null!=t.scope&&Object.keys(t.scope).length>0)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1+calculateObjectSize(t.scope,n,i);if(n)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,ensure_buffer=function(e){if(e instanceof Buffer$7)return e;if(e instanceof Uint8Array)return Buffer$7.from(e.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(e){buffer$1.length<e&&(buffer$1=Buffer$8.alloc(e))}function serialize$1(e,t){var n="boolean"==typeof(t=t||{}).checkKeys&&t.checkKeys,r="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,i="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,o="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,e,n,0,0,r,i,[]),a=Buffer$8.alloc(s);return buffer$1.copy(a,0,0,a.length),a}function serializeWithBufferAndIndex(e,t,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,a=serializer(buffer$1,e,r,0,0,i,o);return buffer$1.copy(t,s,0,a),s+a-1}function deserialize$2(e,t){return e=ensure_buffer(e),deserializer(e,t)}function calculateObjectSize$1(e,t){var n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return calculate_size(e,n,r)}function deserializeStream(e,t,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),e=ensure_buffer(e);for(var s=t,a=0;a<n;a++){var u=e[s]|e[s+1]<<8|e[s+2]<<16|e[s+3]<<24;o.index=s,r[i+a]=deserializer(e,o),s+=u}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;__webpack_exports__.default=bson},function(e,t){const n=null,r=function(){Date.prototype.getStamp||(Date.prototype.getStamp=function(){return Math.floor(this.getTime()/1e3)}),Date.getCurrentStamp||(Date.getCurrentStamp=function(){return(new Date).getStamp()});const e=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2],t=[1,0,"X",9,8,7,6,5,4,3,2],n=/^[1-9][0-7]\d{4}((19\d{2}(0[13-9]|1[012])(0[1-9]|[12]\d|30))|(19\d{2}(0[13578]|1[02])31)|(19\d{2}02(0[1-9]|1\d|2[0-8]))|(19([13579][26]|[2468][048]|0[48])0229))\d{3}(\d|X|x)?$/i;return String.prototype.isCnNewID||(String.prototype.isCnNewID=function(){if(n.test(this)){let n=0,r=0;for(let t=0;t<this.length-1;t++)n+=parseInt(this.substr(t,1),10)*e[t];return t[r=n%11]==this.substr(17,1).toUpperCase()}return!1}),{date_getStamp:Date.prototype.getStamp,getCurrentStamp:Date.getCurrentStamp,string_isCnNewID:String.prototype.isCnNewID}}();function i(e){this.message=e,this.type="customer",this.name="CustomerError",this.code=9999,this.innerError=this}function o(e){if(e instanceof i)return e;const t=new i;if(e&&"string"!=typeof e){if(e instanceof Error){const{message:n,code:r,type:i,name:o,stack:s,number:a}=e;t.code="number"==typeof r?r:"number"==typeof a?a:t.code,t.message=`(Code:${t.code})${n}`,t.type=i||t.type,t.name=o||t.name,t.stack=s}}else t.message=e||"undefined error!";return t.innerError=e,t}i.prototype=new Error,i.prototype.log=function(e){(e=e||this.logger||console).error(`[!EXCEPTION] - [${this.type}] -> ${this.name||this.message} (Code:${this.code})<----`),this.fileName&&e.error(`\t [line ${this.lineNumber}, col ${this.columnNumber}] - ${this.fileName}`),this.name&&e.error(`\t [message] - ${this.message}`),e.error(`\t ${this.stack||this.innerError.stack}`),e.error("\t --------------------------------------------------")},t.polyfills=r,t.Exception=i,t.caught=o,t.errlog=function(e,t){e instanceof i?e.log(t||n):o(e).log(t||n)},t.setLogger=function(e){n=e}},function(e,t){t.sleep=e=>new Promise(t=>setTimeout(()=>t(),e))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,